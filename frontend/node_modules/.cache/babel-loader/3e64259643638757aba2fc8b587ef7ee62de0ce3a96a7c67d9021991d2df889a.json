{"ast":null,"code":"import _regeneratorRuntime from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'SimulationCreate',\n  data: function data() {\n    return {\n      valid: true,\n      loading: false,\n      simulation: {\n        name: '',\n        description: '',\n        environment_size: 500,\n        num_hunters: 5,\n        num_targets: 1,\n        algorithm_type: 'APF',\n        max_steps: 1000\n      },\n      algorithmOptions: [{\n        text: '人工势场法 (APF)',\n        value: 'APF'\n      }, {\n        text: '共识算法 (CONSENSUS)',\n        value: 'CONSENSUS'\n      }, {\n        text: '基于角色的策略 (ROLE_BASED)',\n        value: 'ROLE_BASED'\n      }, {\n        text: '包围策略 (ENCIRCLEMENT)',\n        value: 'ENCIRCLEMENT'\n      }]\n    };\n  },\n  methods: {\n    resetForm: function resetForm() {\n      this.$refs.form.reset();\n      this.simulation = {\n        name: '',\n        description: '',\n        environment_size: 500,\n        num_hunters: 5,\n        num_targets: 1,\n        algorithm_type: 'APF',\n        max_steps: 1000\n      };\n    },\n    createSimulation: function createSimulation() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, simulationId, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.$refs.form.validate()) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _this.loading = true;\n              _context.prev = 3;\n              console.log('创建模拟:', _this.simulation);\n\n              // 使用正确的Axios引用方式\n              _context.next = 7;\n              return _this.axios.post('/simulations/', _this.simulation);\n            case 7:\n              response = _context.sent;\n              // 添加响应验证和调试\n              console.log('API响应:', response);\n              if (!(response && response.data)) {\n                _context.next = 21;\n                break;\n              }\n              _this.$toast.success('模拟创建成功');\n\n              // 确保ID存在且类型正确\n              simulationId = response.data.id;\n              console.log('新创建的模拟ID:', simulationId);\n              if (!simulationId) {\n                _context.next = 18;\n                break;\n              }\n              // 在Vuex中添加新模拟\n              _this.$store.commit('ADD_SIMULATION', response.data);\n\n              // 添加短延迟确保状态更新\n              setTimeout(function () {\n                // 导航到模拟详情页\n                _this.$router.push(\"/simulations/\".concat(simulationId));\n              }, 100);\n              _context.next = 19;\n              break;\n            case 18:\n              throw new Error('响应中缺少模拟ID');\n            case 19:\n              _context.next = 22;\n              break;\n            case 21:\n              throw new Error('无效的服务器响应');\n            case 22:\n              _context.next = 30;\n              break;\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](3);\n              console.error('创建模拟失败:', _context.t0);\n\n              // 详细错误信息\n              errorMessage = '创建模拟失败';\n              if (_context.t0.response) {\n                // 服务器返回错误状态码\n                errorMessage += \": \\u670D\\u52A1\\u5668\\u9519\\u8BEF (\".concat(_context.t0.response.status, \")\");\n                console.error('错误响应:', _context.t0.response);\n              } else if (_context.t0.request) {\n                // 请求发出但未收到响应\n                errorMessage += ': 网络连接问题';\n              } else {\n                // 请求设置错误\n                errorMessage += \": \".concat(_context.t0.message);\n              }\n              _this.$toast.error(errorMessage);\n            case 30:\n              _context.prev = 30;\n              _this.loading = false;\n              return _context.finish(30);\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3, 24, 30, 33]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["name","data","valid","loading","simulation","description","environment_size","num_hunters","num_targets","algorithm_type","max_steps","algorithmOptions","text","value","methods","resetForm","$refs","form","reset","createSimulation","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","simulationId","errorMessage","wrap","_callee$","_context","prev","next","validate","abrupt","console","log","axios","post","sent","$toast","success","id","$store","commit","setTimeout","$router","push","concat","Error","t0","error","status","request","message","finish","stop"],"sources":["src/views/SimulationCreate.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-create\">\r\n    <v-container>\r\n      <v-row>\r\n        <v-col cols=\"12\" md=\"8\" offset-md=\"2\">\r\n          <v-card>\r\n            <v-card-title class=\"headline\">创建新模拟</v-card-title>\r\n            \r\n            <v-card-text>\r\n              <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\r\n                <v-text-field\r\n                  v-model=\"simulation.name\"\r\n                  label=\"模拟名称\"\r\n                  required\r\n                  :rules=\"[v => !!v || '名称不能为空']\"\r\n                ></v-text-field>\r\n                \r\n                <v-textarea\r\n                  v-model=\"simulation.description\"\r\n                  label=\"模拟描述\"\r\n                  rows=\"3\"\r\n                ></v-textarea>\r\n                \r\n                <v-select\r\n                  v-model=\"simulation.algorithm_type\"\r\n                  :items=\"algorithmOptions\"\r\n                  label=\"算法类型\"\r\n                  required\r\n                  :rules=\"[v => !!v || '请选择算法类型']\"\r\n                ></v-select>\r\n                \r\n                <v-slider\r\n                  v-model=\"simulation.environment_size\"\r\n                  label=\"环境大小\"\r\n                  min=\"200\"\r\n                  max=\"1000\"\r\n                  step=\"50\"\r\n                  thumb-label=\"always\"\r\n                  class=\"mt-4\"\r\n                ></v-slider>\r\n                \r\n                <v-slider\r\n                  v-model=\"simulation.num_hunters\"\r\n                  label=\"猎手数量\"\r\n                  min=\"1\"\r\n                  max=\"10\"\r\n                  step=\"1\"\r\n                  thumb-label=\"always\"\r\n                  class=\"mt-4\"\r\n                ></v-slider>\r\n                \r\n                <v-slider\r\n                  v-model=\"simulation.num_targets\"\r\n                  label=\"目标数量\"\r\n                  min=\"1\"\r\n                  max=\"3\"\r\n                  step=\"1\"\r\n                  thumb-label=\"always\"\r\n                  class=\"mt-4\"\r\n                ></v-slider>\r\n                \r\n                <v-slider\r\n                  v-model=\"simulation.max_steps\"\r\n                  label=\"最大步数\"\r\n                  min=\"500\"\r\n                  max=\"5000\"\r\n                  step=\"500\"\r\n                  thumb-label=\"always\"\r\n                  class=\"mt-4\"\r\n                ></v-slider>\r\n              </v-form>\r\n            </v-card-text>\r\n            \r\n            <v-card-actions>\r\n              <v-btn text color=\"primary\" @click=\"$router.push('/simulations')\">\r\n                <v-icon left>mdi-arrow-left</v-icon> 返回列表\r\n              </v-btn>\r\n              <v-spacer></v-spacer>\r\n              <v-btn text @click=\"resetForm\">\r\n                <v-icon left>mdi-refresh</v-icon> 重置\r\n              </v-btn>\r\n              <v-btn color=\"primary\" :disabled=\"!valid\" :loading=\"loading\" @click=\"createSimulation\">\r\n                <v-icon left>mdi-plus</v-icon> 创建\r\n              </v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'SimulationCreate',\r\n  data() {\r\n    return {\r\n      valid: true,\r\n      loading: false,\r\n      simulation: {\r\n        name: '',\r\n        description: '',\r\n        environment_size: 500,\r\n        num_hunters: 5,\r\n        num_targets: 1,\r\n        algorithm_type: 'APF',\r\n        max_steps: 1000\r\n      },\r\n      algorithmOptions: [\r\n      { text: '人工势场法 (APF)', value: 'APF' },\r\n  { text: '共识算法 (CONSENSUS)', value: 'CONSENSUS' },\r\n  { text: '基于角色的策略 (ROLE_BASED)', value: 'ROLE_BASED' },\r\n  { text: '包围策略 (ENCIRCLEMENT)', value: 'ENCIRCLEMENT' }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    resetForm() {\r\n      this.$refs.form.reset()\r\n      this.simulation = {\r\n        name: '',\r\n        description: '',\r\n        environment_size: 500,\r\n        num_hunters: 5,\r\n        num_targets: 1,\r\n        algorithm_type: 'APF',\r\n        max_steps: 1000\r\n      }\r\n    },\r\n    async createSimulation() {\r\n      if (!this.$refs.form.validate()) return\r\n      \r\n      this.loading = true\r\n      \r\n      try {\r\n        console.log('创建模拟:', this.simulation);\r\n        \r\n        // 使用正确的Axios引用方式\r\n        const response = await this.axios.post('/simulations/', this.simulation);\r\n        \r\n        // 添加响应验证和调试\r\n        console.log('API响应:', response);\r\n        \r\n        if (response && response.data) {\r\n          this.$toast.success('模拟创建成功');\r\n          \r\n          // 确保ID存在且类型正确\r\n          const simulationId = response.data.id;\r\n          console.log('新创建的模拟ID:', simulationId);\r\n          \r\n          if (simulationId) {\r\n            // 在Vuex中添加新模拟\r\n            this.$store.commit('ADD_SIMULATION', response.data);\r\n            \r\n            // 添加短延迟确保状态更新\r\n            setTimeout(() => {\r\n              // 导航到模拟详情页\r\n              this.$router.push(`/simulations/${simulationId}`);\r\n            }, 100);\r\n          } else {\r\n            throw new Error('响应中缺少模拟ID');\r\n          }\r\n        } else {\r\n          throw new Error('无效的服务器响应');\r\n        }\r\n      } catch (error) {\r\n        console.error('创建模拟失败:', error);\r\n        \r\n        // 详细错误信息\r\n        let errorMessage = '创建模拟失败';\r\n        \r\n        if (error.response) {\r\n          // 服务器返回错误状态码\r\n          errorMessage += `: 服务器错误 (${error.response.status})`;\r\n          console.error('错误响应:', error.response);\r\n        } else if (error.request) {\r\n          // 请求发出但未收到响应\r\n          errorMessage += ': 网络连接问题';\r\n        } else {\r\n          // 请求设置错误\r\n          errorMessage += `: ${error.message}`;\r\n        }\r\n        \r\n        this.$toast.error(errorMessage);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-create {\r\n  padding-top: 16px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}