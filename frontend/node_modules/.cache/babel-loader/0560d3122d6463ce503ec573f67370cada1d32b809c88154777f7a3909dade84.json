{"ast":null,"code":"import _typeof from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _toConsumableArray from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'SimulationCanvas',\n  props: {\n    hunters: {\n      type: Array,\n      required: true\n    },\n    targets: {\n      type: Array,\n      required: true\n    },\n    environmentSize: {\n      type: Number,\n      \"default\": 500\n    },\n    isRunning: {\n      type: Boolean,\n      \"default\": false\n    },\n    isCaptured: {\n      type: Boolean,\n      \"default\": false\n    },\n    escaped: {\n      type: Boolean,\n      \"default\": false\n    },\n    showTrails: {\n      type: Boolean,\n      \"default\": true\n    },\n    showVisionRange: {\n      type: Boolean,\n      \"default\": false\n    },\n    showCommunicationRange: {\n      type: Boolean,\n      \"default\": false\n    },\n    obstacles: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      } // 确保默认为空数组\n    }\n  },\n  data: function data() {\n    return {\n      canvasSize: 600,\n      canvas: null,\n      ctx: null,\n      scale: 1,\n      colorMap: {\n        hunter: '#3949AB',\n        // 更深的蓝色\n        target: '#e53935',\n        // 更鲜艳的红色\n        vision: 'rgba(57, 73, 171, 0.1)',\n        // 半透明蓝色\n        communication: 'rgba(57, 73, 171, 0.05)',\n        // 更透明的蓝色\n        trail: 'rgba(57, 73, 171, 0.4)',\n        // 半透明蓝色\n        captureRange: 'rgba(76, 175, 80, 0.4)',\n        // 更明显的绿色\n        captured: 'rgba(244, 67, 54, 0.25)',\n        // 半透明红色\n        obstacle: 'rgba(100, 100, 110, 0.8)' // 障碍物颜色\n      },\n      // 新增：跟踪之前的位置，用于优化渲染\n      previousPositions: {\n        hunters: [],\n        targets: []\n      },\n      // 本地obstacles引用，防止未定义错误\n      localObstacles: Array.isArray(this.obstacles) ? _toConsumableArray(this.obstacles) : [],\n      showObstacles: true,\n      // 默认显示障碍物\n      // 防抖渲染计时器\n      renderTimer: null,\n      // 帧率控制\n      lastRenderTime: 0,\n      targetFPS: 30,\n      // 渲染计数，用于降低非必要渲染的频率\n      renderCount: 0,\n      // 动画相关\n      animationFrameId: null,\n      animationFrames: 0,\n      pulseDirection: 1,\n      pulseState: 0,\n      floatOffset: 0,\n      // 是否显示标签\n      showLabels: false,\n      // 记录前一次运行状态\n      previousIsRunning: false,\n      previousIsCaptured: false,\n      needsRender: false,\n      lastRenderState: {\n        isCaptured: false,\n        isEscaped: false\n      },\n      // 使用非响应式引用存储数据的本地副本\n      _huntersCache: null,\n      _targetsCache: null\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n    // 初始化本地obstacles\n    this.localObstacles = Array.isArray(this.obstacles) ? _toConsumableArray(this.obstacles) : [];\n\n    // 执行一次初始绘制\n    this.drawSimulation(true);\n\n    // 添加窗口大小变化监听\n    window.addEventListener('resize', this.handleResize);\n\n    // 使用requestAnimationFrame实现高效渲染循环\n    this.startRenderLoop();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // 彻底清理资源\n    this.stopRenderLoop();\n    window.removeEventListener('resize', this.handleResize);\n    if (this.renderTimer) {\n      clearTimeout(this.renderTimer);\n      this.renderTimer = null;\n    }\n\n    // 释放缓存\n    this._huntersCache = null;\n    this._targetsCache = null;\n  },\n  methods: {\n    // 确保hunters数据是数组\n    ensureHuntersArray: function ensureHuntersArray() {\n      // 如果模拟已完成且有缓存，使用缓存\n      if ((this.isCaptured || this.escaped) && this._huntersCache) {\n        return this._huntersCache;\n      }\n\n      // 正常处理逻辑\n      var result = [];\n      if (typeof this.hunters === 'string') {\n        try {\n          result = JSON.parse(this.hunters);\n        } catch (e) {\n          console.error('无法解析hunters数据:', e);\n        }\n      } else if (Array.isArray(this.hunters)) {\n        result = _toConsumableArray(this.hunters); // 创建浅拷贝以避免直接操作原始数据\n      }\n\n      // 如果模拟已完成，缓存结果\n      if (this.isCaptured || this.escaped) {\n        this._huntersCache = result;\n      }\n      return result;\n    },\n    // 确保targets数据是数组\n    ensureTargetsArray: function ensureTargetsArray() {\n      // 如果模拟已完成且有缓存，使用缓存\n      if ((this.isCaptured || this.escaped) && this._targetsCache) {\n        return this._targetsCache;\n      }\n\n      // 正常处理逻辑\n      var result = [];\n      if (typeof this.targets === 'string') {\n        try {\n          result = JSON.parse(this.targets);\n        } catch (e) {\n          console.error('无法解析targets数据:', e);\n        }\n      } else if (Array.isArray(this.targets)) {\n        result = _toConsumableArray(this.targets); // 创建浅拷贝以避免直接操作原始数据\n      }\n\n      // 如果模拟已完成，缓存结果\n      if (this.isCaptured || this.escaped) {\n        this._targetsCache = result;\n      }\n      return result;\n    },\n    // 初始化画布\n    initCanvas: function initCanvas() {\n      this.canvas = this.$refs.canvas;\n      this.ctx = this.canvas.getContext('2d');\n      this.scale = this.canvasSize / this.environmentSize;\n\n      // 初始化previousPositions\n      this.updatePreviousPositions();\n    },\n    // 处理窗口大小变化\n    handleResize: function handleResize() {\n      var _this = this;\n      // 防抖处理\n      if (this.renderTimer) {\n        clearTimeout(this.renderTimer);\n      }\n      this.renderTimer = setTimeout(function () {\n        // 重新计算画布大小（可选，如果需要响应式调整画布大小）\n        // this.canvasSize = Math.min(window.innerWidth * 0.7, 600);\n        _this.scale = _this.canvasSize / _this.environmentSize;\n        _this.drawSimulation(true); // 强制完全重绘\n      }, 200);\n    },\n    // 启动渲染循环\n    startRenderLoop: function startRenderLoop() {\n      if (!this.animationFrameId) {\n        this.lastRenderTime = performance.now();\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\n      }\n    },\n    // 停止渲染循环\n    stopRenderLoop: function stopRenderLoop() {\n      if (this.animationFrameId) {\n        cancelAnimationFrame(this.animationFrameId);\n        this.animationFrameId = null;\n      }\n    },\n    // 渲染循环\n    renderLoop: function renderLoop(timestamp) {\n      var _this2 = this;\n      try {\n        // 判断模拟状态是否变化\n        var stateChanged = this.isCaptured !== this.lastRenderState.isCaptured || this.escaped !== this.lastRenderState.isEscaped;\n\n        // 如果模拟已结束且状态未变化，减少渲染频率\n        if ((this.isCaptured || this.escaped) && !stateChanged && !this.needsRender) {\n          // 模拟已结束，使用低频率更新\n          setTimeout(function () {\n            _this2.animationFrameId = requestAnimationFrame(_this2.renderLoop);\n          }, 1000); // 降低为每秒一帧\n          return;\n        }\n\n        // 更新最后渲染状态\n        if (stateChanged) {\n          this.lastRenderState.isCaptured = this.isCaptured;\n          this.lastRenderState.isEscaped = this.escaped;\n          this.needsRender = true;\n        }\n\n        // 正常渲染逻辑\n        var elapsed = timestamp - this.lastRenderTime;\n        var frameTime = 1000 / this.targetFPS;\n        if (elapsed >= frameTime || this.needsRender) {\n          this.lastRenderTime = timestamp;\n\n          // 更新动画状态\n          this.updateAnimationState();\n\n          // 仅在需要时渲染\n          if (this.needsRender || this.isRunning || this.animationFrames % 15 === 0) {\n            this.drawOptimizedSimulation();\n            this.needsRender = false;\n          }\n        }\n\n        // 设置下一帧\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\n      } catch (error) {\n        console.error('渲染循环错误:', error);\n        // 错误恢复：停止当前循环，稍后重试\n        if (this.animationFrameId) {\n          cancelAnimationFrame(this.animationFrameId);\n          this.animationFrameId = null;\n        }\n\n        // 延迟后尝试重启循环\n        setTimeout(function () {\n          _this2.startRenderLoop();\n        }, 2000);\n      }\n    },\n    updateAnimationState: function updateAnimationState() {\n      this.animationFrames++;\n      if (this.animationFrames % 3 === 0) {\n        // 更新脉冲效果\n        this.pulseState += 0.05 * this.pulseDirection;\n        if (this.pulseState >= 1) {\n          this.pulseState = 1;\n          this.pulseDirection = -1;\n        } else if (this.pulseState <= 0) {\n          this.pulseState = 0;\n          this.pulseDirection = 1;\n        }\n\n        // 更新浮动效果\n        this.floatOffset += 0.1;\n      }\n    },\n    // 检查位置是否有变化\n    hasPositionsChanged: function hasPositionsChanged() {\n      // 优化：快速检查数组长度变化\n      if (this.hunters.length !== this.previousPositions.hunters.length || this.targets.length !== this.previousPositions.targets.length) {\n        return true;\n      }\n\n      // 检查运行状态变化\n      if (this.isRunning !== this.previousIsRunning || this.isCaptured !== this.previousIsCaptured) {\n        this.previousIsRunning = this.isRunning;\n        this.previousIsCaptured = this.isCaptured;\n        return true;\n      }\n\n      // 渲染计数，每5帧强制完全重绘一次（避免累积误差）\n      this.renderCount++;\n      if (this.renderCount >= 5) {\n        this.renderCount = 0;\n        return true;\n      }\n\n      // 只有在运行中或首次渲染时，才进行位置变化检查\n      if (!this.isRunning && this.previousPositions.hunters.length > 0) {\n        return false;\n      }\n\n      // 智能体位置变化检测\n      var threshold = 0.5; // 位置变化阈值\n\n      // 检查猎手位置变化\n      for (var i = 0; i < this.hunters.length; i++) {\n        var hunter = this.hunters[i];\n        var prevHunter = this.previousPositions.hunters[i];\n        if (!prevHunter) return true;\n        if (Math.abs(hunter.position[0] - prevHunter.position[0]) > threshold || Math.abs(hunter.position[1] - prevHunter.position[1]) > threshold) {\n          return true;\n        }\n      }\n\n      // 检查目标位置变化\n      for (var _i = 0; _i < this.targets.length; _i++) {\n        var target = this.targets[_i];\n        var prevTarget = this.previousPositions.targets[_i];\n        if (!prevTarget) return true;\n        if (Math.abs(target.position[0] - prevTarget.position[0]) > threshold || Math.abs(target.position[1] - prevTarget.position[1]) > threshold) {\n          return true;\n        }\n      }\n      return false;\n    },\n    // 更新之前的位置\n    updatePreviousPositions: function updatePreviousPositions() {\n      // 深拷贝位置数据\n      this.previousPositions.hunters = this.hunters.map(function (hunter) {\n        return {\n          id: hunter.id,\n          position: _toConsumableArray(hunter.position)\n        };\n      });\n      this.previousPositions.targets = this.targets.map(function (target) {\n        return {\n          id: target.id,\n          position: _toConsumableArray(target.position)\n        };\n      });\n    },\n    // 优化的绘制方法\n    drawOptimizedSimulation: function drawOptimizedSimulation() {\n      if (!this.ctx) return;\n      try {\n        // 清除画布\n        this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n        this.drawBackground();\n\n        // 绘制环境边界\n        this.ctx.strokeStyle = '#ccc';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\n\n        // 绘制障碍物 - 只在必要时绘制\n        if (this.obstacles && Array.isArray(this.obstacles) && this.obstacles.length > 0) {\n          this.drawObstacles();\n        }\n\n        // 绘制捕获或逃脱状态\n        if (this.isCaptured) {\n          this.ctx.fillStyle = this.colorMap.captured;\n          this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n        } else if (this.escaped) {\n          this.ctx.fillStyle = 'rgba(255, 248, 225, 0.5)';\n          this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n        }\n\n        // 绘制轨迹\n        if (this.showTrails) {\n          this.drawTrails();\n        }\n\n        // 绘制视野和通信范围\n        if (this.showVisionRange || this.showCommunicationRange) {\n          this.drawRanges();\n        }\n\n        // 获取处理后的数据\n        var huntersArray = this.ensureHuntersArray();\n        var targetsArray = this.ensureTargetsArray();\n\n        // 使用安全的方式绘制猎手\n        if (Array.isArray(huntersArray)) {\n          for (var i = 0; i < huntersArray.length; i++) {\n            var hunter = huntersArray[i];\n            if (hunter && Array.isArray(hunter.position)) {\n              this.drawAgent(hunter, 'hunter');\n            }\n          }\n        }\n\n        // 使用安全的方式绘制目标\n        if (Array.isArray(targetsArray)) {\n          for (var _i2 = 0; _i2 < targetsArray.length; _i2++) {\n            var target = targetsArray[_i2];\n            if (target && Array.isArray(target.position)) {\n              this.drawAgent(target, 'target');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('绘制模拟时出错:', error);\n        // 不中断渲染循环\n      }\n    },\n    // 绘制障碍物\n    drawObstacles: function drawObstacles() {\n      // 详细日志输出当前状态\n      console.log('drawObstacles调用', {\n        '显示开关': this.showObstacles !== false,\n        '本地障碍物': this.localObstacles,\n        '属性障碍物': this.obstacles\n      });\n\n      // 检查上下文是否已初始化\n      if (!this.ctx) {\n        console.error('画布上下文未初始化，无法绘制障碍物');\n        return;\n      }\n\n      // 确保显示开关打开\n      var shouldShow = this.showObstacles !== false;\n      if (!shouldShow) {\n        console.log('障碍物显示开关关闭，跳过渲染');\n        return;\n      }\n\n      // 选择使用的障碍物数据源\n      var obstaclesToRender = null;\n\n      // 首先检查本地障碍物数组\n      if (Array.isArray(this.localObstacles) && this.localObstacles.length > 0) {\n        obstaclesToRender = this.localObstacles;\n        console.log(\"\\u4F7F\\u7528\\u672C\\u5730\\u969C\\u788D\\u7269\\u6570\\u636E\\u6E90\\uFF0C\\u6570\\u91CF: \".concat(obstaclesToRender.length));\n      }\n      // 然后检查props障碍物数组\n      else if (Array.isArray(this.obstacles) && this.obstacles.length > 0) {\n        obstaclesToRender = this.obstacles;\n        console.log(\"\\u4F7F\\u7528props\\u969C\\u788D\\u7269\\u6570\\u636E\\u6E90\\uFF0C\\u6570\\u91CF: \".concat(obstaclesToRender.length));\n        // 同步更新本地数据\n        this.localObstacles = _toConsumableArray(this.obstacles);\n      }\n      // 如果两者都不可用，尝试从simulation中获取\n      else if (this.$parent && this.$parent.simulation && Array.isArray(this.$parent.simulation.obstacles) && this.$parent.simulation.obstacles.length > 0) {\n        obstaclesToRender = this.$parent.simulation.obstacles;\n        console.log(\"\\u4F7F\\u7528\\u7236\\u7EC4\\u4EF6simulation\\u6570\\u636E\\u6E90\\uFF0C\\u6570\\u91CF: \".concat(obstaclesToRender.length));\n        // 同步更新本地数据\n        this.localObstacles = _toConsumableArray(this.$parent.simulation.obstacles);\n      } else {\n        console.warn('没有可用的障碍物数据源', {\n          localObstacles: this.localObstacles,\n          propsObstacles: this.obstacles\n        });\n        return;\n      }\n      console.log(\"\\u5F00\\u59CB\\u7ED8\\u5236\".concat(obstaclesToRender.length, \"\\u4E2A\\u969C\\u788D\\u7269:\"), JSON.stringify(obstaclesToRender));\n\n      // 遍历绘制每个障碍物\n      for (var i = 0; i < obstaclesToRender.length; i++) {\n        var obstacle = obstaclesToRender[i];\n\n        // 检查障碍物数据完整性\n        if (!obstacle) {\n          console.warn(\"\\u969C\\u788D\\u7269[\".concat(i, \"]\\u6570\\u636E\\u4E3A\\u7A7A\"));\n          continue;\n        }\n\n        // 确保position数据存在并格式正确\n        var position = obstacle.position;\n        if (!position) {\n          console.warn(\"\\u969C\\u788D\\u7269[\".concat(i, \"]\\u7F3A\\u5C11position\\u5C5E\\u6027:\"), obstacle);\n          continue;\n        }\n\n        // 处理position可能的不同格式\n        var pos = void 0;\n        try {\n          if (Array.isArray(position)) {\n            pos = this.transformPosition(position);\n          } else if (_typeof(position) === 'object') {\n            // 对象格式 {x, y}\n            if ('x' in position && 'y' in position) {\n              pos = {\n                x: position.x * this.scale,\n                y: position.y * this.scale\n              };\n            } else {\n              console.warn(\"\\u969C\\u788D\\u7269[\".concat(i, \"]\\u4F4D\\u7F6E\\u683C\\u5F0F\\u4E0D\\u652F\\u6301:\"), position);\n              continue;\n            }\n          } else {\n            console.warn(\"\\u969C\\u788D\\u7269[\".concat(i, \"]\\u4F4D\\u7F6E\\u7C7B\\u578B\\u9519\\u8BEF:\"), _typeof(position));\n            continue;\n          }\n        } catch (e) {\n          console.error(\"\\u5904\\u7406\\u969C\\u788D\\u7269[\".concat(i, \"]\\u4F4D\\u7F6E\\u65F6\\u51FA\\u9519:\"), e);\n          continue;\n        }\n\n        // 获取并检查半径\n        var radius = obstacle.radius * this.scale;\n        if (!radius || isNaN(radius) || radius <= 0) {\n          console.warn(\"\\u969C\\u788D\\u7269[\".concat(i, \"]\\u534A\\u5F84\\u65E0\\u6548:\"), obstacle.radius);\n          continue;\n        }\n\n        // 绘制障碍物\n        try {\n          // 设置样式\n          this.ctx.fillStyle = 'rgba(100, 100, 110, 0.8)';\n          this.ctx.strokeStyle = 'rgba(80, 80, 90, 0.9)';\n          this.ctx.lineWidth = 2;\n\n          // 绘制圆形\n          this.ctx.beginPath();\n          this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n          this.ctx.fill();\n          this.ctx.stroke();\n\n          // 添加编号标签（便于调试）\n          this.ctx.fillStyle = 'white';\n          this.ctx.font = '12px Arial';\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n          this.ctx.fillText(\"\".concat(i), pos.x, pos.y);\n          console.log(\"\\u6210\\u529F\\u7ED8\\u5236\\u969C\\u788D\\u7269[\".concat(i, \"]: \\u4F4D\\u7F6E(\").concat(pos.x, \", \").concat(pos.y, \"), \\u534A\\u5F84\").concat(radius));\n        } catch (e) {\n          console.error(\"\\u7ED8\\u5236\\u969C\\u788D\\u7269[\".concat(i, \"]\\u65F6\\u51FA\\u9519:\"), e);\n        }\n      }\n    },\n    drawBackground: function drawBackground() {\n      var gridSize = 25 * this.scale;\n      var width = this.canvasSize;\n      var height = this.canvasSize;\n\n      // 填充背景色\n      this.ctx.fillStyle = '#f5f7fa';\n      this.ctx.fillRect(0, 0, width, height);\n      this.ctx.strokeStyle = 'rgba(200, 200, 220, 0.3)';\n      this.ctx.lineWidth = 1;\n\n      // 绘制网格线\n      for (var x = 0; x <= width; x += gridSize) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, 0);\n        this.ctx.lineTo(x, height);\n        this.ctx.stroke();\n      }\n      for (var y = 0; y <= height; y += gridSize) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.stroke();\n      }\n\n      // 添加坐标轴\n      this.ctx.strokeStyle = 'rgba(150, 150, 180, 0.4)';\n      this.ctx.lineWidth = 2;\n\n      // x轴\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, height / 2);\n      this.ctx.lineTo(width, height / 2);\n      this.ctx.stroke();\n\n      // y轴\n      this.ctx.beginPath();\n      this.ctx.moveTo(width / 2, 0);\n      this.ctx.lineTo(width / 2, height);\n      this.ctx.stroke();\n    },\n    // 完整重绘方法\n    drawSimulation: function drawSimulation() {\n      var _this3 = this;\n      var forceFullRedraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.ctx) return;\n\n      // 如果不需要强制重绘，使用优化版本\n      if (!forceFullRedraw && this.previousPositions.hunters.length > 0) {\n        return this.drawOptimizedSimulation();\n      }\n\n      // 清除画布\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n      this.drawBackground();\n\n      // 绘制环境边界\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\n\n      // 绘制障碍物 - 添加防御性检查\n      if (this.obstacles && Array.isArray(this.obstacles) && this.obstacles.length > 0) {\n        this.drawObstacles();\n      }\n\n      // 绘制捕获状态\n      if (this.isCaptured) {\n        this.ctx.fillStyle = this.colorMap.captured;\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n      }\n\n      // 绘制轨迹（如果启用）\n      if (this.showTrails) {\n        this.drawTrails();\n      }\n\n      // 绘制视野和通信范围（如果启用）\n      if (this.showVisionRange || this.showCommunicationRange) {\n        this.drawRanges();\n      }\n\n      // 绘制猎手\n      this.hunters.forEach(function (hunter) {\n        _this3.drawAgent(hunter, 'hunter');\n      });\n\n      // 绘制目标\n      this.targets.forEach(function (target) {\n        _this3.drawAgent(target, 'target');\n      });\n\n      // 更新之前的位置\n      this.updatePreviousPositions();\n      this.previousIsRunning = this.isRunning;\n      this.previousIsCaptured = this.isCaptured;\n    },\n    // 单独绘制轨迹\n    drawTrails: function drawTrails() {\n      var _this4 = this;\n      // 确保hunters和targets是数组\n      var huntersArray = Array.isArray(this.hunters) ? this.hunters : [];\n      var targetsArray = Array.isArray(this.targets) ? this.targets : [];\n\n      // 绘制猎手轨迹\n      huntersArray.forEach(function (hunter) {\n        if (hunter && hunter.history && Array.isArray(hunter.history) && hunter.history.length > 1) {\n          _this4.ctx.beginPath();\n          var startPos = _this4.transformPosition(hunter.history[0]);\n          _this4.ctx.moveTo(startPos.x, startPos.y);\n          for (var i = 1; i < hunter.history.length; i++) {\n            var histPos = _this4.transformPosition(hunter.history[i]);\n            _this4.ctx.lineTo(histPos.x, histPos.y);\n          }\n          _this4.ctx.strokeStyle = _this4.colorMap.trail;\n          _this4.ctx.lineWidth = 1.5;\n          _this4.ctx.stroke();\n        }\n      });\n\n      // 绘制目标轨迹\n      targetsArray.forEach(function (target) {\n        if (target && target.history && Array.isArray(target.history) && target.history.length > 1) {\n          _this4.ctx.beginPath();\n          var startPos = _this4.transformPosition(target.history[0]);\n          _this4.ctx.moveTo(startPos.x, startPos.y);\n          for (var i = 1; i < target.history.length; i++) {\n            var histPos = _this4.transformPosition(target.history[i]);\n            _this4.ctx.lineTo(histPos.x, histPos.y);\n          }\n          _this4.ctx.strokeStyle = _this4.colorMap.target;\n          _this4.ctx.lineWidth = 1.5;\n          _this4.ctx.stroke();\n        }\n      });\n    },\n    // 单独绘制视野和通信范围\n    drawRanges: function drawRanges() {\n      var _this5 = this;\n      // 确保hunters和targets是数组\n      var huntersArray = Array.isArray(this.hunters) ? this.hunters : [];\n      var targetsArray = Array.isArray(this.targets) ? this.targets : [];\n\n      // 绘制猎手视野和通信范围\n      huntersArray.forEach(function (hunter) {\n        if (!hunter || !Array.isArray(hunter.position)) return;\n        var pos = _this5.transformPosition(hunter.position);\n\n        // 绘制视野范围\n        if (_this5.showVisionRange) {\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, hunter.vision_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = _this5.colorMap.vision;\n          _this5.ctx.fill();\n        }\n\n        // 绘制通信范围\n        if (_this5.showCommunicationRange) {\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, hunter.communication_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = _this5.colorMap.communication;\n          _this5.ctx.fill();\n        }\n\n        // 绘制捕获范围\n        _this5.ctx.beginPath();\n        _this5.ctx.arc(pos.x, pos.y, 10 * _this5.scale, 0, Math.PI * 2); // 捕获范围固定为10\n        _this5.ctx.fillStyle = _this5.colorMap.captureRange;\n        _this5.ctx.fill();\n      });\n\n      // 绘制目标视野范围\n      targetsArray.forEach(function (target) {\n        if (!target || !Array.isArray(target.position)) return;\n        if (_this5.showVisionRange) {\n          var pos = _this5.transformPosition(target.position);\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, target.vision_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = 'rgba(244, 67, 54, 0.1)'; // 半透明红色\n          _this5.ctx.fill();\n        }\n      });\n    },\n    // 绘制智能体\n    drawAgent: function drawAgent(agent, type) {\n      var pos = this.transformPosition(agent.position);\n\n      // 目标的浮动动画\n      var offsetY = 0;\n      if (type === 'target') {\n        offsetY = Math.sin(this.floatOffset) * 3; // 浮动效果\n        this.drawCaptureRadius(pos, offsetY);\n      }\n\n      // 绘制智能体\n      this.ctx.beginPath();\n      var radius = type === 'hunter' ? 6 : 8; // 稍微增大智能体尺寸\n      this.ctx.arc(pos.x, pos.y + offsetY, radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = this.colorMap[type];\n      this.ctx.fill();\n\n      // 添加发光效果\n      this.ctx.shadowColor = type === 'hunter' ? 'rgba(63, 81, 181, 0.5)' : 'rgba(244, 67, 54, 0.5)';\n      this.ctx.shadowBlur = 10;\n      this.ctx.stroke();\n      this.ctx.shadowBlur = 0; // 重置阴影效果\n\n      // 绘制ID标签（可选，使UI更干净）\n      if (this.showLabels) {\n        // 使用配置选项\n        this.ctx.font = '10px Arial';\n        this.ctx.fillStyle = '#000';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(agent.id.toString(), pos.x, pos.y + offsetY + (type === 'hunter' ? 15 : 20));\n      }\n    },\n    // 新增方法：绘制目标捕获半径\n    drawCaptureRadius: function drawCaptureRadius(pos, offsetY) {\n      var pulseScale = 1 + this.pulseState * 0.15; // 脉冲效果，范围是1.0到1.15\n\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y + offsetY, 30 * pulseScale, 0, Math.PI * 2);\n      this.ctx.strokeStyle = 'rgba(76, 175, 80, 0.6)';\n      this.ctx.setLineDash([5, 3]); // 虚线效果\n      this.ctx.lineWidth = 1.5;\n      this.ctx.stroke();\n      this.ctx.setLineDash([]); // 重置线型\n    },\n    // 转换坐标\n    transformPosition: function transformPosition(position) {\n      // 将模拟坐标转换为画布坐标\n      return {\n        x: position[0] * this.scale,\n        y: position[1] * this.scale\n      };\n    },\n    // 清除特定区域\n    clearAgentArea: function clearAgentArea(position) {\n      var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n      var pos = this.transformPosition(position);\n      this.ctx.clearRect(pos.x - radius, pos.y - radius, radius * 2, radius * 2);\n    }\n  },\n  watch: {\n    hunters: {\n      handler: function handler() {\n        var _this6 = this;\n        // 使用防抖处理，避免频繁重绘\n        if (this.renderTimer) {\n          clearTimeout(this.renderTimer);\n        }\n        this.renderTimer = setTimeout(function () {\n          _this6.drawOptimizedSimulation();\n        }, 50);\n      },\n      deep: true\n    },\n    targets: {\n      handler: function handler() {\n        var _this7 = this;\n        // 使用防抖处理，避免频繁重绘\n        if (this.renderTimer) {\n          clearTimeout(this.renderTimer);\n        }\n        this.renderTimer = setTimeout(function () {\n          _this7.drawOptimizedSimulation();\n        }, 50);\n      },\n      deep: true\n    },\n    // 添加对obstacles的监听，添加防御性检查\n    obstacles: {\n      handler: function handler(newObstacles) {\n        console.log('obstacles属性变更:', newObstacles);\n        if (Array.isArray(newObstacles)) {\n          this.localObstacles = _toConsumableArray(newObstacles);\n          console.log(\"localObstacles\\u5DF2\\u66F4\\u65B0\\uFF0C\\u957F\\u5EA6: \".concat(this.localObstacles.length));\n          this.drawSimulation(true);\n        } else {\n          console.warn('收到非数组格式的obstacles:', newObstacles);\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    isRunning: function isRunning(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    isCaptured: function isCaptured(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showTrails: function showTrails(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showVisionRange: function showVisionRange(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showCommunicationRange: function showCommunicationRange(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    environmentSize: function environmentSize() {\n      this.scale = this.canvasSize / this.environmentSize;\n      this.drawSimulation(true); // 强制完全重绘\n    }\n  }\n};","map":{"version":3,"names":["name","props","hunters","type","Array","required","targets","environmentSize","Number","isRunning","Boolean","isCaptured","escaped","showTrails","showVisionRange","showCommunicationRange","obstacles","default","data","canvasSize","canvas","ctx","scale","colorMap","hunter","target","vision","communication","trail","captureRange","captured","obstacle","previousPositions","localObstacles","isArray","_toConsumableArray","showObstacles","renderTimer","lastRenderTime","targetFPS","renderCount","animationFrameId","animationFrames","pulseDirection","pulseState","floatOffset","showLabels","previousIsRunning","previousIsCaptured","needsRender","lastRenderState","isEscaped","_huntersCache","_targetsCache","mounted","initCanvas","drawSimulation","window","addEventListener","handleResize","startRenderLoop","beforeDestroy","stopRenderLoop","removeEventListener","clearTimeout","methods","ensureHuntersArray","result","JSON","parse","e","console","error","ensureTargetsArray","$refs","getContext","updatePreviousPositions","_this","setTimeout","performance","now","requestAnimationFrame","renderLoop","cancelAnimationFrame","timestamp","_this2","stateChanged","elapsed","frameTime","updateAnimationState","drawOptimizedSimulation","hasPositionsChanged","length","threshold","i","prevHunter","Math","abs","position","prevTarget","map","id","clearRect","drawBackground","strokeStyle","lineWidth","strokeRect","drawObstacles","fillStyle","fillRect","drawTrails","drawRanges","huntersArray","targetsArray","drawAgent","log","shouldShow","obstaclesToRender","concat","$parent","simulation","warn","propsObstacles","stringify","pos","transformPosition","_typeof","x","y","radius","isNaN","beginPath","arc","PI","fill","stroke","font","textAlign","textBaseline","fillText","gridSize","width","height","moveTo","lineTo","_this3","forceFullRedraw","arguments","undefined","forEach","_this4","history","startPos","histPos","_this5","vision_range","communication_range","agent","offsetY","sin","drawCaptureRadius","shadowColor","shadowBlur","toString","pulseScale","setLineDash","clearAgentArea","watch","handler","_this6","deep","_this7","newObstacles","immediate","newVal","oldVal"],"sources":["src/components/SimulationCanvas.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-canvas\">\r\n    <canvas \r\n      ref=\"canvas\" \r\n      :width=\"canvasSize\" \r\n      :height=\"canvasSize\" \r\n      class=\"simulation-canvas__area\"\r\n    ></canvas>\r\n    \r\n    <!-- 捕获成功提示覆盖层 -->\r\n    <div \r\n      v-if=\"isCaptured\" \r\n      class=\"capture-overlay\"\r\n    >\r\n      <div class=\"capture-message\">\r\n        <v-icon large color=\"success\">mdi-check-circle</v-icon>\r\n        <span>目标已捕获!</span>\r\n      </div>\r\n    </div>\r\n    <div \r\n      v-if=\"escaped\" \r\n      class=\"escape-overlay\"\r\n    >\r\n      <div class=\"escape-message\">\r\n        <v-icon large color=\"warning\">mdi-run-fast</v-icon>\r\n        <span>目标成功逃脱!</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n  name: 'SimulationCanvas',\r\n  props: {\r\n    hunters: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    targets: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    environmentSize: {\r\n      type: Number,\r\n      default: 500\r\n    },\r\n    isRunning: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isCaptured: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    escaped: {  \r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showTrails: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    showVisionRange: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showCommunicationRange: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    obstacles: {\r\n      type: Array,\r\n      default: () => [] // 确保默认为空数组\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      canvasSize: 600,\r\n      canvas: null,\r\n      ctx: null,\r\n      scale: 1,\r\n      colorMap: {\r\n        hunter: '#3949AB', // 更深的蓝色\r\n        target: '#e53935', // 更鲜艳的红色\r\n        vision: 'rgba(57, 73, 171, 0.1)', // 半透明蓝色\r\n        communication: 'rgba(57, 73, 171, 0.05)', // 更透明的蓝色\r\n        trail: 'rgba(57, 73, 171, 0.4)', // 半透明蓝色\r\n        captureRange: 'rgba(76, 175, 80, 0.4)', // 更明显的绿色\r\n        captured: 'rgba(244, 67, 54, 0.25)', // 半透明红色\r\n        obstacle: 'rgba(100, 100, 110, 0.8)' // 障碍物颜色\r\n      },\r\n      // 新增：跟踪之前的位置，用于优化渲染\r\n      previousPositions: {\r\n        hunters: [],\r\n        targets: []\r\n      },\r\n      // 本地obstacles引用，防止未定义错误\r\n      localObstacles: Array.isArray(this.obstacles) ? [...this.obstacles] : [],\r\n      showObstacles: true,  // 默认显示障碍物\r\n      // 防抖渲染计时器\r\n      renderTimer: null,\r\n      // 帧率控制\r\n      lastRenderTime: 0,\r\n      targetFPS: 30,\r\n      // 渲染计数，用于降低非必要渲染的频率\r\n      renderCount: 0,\r\n      // 动画相关\r\n      animationFrameId: null,\r\n      animationFrames: 0,\r\n      pulseDirection: 1,\r\n      pulseState: 0,\r\n      floatOffset: 0,\r\n      // 是否显示标签\r\n      showLabels: false,\r\n      // 记录前一次运行状态\r\n      previousIsRunning: false,\r\n      previousIsCaptured: false,\r\n      needsRender: false,\r\n      lastRenderState: {\r\n        isCaptured: false,\r\n        isEscaped: false\r\n      },\r\n      // 使用非响应式引用存储数据的本地副本\r\n      _huntersCache: null,\r\n      _targetsCache: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initCanvas();\r\n    // 初始化本地obstacles\r\n    this.localObstacles = Array.isArray(this.obstacles) ? [...this.obstacles] : [];\r\n    \r\n    // 执行一次初始绘制\r\n    this.drawSimulation(true);\r\n    \r\n    // 添加窗口大小变化监听\r\n    window.addEventListener('resize', this.handleResize);\r\n    \r\n    // 使用requestAnimationFrame实现高效渲染循环\r\n    this.startRenderLoop();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // 彻底清理资源\r\n    this.stopRenderLoop();\r\n    window.removeEventListener('resize', this.handleResize);\r\n    \r\n    if (this.renderTimer) {\r\n      clearTimeout(this.renderTimer);\r\n      this.renderTimer = null;\r\n    }\r\n    \r\n    // 释放缓存\r\n    this._huntersCache = null;\r\n    this._targetsCache = null;\r\n  },\r\n  methods: {\r\n    // 确保hunters数据是数组\r\n    ensureHuntersArray() {\r\n      // 如果模拟已完成且有缓存，使用缓存\r\n      if ((this.isCaptured || this.escaped) && this._huntersCache) {\r\n        return this._huntersCache;\r\n      }\r\n      \r\n      // 正常处理逻辑\r\n      let result = [];\r\n      if (typeof this.hunters === 'string') {\r\n        try {\r\n          result = JSON.parse(this.hunters);\r\n        } catch (e) {\r\n          console.error('无法解析hunters数据:', e);\r\n        }\r\n      } else if (Array.isArray(this.hunters)) {\r\n        result = [...this.hunters]; // 创建浅拷贝以避免直接操作原始数据\r\n      }\r\n      \r\n      // 如果模拟已完成，缓存结果\r\n      if (this.isCaptured || this.escaped) {\r\n        this._huntersCache = result;\r\n      }\r\n      \r\n      return result;\r\n    },\r\n    \r\n    // 确保targets数据是数组\r\n    ensureTargetsArray() {\r\n      // 如果模拟已完成且有缓存，使用缓存\r\n      if ((this.isCaptured || this.escaped) && this._targetsCache) {\r\n        return this._targetsCache;\r\n      }\r\n      \r\n      // 正常处理逻辑\r\n      let result = [];\r\n      if (typeof this.targets === 'string') {\r\n        try {\r\n          result = JSON.parse(this.targets);\r\n        } catch (e) {\r\n          console.error('无法解析targets数据:', e);\r\n        }\r\n      } else if (Array.isArray(this.targets)) {\r\n        result = [...this.targets]; // 创建浅拷贝以避免直接操作原始数据\r\n      }\r\n      \r\n      // 如果模拟已完成，缓存结果\r\n      if (this.isCaptured || this.escaped) {\r\n        this._targetsCache = result;\r\n      }\r\n      \r\n      return result;\r\n    },\r\n    // 初始化画布\r\n    initCanvas() {\r\n      this.canvas = this.$refs.canvas;\r\n      this.ctx = this.canvas.getContext('2d');\r\n      this.scale = this.canvasSize / this.environmentSize;\r\n      \r\n      // 初始化previousPositions\r\n      this.updatePreviousPositions();\r\n    },\r\n    \r\n    // 处理窗口大小变化\r\n    handleResize() {\r\n      // 防抖处理\r\n      if (this.renderTimer) {\r\n        clearTimeout(this.renderTimer);\r\n      }\r\n      \r\n      this.renderTimer = setTimeout(() => {\r\n        // 重新计算画布大小（可选，如果需要响应式调整画布大小）\r\n        // this.canvasSize = Math.min(window.innerWidth * 0.7, 600);\r\n        this.scale = this.canvasSize / this.environmentSize;\r\n        this.drawSimulation(true); // 强制完全重绘\r\n      }, 200);\r\n    },\r\n    \r\n    // 启动渲染循环\r\n    startRenderLoop() {\r\n      if (!this.animationFrameId) {\r\n        this.lastRenderTime = performance.now();\r\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\r\n      }\r\n    },\r\n    \r\n    // 停止渲染循环\r\n    stopRenderLoop() {\r\n      if (this.animationFrameId) {\r\n        cancelAnimationFrame(this.animationFrameId);\r\n        this.animationFrameId = null;\r\n      }\r\n    },\r\n    \r\n    // 渲染循环\r\n    renderLoop(timestamp) {\r\n      try {\r\n        // 判断模拟状态是否变化\r\n        const stateChanged = this.isCaptured !== this.lastRenderState.isCaptured || \r\n                            this.escaped !== this.lastRenderState.isEscaped;\r\n        \r\n        // 如果模拟已结束且状态未变化，减少渲染频率\r\n        if ((this.isCaptured || this.escaped) && !stateChanged && !this.needsRender) {\r\n          // 模拟已结束，使用低频率更新\r\n          setTimeout(() => {\r\n            this.animationFrameId = requestAnimationFrame(this.renderLoop);\r\n          }, 1000); // 降低为每秒一帧\r\n          return;\r\n        }\r\n        \r\n        // 更新最后渲染状态\r\n        if (stateChanged) {\r\n          this.lastRenderState.isCaptured = this.isCaptured;\r\n          this.lastRenderState.isEscaped = this.escaped;\r\n          this.needsRender = true;\r\n        }\r\n        \r\n        // 正常渲染逻辑\r\n        const elapsed = timestamp - this.lastRenderTime;\r\n        const frameTime = 1000 / this.targetFPS;\r\n        \r\n        if (elapsed >= frameTime || this.needsRender) {\r\n          this.lastRenderTime = timestamp;\r\n          \r\n          // 更新动画状态\r\n          this.updateAnimationState();\r\n          \r\n          // 仅在需要时渲染\r\n          if (this.needsRender || this.isRunning || this.animationFrames % 15 === 0) {\r\n            this.drawOptimizedSimulation();\r\n            this.needsRender = false;\r\n          }\r\n        }\r\n        \r\n        // 设置下一帧\r\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\r\n      } catch (error) {\r\n        console.error('渲染循环错误:', error);\r\n        // 错误恢复：停止当前循环，稍后重试\r\n        if (this.animationFrameId) {\r\n          cancelAnimationFrame(this.animationFrameId);\r\n          this.animationFrameId = null;\r\n        }\r\n        \r\n        // 延迟后尝试重启循环\r\n        setTimeout(() => {\r\n          this.startRenderLoop();\r\n        }, 2000);\r\n      }\r\n    },\r\n\r\n    updateAnimationState() {\r\n      this.animationFrames++;\r\n      if (this.animationFrames % 3 === 0) {\r\n        // 更新脉冲效果\r\n        this.pulseState += 0.05 * this.pulseDirection;\r\n        if (this.pulseState >= 1) {\r\n          this.pulseState = 1;\r\n          this.pulseDirection = -1;\r\n        } else if (this.pulseState <= 0) {\r\n          this.pulseState = 0;\r\n          this.pulseDirection = 1;\r\n        }\r\n        \r\n        // 更新浮动效果\r\n        this.floatOffset += 0.1;\r\n      }\r\n    },\r\n    \r\n    // 检查位置是否有变化\r\n    hasPositionsChanged() {\r\n      // 优化：快速检查数组长度变化\r\n      if (this.hunters.length !== this.previousPositions.hunters.length ||\r\n          this.targets.length !== this.previousPositions.targets.length) {\r\n        return true;\r\n      }\r\n      \r\n      // 检查运行状态变化\r\n      if (this.isRunning !== this.previousIsRunning ||\r\n          this.isCaptured !== this.previousIsCaptured) {\r\n        this.previousIsRunning = this.isRunning;\r\n        this.previousIsCaptured = this.isCaptured;\r\n        return true;\r\n      }\r\n      \r\n      // 渲染计数，每5帧强制完全重绘一次（避免累积误差）\r\n      this.renderCount++;\r\n      if (this.renderCount >= 5) {\r\n        this.renderCount = 0;\r\n        return true;\r\n      }\r\n      \r\n      // 只有在运行中或首次渲染时，才进行位置变化检查\r\n      if (!this.isRunning && this.previousPositions.hunters.length > 0) {\r\n        return false;\r\n      }\r\n      \r\n      // 智能体位置变化检测\r\n      const threshold = 0.5; // 位置变化阈值\r\n      \r\n      // 检查猎手位置变化\r\n      for (let i = 0; i < this.hunters.length; i++) {\r\n        const hunter = this.hunters[i];\r\n        const prevHunter = this.previousPositions.hunters[i];\r\n        \r\n        if (!prevHunter) return true;\r\n        \r\n        if (Math.abs(hunter.position[0] - prevHunter.position[0]) > threshold ||\r\n            Math.abs(hunter.position[1] - prevHunter.position[1]) > threshold) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      // 检查目标位置变化\r\n      for (let i = 0; i < this.targets.length; i++) {\r\n        const target = this.targets[i];\r\n        const prevTarget = this.previousPositions.targets[i];\r\n        \r\n        if (!prevTarget) return true;\r\n        \r\n        if (Math.abs(target.position[0] - prevTarget.position[0]) > threshold ||\r\n            Math.abs(target.position[1] - prevTarget.position[1]) > threshold) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    \r\n    // 更新之前的位置\r\n    updatePreviousPositions() {\r\n      // 深拷贝位置数据\r\n      this.previousPositions.hunters = this.hunters.map(hunter => ({\r\n        id: hunter.id,\r\n        position: [...hunter.position]\r\n      }));\r\n      \r\n      this.previousPositions.targets = this.targets.map(target => ({\r\n        id: target.id,\r\n        position: [...target.position]\r\n      }));\r\n    },\r\n    \r\n    // 优化的绘制方法\r\n    drawOptimizedSimulation() {\r\n      if (!this.ctx) return;\r\n      \r\n      try {\r\n        // 清除画布\r\n        this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\r\n        this.drawBackground();\r\n        \r\n        // 绘制环境边界\r\n        this.ctx.strokeStyle = '#ccc';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\r\n        \r\n        // 绘制障碍物 - 只在必要时绘制\r\n        if (this.obstacles && Array.isArray(this.obstacles) && this.obstacles.length > 0) {\r\n          this.drawObstacles();\r\n        }\r\n        \r\n        // 绘制捕获或逃脱状态\r\n        if (this.isCaptured) {\r\n          this.ctx.fillStyle = this.colorMap.captured;\r\n          this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n        } else if (this.escaped) {\r\n          this.ctx.fillStyle = 'rgba(255, 248, 225, 0.5)';\r\n          this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n        }\r\n        \r\n        // 绘制轨迹\r\n        if (this.showTrails) {\r\n          this.drawTrails();\r\n        }\r\n        \r\n        // 绘制视野和通信范围\r\n        if (this.showVisionRange || this.showCommunicationRange) {\r\n          this.drawRanges();\r\n        }\r\n        \r\n        // 获取处理后的数据\r\n        const huntersArray = this.ensureHuntersArray();\r\n        const targetsArray = this.ensureTargetsArray();\r\n        \r\n        // 使用安全的方式绘制猎手\r\n        if (Array.isArray(huntersArray)) {\r\n          for (let i = 0; i < huntersArray.length; i++) {\r\n            const hunter = huntersArray[i];\r\n            if (hunter && Array.isArray(hunter.position)) {\r\n              this.drawAgent(hunter, 'hunter');\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 使用安全的方式绘制目标\r\n        if (Array.isArray(targetsArray)) {\r\n          for (let i = 0; i < targetsArray.length; i++) {\r\n            const target = targetsArray[i];\r\n            if (target && Array.isArray(target.position)) {\r\n              this.drawAgent(target, 'target');\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('绘制模拟时出错:', error);\r\n        // 不中断渲染循环\r\n      }\r\n    },\r\n    \r\n    // 绘制障碍物\r\n    drawObstacles() {\r\n      // 详细日志输出当前状态\r\n      console.log('drawObstacles调用', {\r\n        '显示开关': this.showObstacles !== false,\r\n        '本地障碍物': this.localObstacles,\r\n        '属性障碍物': this.obstacles\r\n      });\r\n\r\n      // 检查上下文是否已初始化\r\n      if (!this.ctx) {\r\n        console.error('画布上下文未初始化，无法绘制障碍物');\r\n        return;\r\n      }\r\n\r\n      // 确保显示开关打开\r\n      const shouldShow = this.showObstacles !== false;\r\n      if (!shouldShow) {\r\n        console.log('障碍物显示开关关闭，跳过渲染');\r\n        return;\r\n      }\r\n\r\n      // 选择使用的障碍物数据源\r\n      let obstaclesToRender = null;\r\n      \r\n      // 首先检查本地障碍物数组\r\n      if (Array.isArray(this.localObstacles) && this.localObstacles.length > 0) {\r\n        obstaclesToRender = this.localObstacles;\r\n        console.log(`使用本地障碍物数据源，数量: ${obstaclesToRender.length}`);\r\n      } \r\n      // 然后检查props障碍物数组\r\n      else if (Array.isArray(this.obstacles) && this.obstacles.length > 0) {\r\n        obstaclesToRender = this.obstacles;\r\n        console.log(`使用props障碍物数据源，数量: ${obstaclesToRender.length}`);\r\n        // 同步更新本地数据\r\n        this.localObstacles = [...this.obstacles];\r\n      } \r\n      // 如果两者都不可用，尝试从simulation中获取\r\n      else if (this.$parent && \r\n              this.$parent.simulation && \r\n              Array.isArray(this.$parent.simulation.obstacles) && \r\n              this.$parent.simulation.obstacles.length > 0) {\r\n        obstaclesToRender = this.$parent.simulation.obstacles;\r\n        console.log(`使用父组件simulation数据源，数量: ${obstaclesToRender.length}`);\r\n        // 同步更新本地数据\r\n        this.localObstacles = [...this.$parent.simulation.obstacles];\r\n      }\r\n      else {\r\n        console.warn('没有可用的障碍物数据源', {\r\n          localObstacles: this.localObstacles,\r\n          propsObstacles: this.obstacles\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(`开始绘制${obstaclesToRender.length}个障碍物:`, JSON.stringify(obstaclesToRender));\r\n\r\n      // 遍历绘制每个障碍物\r\n      for (let i = 0; i < obstaclesToRender.length; i++) {\r\n        const obstacle = obstaclesToRender[i];\r\n        \r\n        // 检查障碍物数据完整性\r\n        if (!obstacle) {\r\n          console.warn(`障碍物[${i}]数据为空`);\r\n          continue;\r\n        }\r\n\r\n        // 确保position数据存在并格式正确\r\n        let position = obstacle.position;\r\n        if (!position) {\r\n          console.warn(`障碍物[${i}]缺少position属性:`, obstacle);\r\n          continue;\r\n        }\r\n\r\n        // 处理position可能的不同格式\r\n        let pos;\r\n        try {\r\n          if (Array.isArray(position)) {\r\n            pos = this.transformPosition(position);\r\n          } else if (typeof position === 'object') {\r\n            // 对象格式 {x, y}\r\n            if ('x' in position && 'y' in position) {\r\n              pos = {\r\n                x: position.x * this.scale,\r\n                y: position.y * this.scale\r\n              };\r\n            } else {\r\n              console.warn(`障碍物[${i}]位置格式不支持:`, position);\r\n              continue;\r\n            }\r\n          } else {\r\n            console.warn(`障碍物[${i}]位置类型错误:`, typeof position);\r\n            continue;\r\n          }\r\n        } catch (e) {\r\n          console.error(`处理障碍物[${i}]位置时出错:`, e);\r\n          continue;\r\n        }\r\n\r\n        // 获取并检查半径\r\n        const radius = obstacle.radius * this.scale;\r\n        if (!radius || isNaN(radius) || radius <= 0) {\r\n          console.warn(`障碍物[${i}]半径无效:`, obstacle.radius);\r\n          continue;\r\n        }\r\n\r\n        // 绘制障碍物\r\n        try {\r\n          // 设置样式\r\n          this.ctx.fillStyle = 'rgba(100, 100, 110, 0.8)';\r\n          this.ctx.strokeStyle = 'rgba(80, 80, 90, 0.9)';\r\n          this.ctx.lineWidth = 2;\r\n          \r\n          // 绘制圆形\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\r\n          this.ctx.fill();\r\n          this.ctx.stroke();\r\n          \r\n          // 添加编号标签（便于调试）\r\n          this.ctx.fillStyle = 'white';\r\n          this.ctx.font = '12px Arial';\r\n          this.ctx.textAlign = 'center';\r\n          this.ctx.textBaseline = 'middle';\r\n          this.ctx.fillText(`${i}`, pos.x, pos.y);\r\n          \r\n          console.log(`成功绘制障碍物[${i}]: 位置(${pos.x}, ${pos.y}), 半径${radius}`);\r\n        } catch (e) {\r\n          console.error(`绘制障碍物[${i}]时出错:`, e);\r\n        }\r\n      }\r\n    },\r\n\r\n    drawBackground() {\r\n      const gridSize = 25 * this.scale;\r\n      const width = this.canvasSize;\r\n      const height = this.canvasSize;\r\n      \r\n      // 填充背景色\r\n      this.ctx.fillStyle = '#f5f7fa';\r\n      this.ctx.fillRect(0, 0, width, height);\r\n      \r\n      this.ctx.strokeStyle = 'rgba(200, 200, 220, 0.3)';\r\n      this.ctx.lineWidth = 1;\r\n      \r\n      // 绘制网格线\r\n      for (let x = 0; x <= width; x += gridSize) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, 0);\r\n        this.ctx.lineTo(x, height);\r\n        this.ctx.stroke();\r\n      }\r\n      \r\n      for (let y = 0; y <= height; y += gridSize) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, y);\r\n        this.ctx.lineTo(width, y);\r\n        this.ctx.stroke();\r\n      }\r\n      \r\n      // 添加坐标轴\r\n      this.ctx.strokeStyle = 'rgba(150, 150, 180, 0.4)';\r\n      this.ctx.lineWidth = 2;\r\n      \r\n      // x轴\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, height/2);\r\n      this.ctx.lineTo(width, height/2);\r\n      this.ctx.stroke();\r\n      \r\n      // y轴\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(width/2, 0);\r\n      this.ctx.lineTo(width/2, height);\r\n      this.ctx.stroke();\r\n    },\r\n    \r\n    // 完整重绘方法\r\n    drawSimulation(forceFullRedraw = false) {\r\n      if (!this.ctx) return;\r\n      \r\n      // 如果不需要强制重绘，使用优化版本\r\n      if (!forceFullRedraw && this.previousPositions.hunters.length > 0) {\r\n        return this.drawOptimizedSimulation();\r\n      }\r\n      \r\n      // 清除画布\r\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\r\n\r\n      this.drawBackground();\r\n      \r\n      // 绘制环境边界\r\n      this.ctx.strokeStyle = '#ccc';\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\r\n      \r\n      // 绘制障碍物 - 添加防御性检查\r\n      if (this.obstacles && Array.isArray(this.obstacles) && this.obstacles.length > 0) {\r\n        this.drawObstacles();\r\n      }\r\n      \r\n      // 绘制捕获状态\r\n      if (this.isCaptured) {\r\n        this.ctx.fillStyle = this.colorMap.captured;\r\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n      }\r\n      \r\n      // 绘制轨迹（如果启用）\r\n      if (this.showTrails) {\r\n        this.drawTrails();\r\n      }\r\n      \r\n      // 绘制视野和通信范围（如果启用）\r\n      if (this.showVisionRange || this.showCommunicationRange) {\r\n        this.drawRanges();\r\n      }\r\n      \r\n      // 绘制猎手\r\n      this.hunters.forEach(hunter => {\r\n        this.drawAgent(hunter, 'hunter');\r\n      });\r\n      \r\n      // 绘制目标\r\n      this.targets.forEach(target => {\r\n        this.drawAgent(target, 'target');\r\n      });\r\n      \r\n      // 更新之前的位置\r\n      this.updatePreviousPositions();\r\n      this.previousIsRunning = this.isRunning;\r\n      this.previousIsCaptured = this.isCaptured;\r\n    },\r\n    \r\n    // 单独绘制轨迹\r\n    drawTrails() {\r\n      // 确保hunters和targets是数组\r\n      const huntersArray = Array.isArray(this.hunters) ? this.hunters : [];\r\n      const targetsArray = Array.isArray(this.targets) ? this.targets : [];\r\n      \r\n      // 绘制猎手轨迹\r\n      huntersArray.forEach(hunter => {\r\n        if (hunter && hunter.history && Array.isArray(hunter.history) && hunter.history.length > 1) {\r\n          this.ctx.beginPath();\r\n          const startPos = this.transformPosition(hunter.history[0]);\r\n          this.ctx.moveTo(startPos.x, startPos.y);\r\n          \r\n          for (let i = 1; i < hunter.history.length; i++) {\r\n            const histPos = this.transformPosition(hunter.history[i]);\r\n            this.ctx.lineTo(histPos.x, histPos.y);\r\n          }\r\n          \r\n          this.ctx.strokeStyle = this.colorMap.trail;\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n        }\r\n      });\r\n      \r\n      // 绘制目标轨迹\r\n      targetsArray.forEach(target => {\r\n        if (target && target.history && Array.isArray(target.history) && target.history.length > 1) {\r\n          this.ctx.beginPath();\r\n          const startPos = this.transformPosition(target.history[0]);\r\n          this.ctx.moveTo(startPos.x, startPos.y);\r\n          \r\n          for (let i = 1; i < target.history.length; i++) {\r\n            const histPos = this.transformPosition(target.history[i]);\r\n            this.ctx.lineTo(histPos.x, histPos.y);\r\n          }\r\n          \r\n          this.ctx.strokeStyle = this.colorMap.target;\r\n          this.ctx.lineWidth = 1.5;\r\n          this.ctx.stroke();\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 单独绘制视野和通信范围\r\n    drawRanges() {\r\n      // 确保hunters和targets是数组\r\n      const huntersArray = Array.isArray(this.hunters) ? this.hunters : [];\r\n      const targetsArray = Array.isArray(this.targets) ? this.targets : [];\r\n      \r\n      // 绘制猎手视野和通信范围\r\n      huntersArray.forEach(hunter => {\r\n        if (!hunter || !Array.isArray(hunter.position)) return;\r\n        \r\n        const pos = this.transformPosition(hunter.position);\r\n        \r\n        // 绘制视野范围\r\n        if (this.showVisionRange) {\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, hunter.vision_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = this.colorMap.vision;\r\n          this.ctx.fill();\r\n        }\r\n        \r\n        // 绘制通信范围\r\n        if (this.showCommunicationRange) {\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, hunter.communication_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = this.colorMap.communication;\r\n          this.ctx.fill();\r\n        }\r\n        \r\n        // 绘制捕获范围\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(pos.x, pos.y, 10 * this.scale, 0, Math.PI * 2); // 捕获范围固定为10\r\n        this.ctx.fillStyle = this.colorMap.captureRange;\r\n        this.ctx.fill();\r\n      });\r\n      \r\n      // 绘制目标视野范围\r\n      targetsArray.forEach(target => {\r\n        if (!target || !Array.isArray(target.position)) return;\r\n        \r\n        if (this.showVisionRange) {\r\n          const pos = this.transformPosition(target.position);\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, target.vision_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = 'rgba(244, 67, 54, 0.1)'; // 半透明红色\r\n          this.ctx.fill();\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 绘制智能体\r\n    drawAgent(agent, type) {\r\n      const pos = this.transformPosition(agent.position);\r\n      \r\n      // 目标的浮动动画\r\n      let offsetY = 0;\r\n      if (type === 'target') {\r\n        offsetY = Math.sin(this.floatOffset) * 3; // 浮动效果\r\n        this.drawCaptureRadius(pos, offsetY);\r\n      }\r\n      \r\n      // 绘制智能体\r\n      this.ctx.beginPath();\r\n      const radius = type === 'hunter' ? 6 : 8; // 稍微增大智能体尺寸\r\n      this.ctx.arc(pos.x, pos.y + offsetY, radius, 0, Math.PI * 2);\r\n      this.ctx.fillStyle = this.colorMap[type];\r\n      this.ctx.fill();\r\n      \r\n      // 添加发光效果\r\n      this.ctx.shadowColor = type === 'hunter' ? 'rgba(63, 81, 181, 0.5)' : 'rgba(244, 67, 54, 0.5)';\r\n      this.ctx.shadowBlur = 10;\r\n      this.ctx.stroke();\r\n      this.ctx.shadowBlur = 0; // 重置阴影效果\r\n      \r\n      // 绘制ID标签（可选，使UI更干净）\r\n      if (this.showLabels) { // 使用配置选项\r\n        this.ctx.font = '10px Arial';\r\n        this.ctx.fillStyle = '#000';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText(agent.id.toString(), pos.x, pos.y + offsetY + (type === 'hunter' ? 15 : 20));\r\n      }\r\n    },\r\n    \r\n    // 新增方法：绘制目标捕获半径\r\n    drawCaptureRadius(pos, offsetY) {\r\n      const pulseScale = 1 + (this.pulseState * 0.15); // 脉冲效果，范围是1.0到1.15\r\n      \r\n      this.ctx.beginPath();\r\n      this.ctx.arc(pos.x, pos.y + offsetY, 30 * pulseScale, 0, Math.PI * 2);\r\n      this.ctx.strokeStyle = 'rgba(76, 175, 80, 0.6)';\r\n      this.ctx.setLineDash([5, 3]); // 虚线效果\r\n      this.ctx.lineWidth = 1.5;\r\n      this.ctx.stroke();\r\n      this.ctx.setLineDash([]); // 重置线型\r\n    },\r\n    \r\n    // 转换坐标\r\n    transformPosition(position) {\r\n      // 将模拟坐标转换为画布坐标\r\n      return {\r\n        x: position[0] * this.scale,\r\n        y: position[1] * this.scale\r\n      }\r\n    },\r\n    \r\n    // 清除特定区域\r\n    clearAgentArea(position, radius = 20) {\r\n      const pos = this.transformPosition(position);\r\n      this.ctx.clearRect(pos.x - radius, pos.y - radius, radius * 2, radius * 2);\r\n    }\r\n  },\r\n  watch: {\r\n    hunters: {\r\n      handler() {\r\n        // 使用防抖处理，避免频繁重绘\r\n        if (this.renderTimer) {\r\n          clearTimeout(this.renderTimer);\r\n        }\r\n        this.renderTimer = setTimeout(() => {\r\n          this.drawOptimizedSimulation();\r\n        }, 50);\r\n      },\r\n      deep: true\r\n    },\r\n    targets: {\r\n      handler() {\r\n        // 使用防抖处理，避免频繁重绘\r\n        if (this.renderTimer) {\r\n          clearTimeout(this.renderTimer);\r\n        }\r\n        this.renderTimer = setTimeout(() => {\r\n          this.drawOptimizedSimulation();\r\n        }, 50);\r\n      },\r\n      deep: true\r\n    },\r\n    // 添加对obstacles的监听，添加防御性检查\r\n    obstacles: {\r\n      handler(newObstacles) {\r\n        console.log('obstacles属性变更:', newObstacles);\r\n        \r\n        if (Array.isArray(newObstacles)) {\r\n          this.localObstacles = [...newObstacles];\r\n          console.log(`localObstacles已更新，长度: ${this.localObstacles.length}`);\r\n          this.drawSimulation(true);\r\n        } else {\r\n          console.warn('收到非数组格式的obstacles:', newObstacles);\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    isRunning(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    isCaptured(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showTrails(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showVisionRange(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showCommunicationRange(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    environmentSize() {\r\n      this.scale = this.canvasSize / this.environmentSize;\r\n      this.drawSimulation(true); // 强制完全重绘\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-canvas {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n  margin: 16px 0;\r\n}\r\n\r\n.simulation-canvas__area {\r\n  border: none;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  background-color: #fcfcff;\r\n}\r\n\r\n.capture-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  border-radius: 8px;\r\n  animation: fadeIn 0.5s ease-in-out;\r\n}\r\n\r\n.capture-message {\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  padding: 16px 24px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: #4caf50;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n@keyframes pulse {\r\n  0% { transform: scale(1); }\r\n  50% { transform: scale(1.05); }\r\n  100% { transform: scale(1); }\r\n}\r\n</style>"],"mappings":";;;;;;;;;;;;;;;;;;;;AAgCA;EACAA,IAAA;EACAC,KAAA;IACAC,OAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;IACAC,OAAA;MACAH,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;IACAE,eAAA;MACAJ,IAAA,EAAAK,MAAA;MACA;IACA;IACAC,SAAA;MACAN,IAAA,EAAAO,OAAA;MACA;IACA;IACAC,UAAA;MACAR,IAAA,EAAAO,OAAA;MACA;IACA;IACAE,OAAA;MACAT,IAAA,EAAAO,OAAA;MACA;IACA;IACAG,UAAA;MACAV,IAAA,EAAAO,OAAA;MACA;IACA;IACAI,eAAA;MACAX,IAAA,EAAAO,OAAA;MACA;IACA;IACAK,sBAAA;MACAZ,IAAA,EAAAO,OAAA;MACA;IACA;IACAM,SAAA;MACAb,IAAA,EAAAC,KAAA;MACA,oBAAAa,SAAA;QAAA;MAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,UAAA;MACAC,MAAA;MACAC,GAAA;MACAC,KAAA;MACAC,QAAA;QACAC,MAAA;QAAA;QACAC,MAAA;QAAA;QACAC,MAAA;QAAA;QACAC,aAAA;QAAA;QACAC,KAAA;QAAA;QACAC,YAAA;QAAA;QACAC,QAAA;QAAA;QACAC,QAAA;MACA;MACA;MACAC,iBAAA;QACA9B,OAAA;QACAI,OAAA;MACA;MACA;MACA2B,cAAA,EAAA7B,KAAA,CAAA8B,OAAA,MAAAlB,SAAA,IAAAmB,kBAAA,MAAAnB,SAAA;MACAoB,aAAA;MAAA;MACA;MACAC,WAAA;MACA;MACAC,cAAA;MACAC,SAAA;MACA;MACAC,WAAA;MACA;MACAC,gBAAA;MACAC,eAAA;MACAC,cAAA;MACAC,UAAA;MACAC,WAAA;MACA;MACAC,UAAA;MACA;MACAC,iBAAA;MACAC,kBAAA;MACAC,WAAA;MACAC,eAAA;QACAvC,UAAA;QACAwC,SAAA;MACA;MACA;MACAC,aAAA;MACAC,aAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,UAAA;IACA;IACA,KAAAtB,cAAA,GAAA7B,KAAA,CAAA8B,OAAA,MAAAlB,SAAA,IAAAmB,kBAAA,MAAAnB,SAAA;;IAEA;IACA,KAAAwC,cAAA;;IAEA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;;IAEA;IACA,KAAAC,eAAA;EACA;EAEAC,aAAA,WAAAA,cAAA;IACA;IACA,KAAAC,cAAA;IACAL,MAAA,CAAAM,mBAAA,gBAAAJ,YAAA;IAEA,SAAAtB,WAAA;MACA2B,YAAA,MAAA3B,WAAA;MACA,KAAAA,WAAA;IACA;;IAEA;IACA,KAAAe,aAAA;IACA,KAAAC,aAAA;EACA;EACAY,OAAA;IACA;IACAC,kBAAA,WAAAA,mBAAA;MACA;MACA,UAAAvD,UAAA,SAAAC,OAAA,UAAAwC,aAAA;QACA,YAAAA,aAAA;MACA;;MAEA;MACA,IAAAe,MAAA;MACA,gBAAAjE,OAAA;QACA;UACAiE,MAAA,GAAAC,IAAA,CAAAC,KAAA,MAAAnE,OAAA;QACA,SAAAoE,CAAA;UACAC,OAAA,CAAAC,KAAA,mBAAAF,CAAA;QACA;MACA,WAAAlE,KAAA,CAAA8B,OAAA,MAAAhC,OAAA;QACAiE,MAAA,GAAAhC,kBAAA,MAAAjC,OAAA;MACA;;MAEA;MACA,SAAAS,UAAA,SAAAC,OAAA;QACA,KAAAwC,aAAA,GAAAe,MAAA;MACA;MAEA,OAAAA,MAAA;IACA;IAEA;IACAM,kBAAA,WAAAA,mBAAA;MACA;MACA,UAAA9D,UAAA,SAAAC,OAAA,UAAAyC,aAAA;QACA,YAAAA,aAAA;MACA;;MAEA;MACA,IAAAc,MAAA;MACA,gBAAA7D,OAAA;QACA;UACA6D,MAAA,GAAAC,IAAA,CAAAC,KAAA,MAAA/D,OAAA;QACA,SAAAgE,CAAA;UACAC,OAAA,CAAAC,KAAA,mBAAAF,CAAA;QACA;MACA,WAAAlE,KAAA,CAAA8B,OAAA,MAAA5B,OAAA;QACA6D,MAAA,GAAAhC,kBAAA,MAAA7B,OAAA;MACA;;MAEA;MACA,SAAAK,UAAA,SAAAC,OAAA;QACA,KAAAyC,aAAA,GAAAc,MAAA;MACA;MAEA,OAAAA,MAAA;IACA;IACA;IACAZ,UAAA,WAAAA,WAAA;MACA,KAAAnC,MAAA,QAAAsD,KAAA,CAAAtD,MAAA;MACA,KAAAC,GAAA,QAAAD,MAAA,CAAAuD,UAAA;MACA,KAAArD,KAAA,QAAAH,UAAA,QAAAZ,eAAA;;MAEA;MACA,KAAAqE,uBAAA;IACA;IAEA;IACAjB,YAAA,WAAAA,aAAA;MAAA,IAAAkB,KAAA;MACA;MACA,SAAAxC,WAAA;QACA2B,YAAA,MAAA3B,WAAA;MACA;MAEA,KAAAA,WAAA,GAAAyC,UAAA;QACA;QACA;QACAD,KAAA,CAAAvD,KAAA,GAAAuD,KAAA,CAAA1D,UAAA,GAAA0D,KAAA,CAAAtE,eAAA;QACAsE,KAAA,CAAArB,cAAA;MACA;IACA;IAEA;IACAI,eAAA,WAAAA,gBAAA;MACA,UAAAnB,gBAAA;QACA,KAAAH,cAAA,GAAAyC,WAAA,CAAAC,GAAA;QACA,KAAAvC,gBAAA,GAAAwC,qBAAA,MAAAC,UAAA;MACA;IACA;IAEA;IACApB,cAAA,WAAAA,eAAA;MACA,SAAArB,gBAAA;QACA0C,oBAAA,MAAA1C,gBAAA;QACA,KAAAA,gBAAA;MACA;IACA;IAEA;IACAyC,UAAA,WAAAA,WAAAE,SAAA;MAAA,IAAAC,MAAA;MACA;QACA;QACA,IAAAC,YAAA,QAAA3E,UAAA,UAAAuC,eAAA,CAAAvC,UAAA,IACA,KAAAC,OAAA,UAAAsC,eAAA,CAAAC,SAAA;;QAEA;QACA,UAAAxC,UAAA,SAAAC,OAAA,MAAA0E,YAAA,UAAArC,WAAA;UACA;UACA6B,UAAA;YACAO,MAAA,CAAA5C,gBAAA,GAAAwC,qBAAA,CAAAI,MAAA,CAAAH,UAAA;UACA;UACA;QACA;;QAEA;QACA,IAAAI,YAAA;UACA,KAAApC,eAAA,CAAAvC,UAAA,QAAAA,UAAA;UACA,KAAAuC,eAAA,CAAAC,SAAA,QAAAvC,OAAA;UACA,KAAAqC,WAAA;QACA;;QAEA;QACA,IAAAsC,OAAA,GAAAH,SAAA,QAAA9C,cAAA;QACA,IAAAkD,SAAA,eAAAjD,SAAA;QAEA,IAAAgD,OAAA,IAAAC,SAAA,SAAAvC,WAAA;UACA,KAAAX,cAAA,GAAA8C,SAAA;;UAEA;UACA,KAAAK,oBAAA;;UAEA;UACA,SAAAxC,WAAA,SAAAxC,SAAA,SAAAiC,eAAA;YACA,KAAAgD,uBAAA;YACA,KAAAzC,WAAA;UACA;QACA;;QAEA;QACA,KAAAR,gBAAA,GAAAwC,qBAAA,MAAAC,UAAA;MACA,SAAAV,KAAA;QACAD,OAAA,CAAAC,KAAA,YAAAA,KAAA;QACA;QACA,SAAA/B,gBAAA;UACA0C,oBAAA,MAAA1C,gBAAA;UACA,KAAAA,gBAAA;QACA;;QAEA;QACAqC,UAAA;UACAO,MAAA,CAAAzB,eAAA;QACA;MACA;IACA;IAEA6B,oBAAA,WAAAA,qBAAA;MACA,KAAA/C,eAAA;MACA,SAAAA,eAAA;QACA;QACA,KAAAE,UAAA,gBAAAD,cAAA;QACA,SAAAC,UAAA;UACA,KAAAA,UAAA;UACA,KAAAD,cAAA;QACA,gBAAAC,UAAA;UACA,KAAAA,UAAA;UACA,KAAAD,cAAA;QACA;;QAEA;QACA,KAAAE,WAAA;MACA;IACA;IAEA;IACA8C,mBAAA,WAAAA,oBAAA;MACA;MACA,SAAAzF,OAAA,CAAA0F,MAAA,UAAA5D,iBAAA,CAAA9B,OAAA,CAAA0F,MAAA,IACA,KAAAtF,OAAA,CAAAsF,MAAA,UAAA5D,iBAAA,CAAA1B,OAAA,CAAAsF,MAAA;QACA;MACA;;MAEA;MACA,SAAAnF,SAAA,UAAAsC,iBAAA,IACA,KAAApC,UAAA,UAAAqC,kBAAA;QACA,KAAAD,iBAAA,QAAAtC,SAAA;QACA,KAAAuC,kBAAA,QAAArC,UAAA;QACA;MACA;;MAEA;MACA,KAAA6B,WAAA;MACA,SAAAA,WAAA;QACA,KAAAA,WAAA;QACA;MACA;;MAEA;MACA,UAAA/B,SAAA,SAAAuB,iBAAA,CAAA9B,OAAA,CAAA0F,MAAA;QACA;MACA;;MAEA;MACA,IAAAC,SAAA;;MAEA;MACA,SAAAC,CAAA,MAAAA,CAAA,QAAA5F,OAAA,CAAA0F,MAAA,EAAAE,CAAA;QACA,IAAAtE,MAAA,QAAAtB,OAAA,CAAA4F,CAAA;QACA,IAAAC,UAAA,QAAA/D,iBAAA,CAAA9B,OAAA,CAAA4F,CAAA;QAEA,KAAAC,UAAA;QAEA,IAAAC,IAAA,CAAAC,GAAA,CAAAzE,MAAA,CAAA0E,QAAA,MAAAH,UAAA,CAAAG,QAAA,OAAAL,SAAA,IACAG,IAAA,CAAAC,GAAA,CAAAzE,MAAA,CAAA0E,QAAA,MAAAH,UAAA,CAAAG,QAAA,OAAAL,SAAA;UACA;QACA;MACA;;MAEA;MACA,SAAAC,EAAA,MAAAA,EAAA,QAAAxF,OAAA,CAAAsF,MAAA,EAAAE,EAAA;QACA,IAAArE,MAAA,QAAAnB,OAAA,CAAAwF,EAAA;QACA,IAAAK,UAAA,QAAAnE,iBAAA,CAAA1B,OAAA,CAAAwF,EAAA;QAEA,KAAAK,UAAA;QAEA,IAAAH,IAAA,CAAAC,GAAA,CAAAxE,MAAA,CAAAyE,QAAA,MAAAC,UAAA,CAAAD,QAAA,OAAAL,SAAA,IACAG,IAAA,CAAAC,GAAA,CAAAxE,MAAA,CAAAyE,QAAA,MAAAC,UAAA,CAAAD,QAAA,OAAAL,SAAA;UACA;QACA;MACA;MAEA;IACA;IAEA;IACAjB,uBAAA,WAAAA,wBAAA;MACA;MACA,KAAA5C,iBAAA,CAAA9B,OAAA,QAAAA,OAAA,CAAAkG,GAAA,WAAA5E,MAAA;QAAA;UACA6E,EAAA,EAAA7E,MAAA,CAAA6E,EAAA;UACAH,QAAA,EAAA/D,kBAAA,CAAAX,MAAA,CAAA0E,QAAA;QACA;MAAA;MAEA,KAAAlE,iBAAA,CAAA1B,OAAA,QAAAA,OAAA,CAAA8F,GAAA,WAAA3E,MAAA;QAAA;UACA4E,EAAA,EAAA5E,MAAA,CAAA4E,EAAA;UACAH,QAAA,EAAA/D,kBAAA,CAAAV,MAAA,CAAAyE,QAAA;QACA;MAAA;IACA;IAEA;IACAR,uBAAA,WAAAA,wBAAA;MACA,UAAArE,GAAA;MAEA;QACA;QACA,KAAAA,GAAA,CAAAiF,SAAA,YAAAnF,UAAA,OAAAA,UAAA;QACA,KAAAoF,cAAA;;QAEA;QACA,KAAAlF,GAAA,CAAAmF,WAAA;QACA,KAAAnF,GAAA,CAAAoF,SAAA;QACA,KAAApF,GAAA,CAAAqF,UAAA,YAAAvF,UAAA,OAAAA,UAAA;;QAEA;QACA,SAAAH,SAAA,IAAAZ,KAAA,CAAA8B,OAAA,MAAAlB,SAAA,UAAAA,SAAA,CAAA4E,MAAA;UACA,KAAAe,aAAA;QACA;;QAEA;QACA,SAAAhG,UAAA;UACA,KAAAU,GAAA,CAAAuF,SAAA,QAAArF,QAAA,CAAAO,QAAA;UACA,KAAAT,GAAA,CAAAwF,QAAA,YAAA1F,UAAA,OAAAA,UAAA;QACA,gBAAAP,OAAA;UACA,KAAAS,GAAA,CAAAuF,SAAA;UACA,KAAAvF,GAAA,CAAAwF,QAAA,YAAA1F,UAAA,OAAAA,UAAA;QACA;;QAEA;QACA,SAAAN,UAAA;UACA,KAAAiG,UAAA;QACA;;QAEA;QACA,SAAAhG,eAAA,SAAAC,sBAAA;UACA,KAAAgG,UAAA;QACA;;QAEA;QACA,IAAAC,YAAA,QAAA9C,kBAAA;QACA,IAAA+C,YAAA,QAAAxC,kBAAA;;QAEA;QACA,IAAArE,KAAA,CAAA8B,OAAA,CAAA8E,YAAA;UACA,SAAAlB,CAAA,MAAAA,CAAA,GAAAkB,YAAA,CAAApB,MAAA,EAAAE,CAAA;YACA,IAAAtE,MAAA,GAAAwF,YAAA,CAAAlB,CAAA;YACA,IAAAtE,MAAA,IAAApB,KAAA,CAAA8B,OAAA,CAAAV,MAAA,CAAA0E,QAAA;cACA,KAAAgB,SAAA,CAAA1F,MAAA;YACA;UACA;QACA;;QAEA;QACA,IAAApB,KAAA,CAAA8B,OAAA,CAAA+E,YAAA;UACA,SAAAnB,GAAA,MAAAA,GAAA,GAAAmB,YAAA,CAAArB,MAAA,EAAAE,GAAA;YACA,IAAArE,MAAA,GAAAwF,YAAA,CAAAnB,GAAA;YACA,IAAArE,MAAA,IAAArB,KAAA,CAAA8B,OAAA,CAAAT,MAAA,CAAAyE,QAAA;cACA,KAAAgB,SAAA,CAAAzF,MAAA;YACA;UACA;QACA;MACA,SAAA+C,KAAA;QACAD,OAAA,CAAAC,KAAA,aAAAA,KAAA;QACA;MACA;IACA;IAEA;IACAmC,aAAA,WAAAA,cAAA;MACA;MACApC,OAAA,CAAA4C,GAAA;QACA,aAAA/E,aAAA;QACA,cAAAH,cAAA;QACA,cAAAjB;MACA;;MAEA;MACA,UAAAK,GAAA;QACAkD,OAAA,CAAAC,KAAA;QACA;MACA;;MAEA;MACA,IAAA4C,UAAA,QAAAhF,aAAA;MACA,KAAAgF,UAAA;QACA7C,OAAA,CAAA4C,GAAA;QACA;MACA;;MAEA;MACA,IAAAE,iBAAA;;MAEA;MACA,IAAAjH,KAAA,CAAA8B,OAAA,MAAAD,cAAA,UAAAA,cAAA,CAAA2D,MAAA;QACAyB,iBAAA,QAAApF,cAAA;QACAsC,OAAA,CAAA4C,GAAA,oFAAAG,MAAA,CAAAD,iBAAA,CAAAzB,MAAA;MACA;MACA;MAAA,KACA,IAAAxF,KAAA,CAAA8B,OAAA,MAAAlB,SAAA,UAAAA,SAAA,CAAA4E,MAAA;QACAyB,iBAAA,QAAArG,SAAA;QACAuD,OAAA,CAAA4C,GAAA,6EAAAG,MAAA,CAAAD,iBAAA,CAAAzB,MAAA;QACA;QACA,KAAA3D,cAAA,GAAAE,kBAAA,MAAAnB,SAAA;MACA;MACA;MAAA,KACA,SAAAuG,OAAA,IACA,KAAAA,OAAA,CAAAC,UAAA,IACApH,KAAA,CAAA8B,OAAA,MAAAqF,OAAA,CAAAC,UAAA,CAAAxG,SAAA,KACA,KAAAuG,OAAA,CAAAC,UAAA,CAAAxG,SAAA,CAAA4E,MAAA;QACAyB,iBAAA,QAAAE,OAAA,CAAAC,UAAA,CAAAxG,SAAA;QACAuD,OAAA,CAAA4C,GAAA,kFAAAG,MAAA,CAAAD,iBAAA,CAAAzB,MAAA;QACA;QACA,KAAA3D,cAAA,GAAAE,kBAAA,MAAAoF,OAAA,CAAAC,UAAA,CAAAxG,SAAA;MACA,OACA;QACAuD,OAAA,CAAAkD,IAAA;UACAxF,cAAA,OAAAA,cAAA;UACAyF,cAAA,OAAA1G;QACA;QACA;MACA;MAEAuD,OAAA,CAAA4C,GAAA,4BAAAG,MAAA,CAAAD,iBAAA,CAAAzB,MAAA,gCAAAxB,IAAA,CAAAuD,SAAA,CAAAN,iBAAA;;MAEA;MACA,SAAAvB,CAAA,MAAAA,CAAA,GAAAuB,iBAAA,CAAAzB,MAAA,EAAAE,CAAA;QACA,IAAA/D,QAAA,GAAAsF,iBAAA,CAAAvB,CAAA;;QAEA;QACA,KAAA/D,QAAA;UACAwC,OAAA,CAAAkD,IAAA,uBAAAH,MAAA,CAAAxB,CAAA;UACA;QACA;;QAEA;QACA,IAAAI,QAAA,GAAAnE,QAAA,CAAAmE,QAAA;QACA,KAAAA,QAAA;UACA3B,OAAA,CAAAkD,IAAA,uBAAAH,MAAA,CAAAxB,CAAA,yCAAA/D,QAAA;UACA;QACA;;QAEA;QACA,IAAA6F,GAAA;QACA;UACA,IAAAxH,KAAA,CAAA8B,OAAA,CAAAgE,QAAA;YACA0B,GAAA,QAAAC,iBAAA,CAAA3B,QAAA;UACA,WAAA4B,OAAA,CAAA5B,QAAA;YACA;YACA,WAAAA,QAAA,WAAAA,QAAA;cACA0B,GAAA;gBACAG,CAAA,EAAA7B,QAAA,CAAA6B,CAAA,QAAAzG,KAAA;gBACA0G,CAAA,EAAA9B,QAAA,CAAA8B,CAAA,QAAA1G;cACA;YACA;cACAiD,OAAA,CAAAkD,IAAA,uBAAAH,MAAA,CAAAxB,CAAA,mDAAAI,QAAA;cACA;YACA;UACA;YACA3B,OAAA,CAAAkD,IAAA,uBAAAH,MAAA,CAAAxB,CAAA,6CAAAgC,OAAA,CAAA5B,QAAA;YACA;UACA;QACA,SAAA5B,CAAA;UACAC,OAAA,CAAAC,KAAA,mCAAA8C,MAAA,CAAAxB,CAAA,uCAAAxB,CAAA;UACA;QACA;;QAEA;QACA,IAAA2D,MAAA,GAAAlG,QAAA,CAAAkG,MAAA,QAAA3G,KAAA;QACA,KAAA2G,MAAA,IAAAC,KAAA,CAAAD,MAAA,KAAAA,MAAA;UACA1D,OAAA,CAAAkD,IAAA,uBAAAH,MAAA,CAAAxB,CAAA,iCAAA/D,QAAA,CAAAkG,MAAA;UACA;QACA;;QAEA;QACA;UACA;UACA,KAAA5G,GAAA,CAAAuF,SAAA;UACA,KAAAvF,GAAA,CAAAmF,WAAA;UACA,KAAAnF,GAAA,CAAAoF,SAAA;;UAEA;UACA,KAAApF,GAAA,CAAA8G,SAAA;UACA,KAAA9G,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,EAAAC,MAAA,KAAAjC,IAAA,CAAAqC,EAAA;UACA,KAAAhH,GAAA,CAAAiH,IAAA;UACA,KAAAjH,GAAA,CAAAkH,MAAA;;UAEA;UACA,KAAAlH,GAAA,CAAAuF,SAAA;UACA,KAAAvF,GAAA,CAAAmH,IAAA;UACA,KAAAnH,GAAA,CAAAoH,SAAA;UACA,KAAApH,GAAA,CAAAqH,YAAA;UACA,KAAArH,GAAA,CAAAsH,QAAA,IAAArB,MAAA,CAAAxB,CAAA,GAAA8B,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA;UAEAzD,OAAA,CAAA4C,GAAA,+CAAAG,MAAA,CAAAxB,CAAA,sBAAAwB,MAAA,CAAAM,GAAA,CAAAG,CAAA,QAAAT,MAAA,CAAAM,GAAA,CAAAI,CAAA,qBAAAV,MAAA,CAAAW,MAAA;QACA,SAAA3D,CAAA;UACAC,OAAA,CAAAC,KAAA,mCAAA8C,MAAA,CAAAxB,CAAA,2BAAAxB,CAAA;QACA;MACA;IACA;IAEAiC,cAAA,WAAAA,eAAA;MACA,IAAAqC,QAAA,aAAAtH,KAAA;MACA,IAAAuH,KAAA,QAAA1H,UAAA;MACA,IAAA2H,MAAA,QAAA3H,UAAA;;MAEA;MACA,KAAAE,GAAA,CAAAuF,SAAA;MACA,KAAAvF,GAAA,CAAAwF,QAAA,OAAAgC,KAAA,EAAAC,MAAA;MAEA,KAAAzH,GAAA,CAAAmF,WAAA;MACA,KAAAnF,GAAA,CAAAoF,SAAA;;MAEA;MACA,SAAAsB,CAAA,MAAAA,CAAA,IAAAc,KAAA,EAAAd,CAAA,IAAAa,QAAA;QACA,KAAAvH,GAAA,CAAA8G,SAAA;QACA,KAAA9G,GAAA,CAAA0H,MAAA,CAAAhB,CAAA;QACA,KAAA1G,GAAA,CAAA2H,MAAA,CAAAjB,CAAA,EAAAe,MAAA;QACA,KAAAzH,GAAA,CAAAkH,MAAA;MACA;MAEA,SAAAP,CAAA,MAAAA,CAAA,IAAAc,MAAA,EAAAd,CAAA,IAAAY,QAAA;QACA,KAAAvH,GAAA,CAAA8G,SAAA;QACA,KAAA9G,GAAA,CAAA0H,MAAA,IAAAf,CAAA;QACA,KAAA3G,GAAA,CAAA2H,MAAA,CAAAH,KAAA,EAAAb,CAAA;QACA,KAAA3G,GAAA,CAAAkH,MAAA;MACA;;MAEA;MACA,KAAAlH,GAAA,CAAAmF,WAAA;MACA,KAAAnF,GAAA,CAAAoF,SAAA;;MAEA;MACA,KAAApF,GAAA,CAAA8G,SAAA;MACA,KAAA9G,GAAA,CAAA0H,MAAA,IAAAD,MAAA;MACA,KAAAzH,GAAA,CAAA2H,MAAA,CAAAH,KAAA,EAAAC,MAAA;MACA,KAAAzH,GAAA,CAAAkH,MAAA;;MAEA;MACA,KAAAlH,GAAA,CAAA8G,SAAA;MACA,KAAA9G,GAAA,CAAA0H,MAAA,CAAAF,KAAA;MACA,KAAAxH,GAAA,CAAA2H,MAAA,CAAAH,KAAA,MAAAC,MAAA;MACA,KAAAzH,GAAA,CAAAkH,MAAA;IACA;IAEA;IACA/E,cAAA,WAAAA,eAAA;MAAA,IAAAyF,MAAA;MAAA,IAAAC,eAAA,GAAAC,SAAA,CAAAvD,MAAA,QAAAuD,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,UAAA9H,GAAA;;MAEA;MACA,KAAA6H,eAAA,SAAAlH,iBAAA,CAAA9B,OAAA,CAAA0F,MAAA;QACA,YAAAF,uBAAA;MACA;;MAEA;MACA,KAAArE,GAAA,CAAAiF,SAAA,YAAAnF,UAAA,OAAAA,UAAA;MAEA,KAAAoF,cAAA;;MAEA;MACA,KAAAlF,GAAA,CAAAmF,WAAA;MACA,KAAAnF,GAAA,CAAAoF,SAAA;MACA,KAAApF,GAAA,CAAAqF,UAAA,YAAAvF,UAAA,OAAAA,UAAA;;MAEA;MACA,SAAAH,SAAA,IAAAZ,KAAA,CAAA8B,OAAA,MAAAlB,SAAA,UAAAA,SAAA,CAAA4E,MAAA;QACA,KAAAe,aAAA;MACA;;MAEA;MACA,SAAAhG,UAAA;QACA,KAAAU,GAAA,CAAAuF,SAAA,QAAArF,QAAA,CAAAO,QAAA;QACA,KAAAT,GAAA,CAAAwF,QAAA,YAAA1F,UAAA,OAAAA,UAAA;MACA;;MAEA;MACA,SAAAN,UAAA;QACA,KAAAiG,UAAA;MACA;;MAEA;MACA,SAAAhG,eAAA,SAAAC,sBAAA;QACA,KAAAgG,UAAA;MACA;;MAEA;MACA,KAAA7G,OAAA,CAAAmJ,OAAA,WAAA7H,MAAA;QACAyH,MAAA,CAAA/B,SAAA,CAAA1F,MAAA;MACA;;MAEA;MACA,KAAAlB,OAAA,CAAA+I,OAAA,WAAA5H,MAAA;QACAwH,MAAA,CAAA/B,SAAA,CAAAzF,MAAA;MACA;;MAEA;MACA,KAAAmD,uBAAA;MACA,KAAA7B,iBAAA,QAAAtC,SAAA;MACA,KAAAuC,kBAAA,QAAArC,UAAA;IACA;IAEA;IACAmG,UAAA,WAAAA,WAAA;MAAA,IAAAwC,MAAA;MACA;MACA,IAAAtC,YAAA,GAAA5G,KAAA,CAAA8B,OAAA,MAAAhC,OAAA,SAAAA,OAAA;MACA,IAAA+G,YAAA,GAAA7G,KAAA,CAAA8B,OAAA,MAAA5B,OAAA,SAAAA,OAAA;;MAEA;MACA0G,YAAA,CAAAqC,OAAA,WAAA7H,MAAA;QACA,IAAAA,MAAA,IAAAA,MAAA,CAAA+H,OAAA,IAAAnJ,KAAA,CAAA8B,OAAA,CAAAV,MAAA,CAAA+H,OAAA,KAAA/H,MAAA,CAAA+H,OAAA,CAAA3D,MAAA;UACA0D,MAAA,CAAAjI,GAAA,CAAA8G,SAAA;UACA,IAAAqB,QAAA,GAAAF,MAAA,CAAAzB,iBAAA,CAAArG,MAAA,CAAA+H,OAAA;UACAD,MAAA,CAAAjI,GAAA,CAAA0H,MAAA,CAAAS,QAAA,CAAAzB,CAAA,EAAAyB,QAAA,CAAAxB,CAAA;UAEA,SAAAlC,CAAA,MAAAA,CAAA,GAAAtE,MAAA,CAAA+H,OAAA,CAAA3D,MAAA,EAAAE,CAAA;YACA,IAAA2D,OAAA,GAAAH,MAAA,CAAAzB,iBAAA,CAAArG,MAAA,CAAA+H,OAAA,CAAAzD,CAAA;YACAwD,MAAA,CAAAjI,GAAA,CAAA2H,MAAA,CAAAS,OAAA,CAAA1B,CAAA,EAAA0B,OAAA,CAAAzB,CAAA;UACA;UAEAsB,MAAA,CAAAjI,GAAA,CAAAmF,WAAA,GAAA8C,MAAA,CAAA/H,QAAA,CAAAK,KAAA;UACA0H,MAAA,CAAAjI,GAAA,CAAAoF,SAAA;UACA6C,MAAA,CAAAjI,GAAA,CAAAkH,MAAA;QACA;MACA;;MAEA;MACAtB,YAAA,CAAAoC,OAAA,WAAA5H,MAAA;QACA,IAAAA,MAAA,IAAAA,MAAA,CAAA8H,OAAA,IAAAnJ,KAAA,CAAA8B,OAAA,CAAAT,MAAA,CAAA8H,OAAA,KAAA9H,MAAA,CAAA8H,OAAA,CAAA3D,MAAA;UACA0D,MAAA,CAAAjI,GAAA,CAAA8G,SAAA;UACA,IAAAqB,QAAA,GAAAF,MAAA,CAAAzB,iBAAA,CAAApG,MAAA,CAAA8H,OAAA;UACAD,MAAA,CAAAjI,GAAA,CAAA0H,MAAA,CAAAS,QAAA,CAAAzB,CAAA,EAAAyB,QAAA,CAAAxB,CAAA;UAEA,SAAAlC,CAAA,MAAAA,CAAA,GAAArE,MAAA,CAAA8H,OAAA,CAAA3D,MAAA,EAAAE,CAAA;YACA,IAAA2D,OAAA,GAAAH,MAAA,CAAAzB,iBAAA,CAAApG,MAAA,CAAA8H,OAAA,CAAAzD,CAAA;YACAwD,MAAA,CAAAjI,GAAA,CAAA2H,MAAA,CAAAS,OAAA,CAAA1B,CAAA,EAAA0B,OAAA,CAAAzB,CAAA;UACA;UAEAsB,MAAA,CAAAjI,GAAA,CAAAmF,WAAA,GAAA8C,MAAA,CAAA/H,QAAA,CAAAE,MAAA;UACA6H,MAAA,CAAAjI,GAAA,CAAAoF,SAAA;UACA6C,MAAA,CAAAjI,GAAA,CAAAkH,MAAA;QACA;MACA;IACA;IAEA;IACAxB,UAAA,WAAAA,WAAA;MAAA,IAAA2C,MAAA;MACA;MACA,IAAA1C,YAAA,GAAA5G,KAAA,CAAA8B,OAAA,MAAAhC,OAAA,SAAAA,OAAA;MACA,IAAA+G,YAAA,GAAA7G,KAAA,CAAA8B,OAAA,MAAA5B,OAAA,SAAAA,OAAA;;MAEA;MACA0G,YAAA,CAAAqC,OAAA,WAAA7H,MAAA;QACA,KAAAA,MAAA,KAAApB,KAAA,CAAA8B,OAAA,CAAAV,MAAA,CAAA0E,QAAA;QAEA,IAAA0B,GAAA,GAAA8B,MAAA,CAAA7B,iBAAA,CAAArG,MAAA,CAAA0E,QAAA;;QAEA;QACA,IAAAwD,MAAA,CAAA5I,eAAA;UACA4I,MAAA,CAAArI,GAAA,CAAA8G,SAAA;UACAuB,MAAA,CAAArI,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,EAAAxG,MAAA,CAAAmI,YAAA,GAAAD,MAAA,CAAApI,KAAA,KAAA0E,IAAA,CAAAqC,EAAA;UACAqB,MAAA,CAAArI,GAAA,CAAAuF,SAAA,GAAA8C,MAAA,CAAAnI,QAAA,CAAAG,MAAA;UACAgI,MAAA,CAAArI,GAAA,CAAAiH,IAAA;QACA;;QAEA;QACA,IAAAoB,MAAA,CAAA3I,sBAAA;UACA2I,MAAA,CAAArI,GAAA,CAAA8G,SAAA;UACAuB,MAAA,CAAArI,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,EAAAxG,MAAA,CAAAoI,mBAAA,GAAAF,MAAA,CAAApI,KAAA,KAAA0E,IAAA,CAAAqC,EAAA;UACAqB,MAAA,CAAArI,GAAA,CAAAuF,SAAA,GAAA8C,MAAA,CAAAnI,QAAA,CAAAI,aAAA;UACA+H,MAAA,CAAArI,GAAA,CAAAiH,IAAA;QACA;;QAEA;QACAoB,MAAA,CAAArI,GAAA,CAAA8G,SAAA;QACAuB,MAAA,CAAArI,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,OAAA0B,MAAA,CAAApI,KAAA,KAAA0E,IAAA,CAAAqC,EAAA;QACAqB,MAAA,CAAArI,GAAA,CAAAuF,SAAA,GAAA8C,MAAA,CAAAnI,QAAA,CAAAM,YAAA;QACA6H,MAAA,CAAArI,GAAA,CAAAiH,IAAA;MACA;;MAEA;MACArB,YAAA,CAAAoC,OAAA,WAAA5H,MAAA;QACA,KAAAA,MAAA,KAAArB,KAAA,CAAA8B,OAAA,CAAAT,MAAA,CAAAyE,QAAA;QAEA,IAAAwD,MAAA,CAAA5I,eAAA;UACA,IAAA8G,GAAA,GAAA8B,MAAA,CAAA7B,iBAAA,CAAApG,MAAA,CAAAyE,QAAA;UACAwD,MAAA,CAAArI,GAAA,CAAA8G,SAAA;UACAuB,MAAA,CAAArI,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,EAAAvG,MAAA,CAAAkI,YAAA,GAAAD,MAAA,CAAApI,KAAA,KAAA0E,IAAA,CAAAqC,EAAA;UACAqB,MAAA,CAAArI,GAAA,CAAAuF,SAAA;UACA8C,MAAA,CAAArI,GAAA,CAAAiH,IAAA;QACA;MACA;IACA;IAEA;IACApB,SAAA,WAAAA,UAAA2C,KAAA,EAAA1J,IAAA;MACA,IAAAyH,GAAA,QAAAC,iBAAA,CAAAgC,KAAA,CAAA3D,QAAA;;MAEA;MACA,IAAA4D,OAAA;MACA,IAAA3J,IAAA;QACA2J,OAAA,GAAA9D,IAAA,CAAA+D,GAAA,MAAAlH,WAAA;QACA,KAAAmH,iBAAA,CAAApC,GAAA,EAAAkC,OAAA;MACA;;MAEA;MACA,KAAAzI,GAAA,CAAA8G,SAAA;MACA,IAAAF,MAAA,GAAA9H,IAAA;MACA,KAAAkB,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,GAAA8B,OAAA,EAAA7B,MAAA,KAAAjC,IAAA,CAAAqC,EAAA;MACA,KAAAhH,GAAA,CAAAuF,SAAA,QAAArF,QAAA,CAAApB,IAAA;MACA,KAAAkB,GAAA,CAAAiH,IAAA;;MAEA;MACA,KAAAjH,GAAA,CAAA4I,WAAA,GAAA9J,IAAA;MACA,KAAAkB,GAAA,CAAA6I,UAAA;MACA,KAAA7I,GAAA,CAAAkH,MAAA;MACA,KAAAlH,GAAA,CAAA6I,UAAA;;MAEA;MACA,SAAApH,UAAA;QAAA;QACA,KAAAzB,GAAA,CAAAmH,IAAA;QACA,KAAAnH,GAAA,CAAAuF,SAAA;QACA,KAAAvF,GAAA,CAAAoH,SAAA;QACA,KAAApH,GAAA,CAAAsH,QAAA,CAAAkB,KAAA,CAAAxD,EAAA,CAAA8D,QAAA,IAAAvC,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,GAAA8B,OAAA,IAAA3J,IAAA;MACA;IACA;IAEA;IACA6J,iBAAA,WAAAA,kBAAApC,GAAA,EAAAkC,OAAA;MACA,IAAAM,UAAA,YAAAxH,UAAA;;MAEA,KAAAvB,GAAA,CAAA8G,SAAA;MACA,KAAA9G,GAAA,CAAA+G,GAAA,CAAAR,GAAA,CAAAG,CAAA,EAAAH,GAAA,CAAAI,CAAA,GAAA8B,OAAA,OAAAM,UAAA,KAAApE,IAAA,CAAAqC,EAAA;MACA,KAAAhH,GAAA,CAAAmF,WAAA;MACA,KAAAnF,GAAA,CAAAgJ,WAAA;MACA,KAAAhJ,GAAA,CAAAoF,SAAA;MACA,KAAApF,GAAA,CAAAkH,MAAA;MACA,KAAAlH,GAAA,CAAAgJ,WAAA;IACA;IAEA;IACAxC,iBAAA,WAAAA,kBAAA3B,QAAA;MACA;MACA;QACA6B,CAAA,EAAA7B,QAAA,WAAA5E,KAAA;QACA0G,CAAA,EAAA9B,QAAA,WAAA5E;MACA;IACA;IAEA;IACAgJ,cAAA,WAAAA,eAAApE,QAAA;MAAA,IAAA+B,MAAA,GAAAkB,SAAA,CAAAvD,MAAA,QAAAuD,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,IAAAvB,GAAA,QAAAC,iBAAA,CAAA3B,QAAA;MACA,KAAA7E,GAAA,CAAAiF,SAAA,CAAAsB,GAAA,CAAAG,CAAA,GAAAE,MAAA,EAAAL,GAAA,CAAAI,CAAA,GAAAC,MAAA,EAAAA,MAAA,MAAAA,MAAA;IACA;EACA;EACAsC,KAAA;IACArK,OAAA;MACAsK,OAAA,WAAAA,QAAA;QAAA,IAAAC,MAAA;QACA;QACA,SAAApI,WAAA;UACA2B,YAAA,MAAA3B,WAAA;QACA;QACA,KAAAA,WAAA,GAAAyC,UAAA;UACA2F,MAAA,CAAA/E,uBAAA;QACA;MACA;MACAgF,IAAA;IACA;IACApK,OAAA;MACAkK,OAAA,WAAAA,QAAA;QAAA,IAAAG,MAAA;QACA;QACA,SAAAtI,WAAA;UACA2B,YAAA,MAAA3B,WAAA;QACA;QACA,KAAAA,WAAA,GAAAyC,UAAA;UACA6F,MAAA,CAAAjF,uBAAA;QACA;MACA;MACAgF,IAAA;IACA;IACA;IACA1J,SAAA;MACAwJ,OAAA,WAAAA,QAAAI,YAAA;QACArG,OAAA,CAAA4C,GAAA,mBAAAyD,YAAA;QAEA,IAAAxK,KAAA,CAAA8B,OAAA,CAAA0I,YAAA;UACA,KAAA3I,cAAA,GAAAE,kBAAA,CAAAyI,YAAA;UACArG,OAAA,CAAA4C,GAAA,wDAAAG,MAAA,MAAArF,cAAA,CAAA2D,MAAA;UACA,KAAApC,cAAA;QACA;UACAe,OAAA,CAAAkD,IAAA,uBAAAmD,YAAA;QACA;MACA;MACAF,IAAA;MACAG,SAAA;IACA;IACApK,SAAA,WAAAA,UAAAqK,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAvH,cAAA;MACA;IACA;IACA7C,UAAA,WAAAA,WAAAmK,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAvH,cAAA;MACA;IACA;IACA3C,UAAA,WAAAA,WAAAiK,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAvH,cAAA;MACA;IACA;IACA1C,eAAA,WAAAA,gBAAAgK,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAvH,cAAA;MACA;IACA;IACAzC,sBAAA,WAAAA,uBAAA+J,MAAA,EAAAC,MAAA;MACA,IAAAD,MAAA,KAAAC,MAAA;QACA,KAAAvH,cAAA;MACA;IACA;IACAjD,eAAA,WAAAA,gBAAA;MACA,KAAAe,KAAA,QAAAH,UAAA,QAAAZ,eAAA;MACA,KAAAiD,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}