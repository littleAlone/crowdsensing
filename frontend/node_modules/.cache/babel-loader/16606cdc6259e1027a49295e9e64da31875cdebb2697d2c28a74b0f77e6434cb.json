{"ast":null,"code":"import SimulationCanvas from '../components/SimulationCanvas.vue';\nexport default {\n  name: 'SimulationDetail',\n  components: {\n    SimulationCanvas\n  },\n  props: {\n    simulationId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      simulation: {},\n      isRunning: false,\n      isCaptured: false,\n      socket: null,\n      showTrails: true,\n      showVisionRange: false,\n      showCommunicationRange: false,\n      showDeleteDialog: false,\n      distanceChartOptions: {\n        chart: {\n          id: 'distance-chart',\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'numeric',\n          title: {\n            text: '步数'\n          }\n        },\n        yaxis: {\n          title: {\n            text: '与目标距离'\n          }\n        },\n        colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50'],\n        stroke: {\n          width: 2,\n          curve: 'smooth'\n        },\n        tooltip: {\n          x: {\n            title: {\n              formatter: () => '步数'\n            }\n          }\n        }\n      },\n      distanceChartSeries: [],\n      agentDistances: {}\n    };\n  },\n  computed: {\n    statusChipColor() {\n      if (this.isCaptured) return 'success';\n      if (this.isRunning) return 'primary';\n      return 'grey';\n    },\n    statusChipText() {\n      if (this.isCaptured) return '已捕获';\n      if (this.isRunning) return '进行中';\n      return '已停止';\n    }\n  },\n  async created() {\n    await this.fetchSimulation();\n    this.setupWebSocket();\n  },\n  beforeDestroy() {\n    this.closeWebSocket();\n  },\n  methods: {\n    async fetchSimulation() {\n      try {\n        const response = await this.axios.get(`/simulations/${this.simulationId}`);\n        this.simulation = response.data;\n        this.isRunning = this.simulation.is_running;\n        this.isCaptured = this.simulation.is_captured;\n        this.initDistanceChart();\n      } catch (error) {\n        console.error('Failed to fetch simulation:', error);\n        this.$toast.error('获取模拟数据失败');\n      }\n    },\n    setupWebSocket() {\n      // 关闭之前的连接\n      this.closeWebSocket();\n\n      // 创建新的WebSocket连接\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsBaseUrl = process.env.VUE_APP_WS_URL || `${wsProtocol}//${window.location.host}`;\n      this.socket = new WebSocket(`${wsBaseUrl}/api/v1/ws/simulations/${this.simulationId}`);\n      this.socket.onopen = () => {\n        console.log('WebSocket连接已建立');\n      };\n      this.socket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.error) {\n          console.error('WebSocket错误:', data.error);\n          this.$toast.error(`WebSocket错误: ${data.error}`);\n          return;\n        }\n        this.simulation = data;\n        this.isRunning = data.is_running;\n        this.isCaptured = data.is_captured;\n        this.updateDistanceChart();\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        // 如果模拟仍在运行但连接关闭，尝试重新连接\n        if (this.isRunning && !this.isCaptured) {\n          console.log('尝试重新连接WebSocket...');\n          setTimeout(() => this.setupWebSocket(), 3000);\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket错误:', error);\n      };\n    },\n    closeWebSocket() {\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        this.socket.close();\n      }\n    },\n    async startSimulation() {\n      try {\n        await this.axios.post(`/simulations/${this.simulationId}/start`);\n        this.isRunning = true;\n        this.$toast.success('模拟已启动');\n      } catch (error) {\n        console.error('Failed to start simulation:', error);\n        this.$toast.error('启动模拟失败');\n      }\n    },\n    async stopSimulation() {\n      try {\n        await this.axios.post(`/simulations/${this.simulationId}/stop`);\n        this.isRunning = false;\n        this.$toast.success('模拟已停止');\n      } catch (error) {\n        console.error('Failed to stop simulation:', error);\n        this.$toast.error('停止模拟失败');\n      }\n    },\n    async resetSimulation() {\n      try {\n        await this.axios.post(`/simulations/${this.simulationId}/reset`);\n        await this.fetchSimulation();\n        this.isRunning = false;\n        this.isCaptured = false;\n        this.agentDistances = {};\n        this.initDistanceChart();\n        this.$toast.success('模拟已重置');\n      } catch (error) {\n        console.error('Failed to reset simulation:', error);\n        this.$toast.error('重置模拟失败');\n      }\n    },\n    async deleteSimulation() {\n      try {\n        await this.axios.delete(`/simulations/${this.simulationId}`);\n        this.$toast.success('模拟已删除');\n        this.$router.push('/simulations');\n      } catch (error) {\n        console.error('Failed to delete simulation:', error);\n        this.$toast.error('删除模拟失败');\n      }\n      this.showDeleteDialog = false;\n    },\n    formatDate(dateString) {\n      if (!dateString) return '未知';\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    initDistanceChart() {\n      if (!this.simulation.hunters || !this.simulation.targets) return;\n      this.distanceChartSeries = this.simulation.hunters.map(hunter => ({\n        name: `猎手 ${hunter.id}`,\n        data: []\n      }));\n      this.agentDistances = {};\n      this.simulation.hunters.forEach(hunter => {\n        this.agentDistances[hunter.id] = [];\n      });\n    },\n    updateDistanceChart() {\n      if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) return;\n      const target = this.simulation.targets[0];\n      this.simulation.hunters.forEach((hunter, index) => {\n        // 计算与目标的距离\n        const distance = this.calculateDistance(hunter.position, target.position);\n        if (!this.agentDistances[hunter.id]) {\n          this.agentDistances[hunter.id] = [];\n        }\n        this.agentDistances[hunter.id].push({\n          x: this.simulation.step_count,\n          y: Math.round(distance * 100) / 100\n        });\n\n        // 限制数据点数量，避免性能问题\n        if (this.agentDistances[hunter.id].length > 100) {\n          this.agentDistances[hunter.id].shift();\n        }\n\n        // 更新图表数据\n        this.distanceChartSeries[index].data = [...this.agentDistances[hunter.id]];\n      });\n    },\n    calculateDistance(pos1, pos2) {\n      return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    }\n  }\n};","map":{"version":3,"names":["SimulationCanvas","name","components","props","simulationId","type","Number","required","data","simulation","isRunning","isCaptured","socket","showTrails","showVisionRange","showCommunicationRange","showDeleteDialog","distanceChartOptions","chart","id","toolbar","show","xaxis","title","text","yaxis","colors","stroke","width","curve","tooltip","x","formatter","distanceChartSeries","agentDistances","computed","statusChipColor","statusChipText","created","fetchSimulation","setupWebSocket","beforeDestroy","closeWebSocket","methods","response","axios","get","is_running","is_captured","initDistanceChart","error","console","$toast","wsProtocol","window","location","protocol","wsBaseUrl","process","env","VUE_APP_WS_URL","host","WebSocket","onopen","log","onmessage","event","JSON","parse","updateDistanceChart","onclose","setTimeout","onerror","readyState","OPEN","close","startSimulation","post","success","stopSimulation","resetSimulation","deleteSimulation","delete","$router","push","formatDate","dateString","date","Date","toLocaleString","hunters","targets","map","hunter","forEach","length","target","index","distance","calculateDistance","position","step_count","y","Math","round","shift","pos1","pos2","sqrt","pow"],"sources":["src/views/SimulationDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"simulation-detail\">\r\n      <v-container>\r\n        <v-row>\r\n          <v-col cols=\"12\">\r\n            <v-card>\r\n              <v-card-title class=\"headline\">\r\n                {{ simulation.name }}\r\n                <v-spacer></v-spacer>\r\n                <v-chip\r\n                  :color=\"statusChipColor\"\r\n                  text-color=\"white\"\r\n                  small\r\n                >\r\n                  {{ statusChipText }}\r\n                </v-chip>\r\n              </v-card-title>\r\n              <v-card-subtitle>{{ simulation.description }}</v-card-subtitle>\r\n              \r\n              <v-card-text>\r\n                <v-row>\r\n                  <v-col cols=\"12\" md=\"8\">\r\n                    <simulation-canvas\r\n                      :hunters=\"simulation.hunters || []\"\r\n                      :targets=\"simulation.targets || []\"\r\n                      :environment-size=\"simulation.environment_size || 500\"\r\n                      :is-running=\"isRunning\"\r\n                      :is-captured=\"isCaptured\"\r\n                      :show-trails=\"showTrails\"\r\n                      :show-vision-range=\"showVisionRange\"\r\n                      :show-communication-range=\"showCommunicationRange\"\r\n                      @start=\"startSimulation\"\r\n                      @stop=\"stopSimulation\"\r\n                      @reset=\"resetSimulation\"\r\n                    ></simulation-canvas>\r\n                    \r\n                    <v-card class=\"mt-4\">\r\n                      <v-card-title>显示选项</v-card-title>\r\n                      <v-card-text>\r\n                        <v-switch\r\n                          v-model=\"showTrails\"\r\n                          label=\"显示轨迹\"\r\n                          color=\"primary\"\r\n                          hide-details\r\n                          class=\"ma-2\"\r\n                        ></v-switch>\r\n                        <v-switch\r\n                          v-model=\"showVisionRange\"\r\n                          label=\"显示视野范围\"\r\n                          color=\"primary\"\r\n                          hide-details\r\n                          class=\"ma-2\"\r\n                        ></v-switch>\r\n                        <v-switch\r\n                          v-model=\"showCommunicationRange\"\r\n                          label=\"显示通信范围\"\r\n                          color=\"primary\"\r\n                          hide-details\r\n                          class=\"ma-2\"\r\n                        ></v-switch>\r\n                      </v-card-text>\r\n                    </v-card>\r\n                  </v-col>\r\n                  \r\n                  <v-col cols=\"12\" md=\"4\">\r\n                    <v-card>\r\n                      <v-card-title>模拟信息</v-card-title>\r\n                      <v-list dense>\r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>算法类型</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.algorithm_type }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>猎手数量</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.hunters ? simulation.hunters.length : 0 }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>目标数量</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.targets ? simulation.targets.length : 0 }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>环境大小</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.environment_size || 500 }} x {{ simulation.environment_size || 500 }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>当前步数</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.step_count || 0 }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item v-if=\"simulation.is_captured\">\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>捕获时间</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ simulation.capture_time ? simulation.capture_time.toFixed(2) + ' 秒' : '未知' }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                        \r\n                        <v-list-item>\r\n                          <v-list-item-content>\r\n                            <v-list-item-subtitle>创建时间</v-list-item-subtitle>\r\n                            <v-list-item-title>{{ formatDate(simulation.created_at) }}</v-list-item-title>\r\n                          </v-list-item-content>\r\n                        </v-list-item>\r\n                      </v-list>\r\n                    </v-card>\r\n                    \r\n                    <v-card class=\"mt-4\">\r\n                      <v-card-title>猎手统计</v-card-title>\r\n                      <v-card-text v-if=\"simulation.hunters && simulation.hunters.length\">\r\n                        <apexchart\r\n                          type=\"line\"\r\n                          height=\"250\"\r\n                          :options=\"distanceChartOptions\"\r\n                          :series=\"distanceChartSeries\"\r\n                        ></apexchart>\r\n                      </v-card-text>\r\n                    </v-card>\r\n                  </v-col>\r\n                </v-row>\r\n              </v-card-text>\r\n              \r\n              <v-card-actions>\r\n                <v-btn text color=\"primary\" @click=\"$router.push('/simulations')\">\r\n                  <v-icon left>mdi-arrow-left</v-icon> 返回列表\r\n                </v-btn>\r\n                <v-spacer></v-spacer>\r\n                <v-btn text color=\"error\" @click=\"showDeleteDialog = true\">\r\n                  <v-icon left>mdi-delete</v-icon> 删除模拟\r\n                </v-btn>\r\n              </v-card-actions>\r\n            </v-card>\r\n          </v-col>\r\n        </v-row>\r\n      </v-container>\r\n      \r\n      <!-- 删除确认对话框 -->\r\n      <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n        <v-card>\r\n          <v-card-title class=\"headline\">确认删除?</v-card-title>\r\n          <v-card-text>\r\n            此操作将永久删除该模拟及其所有相关数据，无法恢复。\r\n          </v-card-text>\r\n          <v-card-actions>\r\n            <v-spacer></v-spacer>\r\n            <v-btn text @click=\"showDeleteDialog = false\">取消</v-btn>\r\n            <v-btn color=\"error\" text @click=\"deleteSimulation\">确认删除</v-btn>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import SimulationCanvas from '../components/SimulationCanvas.vue'\r\n  \r\n  export default {\r\n    name: 'SimulationDetail',\r\n    components: {\r\n      SimulationCanvas\r\n    },\r\n    props: {\r\n      simulationId: {\r\n        type: Number,\r\n        required: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        simulation: {},\r\n        isRunning: false,\r\n        isCaptured: false,\r\n        socket: null,\r\n        showTrails: true,\r\n        showVisionRange: false,\r\n        showCommunicationRange: false,\r\n        showDeleteDialog: false,\r\n        distanceChartOptions: {\r\n          chart: {\r\n            id: 'distance-chart',\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          xaxis: {\r\n            type: 'numeric',\r\n            title: {\r\n              text: '步数'\r\n            }\r\n          },\r\n          yaxis: {\r\n            title: {\r\n              text: '与目标距离'\r\n            }\r\n          },\r\n          colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50'],\r\n          stroke: {\r\n            width: 2,\r\n            curve: 'smooth'\r\n          },\r\n          tooltip: {\r\n            x: {\r\n              title: {\r\n                formatter: () => '步数'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        distanceChartSeries: [],\r\n        agentDistances: {}\r\n      }\r\n    },\r\n    computed: {\r\n      statusChipColor() {\r\n        if (this.isCaptured) return 'success'\r\n        if (this.isRunning) return 'primary'\r\n        return 'grey'\r\n      },\r\n      statusChipText() {\r\n        if (this.isCaptured) return '已捕获'\r\n        if (this.isRunning) return '进行中'\r\n        return '已停止'\r\n      }\r\n    },\r\n    async created() {\r\n      await this.fetchSimulation()\r\n      this.setupWebSocket()\r\n    },\r\n    beforeDestroy() {\r\n      this.closeWebSocket()\r\n    },\r\n    methods: {\r\n      async fetchSimulation() {\r\n        try {\r\n          const response = await this.axios.get(`/simulations/${this.simulationId}`)\r\n          this.simulation = response.data\r\n          this.isRunning = this.simulation.is_running\r\n          this.isCaptured = this.simulation.is_captured\r\n          this.initDistanceChart()\r\n        } catch (error) {\r\n          console.error('Failed to fetch simulation:', error)\r\n          this.$toast.error('获取模拟数据失败')\r\n        }\r\n      },\r\n      setupWebSocket() {\r\n        // 关闭之前的连接\r\n        this.closeWebSocket()\r\n        \r\n        // 创建新的WebSocket连接\r\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'\r\n        const wsBaseUrl = process.env.VUE_APP_WS_URL || `${wsProtocol}//${window.location.host}`\r\n        this.socket = new WebSocket(`${wsBaseUrl}/api/v1/ws/simulations/${this.simulationId}`)\r\n        \r\n        this.socket.onopen = () => {\r\n          console.log('WebSocket连接已建立')\r\n        }\r\n        \r\n        this.socket.onmessage = (event) => {\r\n          const data = JSON.parse(event.data)\r\n          if (data.error) {\r\n            console.error('WebSocket错误:', data.error)\r\n            this.$toast.error(`WebSocket错误: ${data.error}`)\r\n            return\r\n          }\r\n          \r\n          this.simulation = data\r\n          this.isRunning = data.is_running\r\n          this.isCaptured = data.is_captured\r\n          this.updateDistanceChart()\r\n        }\r\n        \r\n        this.socket.onclose = () => {\r\n          console.log('WebSocket连接已关闭')\r\n          // 如果模拟仍在运行但连接关闭，尝试重新连接\r\n          if (this.isRunning && !this.isCaptured) {\r\n            console.log('尝试重新连接WebSocket...')\r\n            setTimeout(() => this.setupWebSocket(), 3000)\r\n          }\r\n        }\r\n        \r\n        this.socket.onerror = (error) => {\r\n          console.error('WebSocket错误:', error)\r\n        }\r\n      },\r\n      closeWebSocket() {\r\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n          this.socket.close()\r\n        }\r\n      },\r\n      async startSimulation() {\r\n        try {\r\n          await this.axios.post(`/simulations/${this.simulationId}/start`)\r\n          this.isRunning = true\r\n          this.$toast.success('模拟已启动')\r\n        } catch (error) {\r\n          console.error('Failed to start simulation:', error)\r\n          this.$toast.error('启动模拟失败')\r\n        }\r\n      },\r\n      async stopSimulation() {\r\n        try {\r\n          await this.axios.post(`/simulations/${this.simulationId}/stop`)\r\n          this.isRunning = false\r\n          this.$toast.success('模拟已停止')\r\n        } catch (error) {\r\n          console.error('Failed to stop simulation:', error)\r\n          this.$toast.error('停止模拟失败')\r\n        }\r\n      },\r\n      async resetSimulation() {\r\n        try {\r\n          await this.axios.post(`/simulations/${this.simulationId}/reset`)\r\n          await this.fetchSimulation()\r\n          this.isRunning = false\r\n          this.isCaptured = false\r\n          this.agentDistances = {}\r\n          this.initDistanceChart()\r\n          this.$toast.success('模拟已重置')\r\n        } catch (error) {\r\n          console.error('Failed to reset simulation:', error)\r\n          this.$toast.error('重置模拟失败')\r\n        }\r\n      },\r\n      async deleteSimulation() {\r\n        try {\r\n          await this.axios.delete(`/simulations/${this.simulationId}`)\r\n          this.$toast.success('模拟已删除')\r\n          this.$router.push('/simulations')\r\n        } catch (error) {\r\n          console.error('Failed to delete simulation:', error)\r\n          this.$toast.error('删除模拟失败')\r\n        }\r\n        this.showDeleteDialog = false\r\n      },\r\n      formatDate(dateString) {\r\n        if (!dateString) return '未知'\r\n        const date = new Date(dateString)\r\n        return date.toLocaleString()\r\n      },\r\n      initDistanceChart() {\r\n        if (!this.simulation.hunters || !this.simulation.targets) return\r\n        \r\n        this.distanceChartSeries = this.simulation.hunters.map(hunter => ({\r\n          name: `猎手 ${hunter.id}`,\r\n          data: []\r\n        }))\r\n        \r\n        this.agentDistances = {}\r\n        this.simulation.hunters.forEach(hunter => {\r\n          this.agentDistances[hunter.id] = []\r\n        })\r\n      },\r\n      updateDistanceChart() {\r\n        if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) return\r\n        \r\n        const target = this.simulation.targets[0]\r\n        \r\n        this.simulation.hunters.forEach((hunter, index) => {\r\n          // 计算与目标的距离\r\n          const distance = this.calculateDistance(hunter.position, target.position)\r\n          \r\n          if (!this.agentDistances[hunter.id]) {\r\n            this.agentDistances[hunter.id] = []\r\n          }\r\n          \r\n          this.agentDistances[hunter.id].push({\r\n            x: this.simulation.step_count,\r\n            y: Math.round(distance * 100) / 100\r\n          })\r\n          \r\n          // 限制数据点数量，避免性能问题\r\n          if (this.agentDistances[hunter.id].length > 100) {\r\n            this.agentDistances[hunter.id].shift()\r\n          }\r\n          \r\n          // 更新图表数据\r\n          this.distanceChartSeries[index].data = [...this.agentDistances[hunter.id]]\r\n        })\r\n      },\r\n      calculateDistance(pos1, pos2) {\r\n        return Math.sqrt(\r\n          Math.pow(pos1[0] - pos2[0], 2) + \r\n          Math.pow(pos1[1] - pos2[1], 2)\r\n        )\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .simulation-detail {\r\n    padding-top: 16px;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}