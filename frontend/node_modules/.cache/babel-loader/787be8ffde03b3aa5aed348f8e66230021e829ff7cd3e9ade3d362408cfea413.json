{"ast":null,"code":"import _toConsumableArray from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'HunterStatisticsChart',\n  props: {\n    hunters: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    targets: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    stepCount: {\n      type: Number,\n      \"default\": 0\n    },\n    isRunning: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      chartInstance: null,\n      chartInitialized: false,\n      chartLoading: false,\n      distanceChartSeries: [],\n      agentDistances: {},\n      maxDataPoints: 100,\n      chartUpdateTimer: null,\n      lastChartUpdate: 0,\n      optimizeChartUpdates: true\n    };\n  },\n  mounted: function mounted() {\n    this.initChart();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyChart();\n  },\n  methods: {\n    initChart: function initChart() {\n      var _this = this;\n      this.chartLoading = true;\n\n      // 初始化数据系列\n      if (this.hunters.length > 0) {\n        this.distanceChartSeries = this.hunters.map(function (hunter) {\n          return {\n            name: \"\\u730E\\u624B \".concat(hunter.id),\n            data: []\n          };\n        });\n        this.hunters.forEach(function (hunter) {\n          _this.agentDistances[hunter.id] = [];\n        });\n        this.$nextTick(function () {\n          setTimeout(function () {\n            _this.createChartInstance();\n          }, 300);\n        });\n      } else {\n        this.chartLoading = false;\n      }\n    },\n    createChartInstance: function createChartInstance() {\n      var _this2 = this;\n      try {\n        // 确保没有现有图表实例\n        this.destroyChart();\n\n        // 确保容器存在\n        var container = document.getElementById('hunter-distance-chart');\n        if (!container) {\n          console.error('找不到图表容器元素');\n          return;\n        }\n\n        // 使用普通方式创建图表而不是Vue组件\n        import('apexcharts').then(function (ApexCharts) {\n          _this2.chartInstance = new ApexCharts[\"default\"](container, {\n            chart: {\n              type: 'line',\n              height: 140,\n              // 减小高度\n              animations: {\n                enabled: false\n              },\n              toolbar: {\n                show: false\n              },\n              background: '#fff',\n              fontFamily: 'Roboto, sans-serif'\n            },\n            xaxis: {\n              type: 'numeric',\n              title: {\n                text: '步数'\n              },\n              labels: {\n                formatter: function formatter(val) {\n                  return Math.floor(val);\n                },\n                style: {\n                  fontSize: '10px'\n                }\n              }\n            },\n            yaxis: {\n              title: {\n                text: '与目标距离',\n                style: {\n                  fontSize: '10px'\n                }\n              },\n              min: function min(_min) {\n                return _min ? _min * 0.9 : 0;\n              },\n              labels: {\n                style: {\n                  fontSize: '10px'\n                }\n              }\n            },\n            colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50'],\n            stroke: {\n              width: 2,\n              curve: 'straight'\n            },\n            markers: {\n              size: 0\n            },\n            tooltip: {\n              x: {\n                title: {\n                  formatter: function formatter() {\n                    return '步数';\n                  }\n                }\n              },\n              y: {\n                formatter: function formatter(val) {\n                  return \"\".concat(val.toFixed(2), \" \\u5355\\u4F4D\");\n                }\n              }\n            },\n            legend: {\n              position: 'top',\n              horizontalAlign: 'center',\n              fontSize: '9px',\n              height: 20,\n              offsetY: -5\n            },\n            grid: {\n              padding: {\n                left: 5,\n                right: 5,\n                top: 0,\n                bottom: 0\n              }\n            },\n            series: _this2.distanceChartSeries\n          });\n          _this2.chartInstance.render().then(function () {\n            console.log('图表渲染成功');\n            _this2.chartInitialized = true;\n            _this2.chartLoading = false;\n          })[\"catch\"](function (err) {\n            console.error('图表渲染失败:', err);\n            _this2.chartLoading = false;\n          });\n        })[\"catch\"](function (err) {\n          console.error('加载ApexCharts库失败:', err);\n          _this2.chartLoading = false;\n        });\n      } catch (error) {\n        console.error('创建图表实例失败:', error);\n        this.chartLoading = false;\n      }\n    },\n    destroyChart: function destroyChart() {\n      if (this.chartInstance) {\n        try {\n          this.chartInstance.destroy();\n          this.chartInstance = null;\n        } catch (e) {\n          console.error('销毁图表实例失败:', e);\n        }\n      }\n      if (this.chartUpdateTimer) {\n        clearTimeout(this.chartUpdateTimer);\n        this.chartUpdateTimer = null;\n      }\n    },\n    updateChart: function updateChart() {\n      var _this3 = this;\n      var now = performance.now();\n      var timeSinceLastUpdate = now - this.lastChartUpdate;\n\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\n        if (!this.chartUpdateTimer) {\n          this.chartUpdateTimer = setTimeout(function () {\n            _this3.updateChartData();\n            _this3.chartUpdateTimer = null;\n            _this3.lastChartUpdate = performance.now();\n          }, 200 - timeSinceLastUpdate);\n        }\n      } else {\n        // 直接更新\n        if (this.chartUpdateTimer) {\n          clearTimeout(this.chartUpdateTimer);\n          this.chartUpdateTimer = null;\n        }\n        this.updateChartData();\n        this.lastChartUpdate = now;\n      }\n    },\n    updateChartData: function updateChartData() {\n      var _this4 = this;\n      try {\n        if (!this.chartInitialized || !this.chartInstance || !this.hunters.length || !this.targets.length) {\n          return;\n        }\n        var target = this.targets[0];\n        if (!target || !target.position) return;\n\n        // 更新数据\n        var dataUpdated = false;\n        this.hunters.forEach(function (hunter, index) {\n          // 确保猎手数据有效\n          if (!hunter || !hunter.position) return;\n\n          // 计算与目标的距离\n          var distance = _this4.calculateDistance(hunter.position, target.position);\n          if (!_this4.agentDistances[hunter.id]) {\n            _this4.agentDistances[hunter.id] = [];\n          }\n\n          // 添加数据点\n          _this4.agentDistances[hunter.id].push({\n            x: _this4.stepCount,\n            y: Math.round(distance * 100) / 100\n          });\n\n          // 限制数据点数量\n          if (_this4.agentDistances[hunter.id].length > _this4.maxDataPoints) {\n            var firstPoint = _this4.agentDistances[hunter.id][0];\n            _this4.agentDistances[hunter.id] = [firstPoint].concat(_toConsumableArray(_this4.agentDistances[hunter.id].slice(-_this4.maxDataPoints + 1)));\n          }\n\n          // 更新系列数据\n          if (index < _this4.distanceChartSeries.length) {\n            _this4.distanceChartSeries[index].data = _toConsumableArray(_this4.agentDistances[hunter.id]);\n            dataUpdated = true;\n          }\n        });\n\n        // 仅当数据更新时才更新图表\n        if (dataUpdated && this.chartInstance) {\n          this.chartInstance.updateSeries(this.distanceChartSeries);\n        }\n      } catch (error) {\n        console.error('更新图表数据失败:', error);\n      }\n    },\n    calculateDistance: function calculateDistance(pos1, pos2) {\n      return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    }\n  },\n  watch: {\n    hunters: {\n      handler: function handler(newHunters) {\n        if (!this.chartInitialized && newHunters.length > 0) {\n          this.initChart();\n        } else if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      },\n      deep: true\n    },\n    targets: {\n      handler: function handler() {\n        if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      },\n      deep: true\n    },\n    stepCount: {\n      handler: function handler() {\n        if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","hunters","type","Array","default","targets","stepCount","Number","isRunning","Boolean","data","chartInstance","chartInitialized","chartLoading","distanceChartSeries","agentDistances","maxDataPoints","chartUpdateTimer","lastChartUpdate","optimizeChartUpdates","mounted","initChart","beforeDestroy","destroyChart","methods","_this","length","map","hunter","concat","id","forEach","$nextTick","setTimeout","createChartInstance","_this2","container","document","getElementById","console","error","then","ApexCharts","chart","height","animations","enabled","toolbar","show","background","fontFamily","xaxis","title","text","labels","formatter","val","Math","floor","style","fontSize","yaxis","min","colors","stroke","width","curve","markers","size","tooltip","x","y","toFixed","legend","position","horizontalAlign","offsetY","grid","padding","left","right","top","bottom","series","render","log","err","destroy","e","clearTimeout","updateChart","_this3","now","performance","timeSinceLastUpdate","updateChartData","_this4","target","dataUpdated","index","distance","calculateDistance","push","round","firstPoint","_toConsumableArray","slice","updateSeries","pos1","pos2","sqrt","pow","watch","handler","newHunters","deep"],"sources":["src/components/simulation/HunterStatisticsChart.vue"],"sourcesContent":["<template>\r\n  <v-card class=\"hunter-chart-card\">\r\n    <v-card-title class=\"chart-title\">猎手统计</v-card-title>\r\n    <v-card-text class=\"chart-content\">\r\n      <div id=\"hunter-distance-chart\" ref=\"chartContainer\" class=\"chart-container\">\r\n        <div v-if=\"!chartInitialized || chartLoading\" class=\"chart-placeholder\">\r\n          正在加载图表...\r\n        </div>\r\n      </div>\r\n    </v-card-text>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'HunterStatisticsChart',\r\n  props: {\r\n    hunters: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    targets: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    stepCount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    isRunning: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      chartInitialized: false,\r\n      chartLoading: false,\r\n      distanceChartSeries: [],\r\n      agentDistances: {},\r\n      maxDataPoints: 100,\r\n      chartUpdateTimer: null,\r\n      lastChartUpdate: 0,\r\n      optimizeChartUpdates: true,\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n  },\r\n  beforeDestroy() {\r\n    this.destroyChart();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chartLoading = true;\r\n      \r\n      // 初始化数据系列\r\n      if (this.hunters.length > 0) {\r\n        this.distanceChartSeries = this.hunters.map(hunter => ({\r\n          name: `猎手 ${hunter.id}`,\r\n          data: []\r\n        }));\r\n        \r\n        this.hunters.forEach(hunter => {\r\n          this.agentDistances[hunter.id] = [];\r\n        });\r\n        \r\n        this.$nextTick(() => {\r\n          setTimeout(() => {\r\n            this.createChartInstance();\r\n          }, 300);\r\n        });\r\n      } else {\r\n        this.chartLoading = false;\r\n      }\r\n    },\r\n    \r\n    createChartInstance() {\r\n      try {\r\n        // 确保没有现有图表实例\r\n        this.destroyChart();\r\n        \r\n        // 确保容器存在\r\n        const container = document.getElementById('hunter-distance-chart');\r\n        if (!container) {\r\n          console.error('找不到图表容器元素');\r\n          return;\r\n        }\r\n        \r\n        // 使用普通方式创建图表而不是Vue组件\r\n        import('apexcharts').then(ApexCharts => {\r\n          this.chartInstance = new ApexCharts.default(\r\n            container,\r\n            {\r\n              chart: {\r\n                type: 'line',\r\n                height: 140, // 减小高度\r\n                animations: { enabled: false },\r\n                toolbar: { show: false },\r\n                background: '#fff',\r\n                fontFamily: 'Roboto, sans-serif',\r\n              },\r\n              xaxis: {\r\n                type: 'numeric',\r\n                title: { text: '步数' },\r\n                labels: { \r\n                  formatter: (val) => Math.floor(val),\r\n                  style: { fontSize: '10px' }\r\n                }\r\n              },\r\n              yaxis: {\r\n                title: { text: '与目标距离', style: { fontSize: '10px' } },\r\n                min: function(min) { return min ? min * 0.9 : 0; },\r\n                labels: { style: { fontSize: '10px' } }\r\n              },\r\n              colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50'],\r\n              stroke: {\r\n                width: 2,\r\n                curve: 'straight'\r\n              },\r\n              markers: { size: 0 },\r\n              tooltip: {\r\n                x: { title: { formatter: () => '步数' } },\r\n                y: { formatter: (val) => `${val.toFixed(2)} 单位` }\r\n              },\r\n              legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'center',\r\n                fontSize: '9px',\r\n                height: 20,\r\n                offsetY: -5\r\n              },\r\n              grid: { padding: { left: 5, right: 5, top: 0, bottom: 0 } },\r\n              series: this.distanceChartSeries\r\n            }\r\n          );\r\n          \r\n          this.chartInstance.render().then(() => {\r\n            console.log('图表渲染成功');\r\n            this.chartInitialized = true;\r\n            this.chartLoading = false;\r\n          }).catch(err => {\r\n            console.error('图表渲染失败:', err);\r\n            this.chartLoading = false;\r\n          });\r\n        }).catch(err => {\r\n          console.error('加载ApexCharts库失败:', err);\r\n          this.chartLoading = false;\r\n        });\r\n      } catch (error) {\r\n        console.error('创建图表实例失败:', error);\r\n        this.chartLoading = false;\r\n      }\r\n    },\r\n    \r\n    destroyChart() {\r\n      if (this.chartInstance) {\r\n        try {\r\n          this.chartInstance.destroy();\r\n          this.chartInstance = null;\r\n        } catch (e) {\r\n          console.error('销毁图表实例失败:', e);\r\n        }\r\n      }\r\n      \r\n      if (this.chartUpdateTimer) {\r\n        clearTimeout(this.chartUpdateTimer);\r\n        this.chartUpdateTimer = null;\r\n      }\r\n    },\r\n    \r\n    updateChart() {\r\n      const now = performance.now();\r\n      const timeSinceLastUpdate = now - this.lastChartUpdate;\r\n      \r\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\r\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\r\n        if (!this.chartUpdateTimer) {\r\n          this.chartUpdateTimer = setTimeout(() => {\r\n            this.updateChartData();\r\n            this.chartUpdateTimer = null;\r\n            this.lastChartUpdate = performance.now();\r\n          }, 200 - timeSinceLastUpdate);\r\n        }\r\n      } else {\r\n        // 直接更新\r\n        if (this.chartUpdateTimer) {\r\n          clearTimeout(this.chartUpdateTimer);\r\n          this.chartUpdateTimer = null;\r\n        }\r\n        this.updateChartData();\r\n        this.lastChartUpdate = now;\r\n      }\r\n    },\r\n    \r\n    updateChartData() {\r\n      try {\r\n        if (!this.chartInitialized || !this.chartInstance || \r\n            !this.hunters.length || !this.targets.length) {\r\n          return;\r\n        }\r\n        \r\n        const target = this.targets[0];\r\n        if (!target || !target.position) return;\r\n        \r\n        // 更新数据\r\n        let dataUpdated = false;\r\n        \r\n        this.hunters.forEach((hunter, index) => {\r\n          // 确保猎手数据有效\r\n          if (!hunter || !hunter.position) return;\r\n          \r\n          // 计算与目标的距离\r\n          const distance = this.calculateDistance(hunter.position, target.position);\r\n          \r\n          if (!this.agentDistances[hunter.id]) {\r\n            this.agentDistances[hunter.id] = [];\r\n          }\r\n          \r\n          // 添加数据点\r\n          this.agentDistances[hunter.id].push({\r\n            x: this.stepCount,\r\n            y: Math.round(distance * 100) / 100\r\n          });\r\n          \r\n          // 限制数据点数量\r\n          if (this.agentDistances[hunter.id].length > this.maxDataPoints) {\r\n            const firstPoint = this.agentDistances[hunter.id][0];\r\n            this.agentDistances[hunter.id] = [\r\n              firstPoint,\r\n              ...this.agentDistances[hunter.id].slice(-this.maxDataPoints + 1)\r\n            ];\r\n          }\r\n          \r\n          // 更新系列数据\r\n          if (index < this.distanceChartSeries.length) {\r\n            this.distanceChartSeries[index].data = [...this.agentDistances[hunter.id]];\r\n            dataUpdated = true;\r\n          }\r\n        });\r\n        \r\n        // 仅当数据更新时才更新图表\r\n        if (dataUpdated && this.chartInstance) {\r\n          this.chartInstance.updateSeries(this.distanceChartSeries);\r\n        }\r\n      } catch (error) {\r\n        console.error('更新图表数据失败:', error);\r\n      }\r\n    },\r\n    \r\n    calculateDistance(pos1, pos2) {\r\n      return Math.sqrt(\r\n        Math.pow(pos1[0] - pos2[0], 2) + \r\n        Math.pow(pos1[1] - pos2[1], 2)\r\n      );\r\n    }\r\n  },\r\n  watch: {\r\n    hunters: {\r\n      handler(newHunters) {\r\n        if (!this.chartInitialized && newHunters.length > 0) {\r\n          this.initChart();\r\n        } else if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    targets: {\r\n      handler() {\r\n        if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    stepCount: {\r\n      handler() {\r\n        if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.hunter-chart-card {\r\n  margin-bottom: 8px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 0.9rem;\r\n  padding: 4px 12px !important;\r\n  min-height: 32px !important;\r\n}\r\n\r\n.chart-content {\r\n  padding: 0 !important;\r\n}\r\n\r\n.chart-container {\r\n  width: 100%;\r\n  height: 140px;\r\n  position: relative;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n}\r\n\r\n.chart-placeholder {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 0.8rem;\r\n  background-color: rgba(249, 249, 249, 0.7);\r\n  z-index: 1;\r\n}\r\n\r\n@media (max-height: 768px) {\r\n  .chart-container {\r\n    height: 120px;\r\n  }\r\n  \r\n  .chart-title {\r\n    padding: 2px 12px !important;\r\n    min-height: 28px !important;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}