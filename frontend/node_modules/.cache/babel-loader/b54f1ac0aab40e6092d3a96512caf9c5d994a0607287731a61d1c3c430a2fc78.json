{"ast":null,"code":"import _toConsumableArray from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'HunterStatisticsChart',\n  props: {\n    hunters: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    targets: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    stepCount: {\n      type: Number,\n      \"default\": 0\n    },\n    isRunning: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      chartInstance: null,\n      chartInitialized: false,\n      chartLoading: false,\n      distanceChartSeries: [],\n      agentDistances: {},\n      maxDataPoints: 100,\n      chartUpdateTimer: null,\n      lastChartUpdate: 0,\n      optimizeChartUpdates: true,\n      colorPalette: ['#4285F4', '#34A853', '#EA4335', '#FBBC05'] // 谷歌色彩，更鲜明的对比\n    };\n  },\n  mounted: function mounted() {\n    this.initChart();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyChart();\n  },\n  methods: {\n    initChart: function initChart() {\n      var _this = this;\n      this.chartLoading = true;\n\n      // 初始化数据系列\n      if (this.hunters.length > 0) {\n        this.distanceChartSeries = this.hunters.map(function (hunter, index) {\n          return {\n            name: \"\\u730E\\u624B \".concat(hunter.id),\n            data: [],\n            color: _this.colorPalette[index % _this.colorPalette.length]\n          };\n        });\n        this.hunters.forEach(function (hunter) {\n          _this.agentDistances[hunter.id] = [];\n        });\n        this.$nextTick(function () {\n          setTimeout(function () {\n            _this.createChartInstance();\n          }, 300);\n        });\n      } else {\n        this.chartLoading = false;\n      }\n    },\n    createChartInstance: function createChartInstance() {\n      var _this2 = this;\n      try {\n        // 确保没有现有图表实例\n        this.destroyChart();\n\n        // 确保容器存在\n        var container = document.getElementById('hunter-distance-chart');\n        if (!container) {\n          console.error('找不到图表容器元素');\n          return;\n        }\n\n        // 使用普通方式创建图表而不是Vue组件\n        import('apexcharts').then(function (ApexCharts) {\n          _this2.chartInstance = new ApexCharts[\"default\"](container, {\n            chart: {\n              type: 'line',\n              height: 240,\n              // 增加高度以提供更好的可视性\n              animations: {\n                enabled: false\n              },\n              toolbar: {\n                show: true\n              },\n              // 启用工具栏方便查看\n              background: '#fff',\n              fontFamily: 'Roboto, sans-serif',\n              zoom: {\n                enabled: true\n              } // 启用缩放功能\n            },\n            xaxis: {\n              type: 'numeric',\n              title: {\n                text: '步数',\n                style: {\n                  fontSize: '12px',\n                  fontWeight: 600\n                }\n              },\n              labels: {\n                formatter: function formatter(val) {\n                  return Math.floor(val);\n                },\n                style: {\n                  fontSize: '11px'\n                }\n              },\n              tickAmount: 5\n            },\n            yaxis: {\n              title: {\n                text: '与目标距离',\n                style: {\n                  fontSize: '12px',\n                  fontWeight: 600\n                }\n              },\n              min: 0,\n              // 确保从0开始\n              labels: {\n                style: {\n                  fontSize: '11px'\n                },\n                formatter: function formatter(val) {\n                  return val.toFixed(1);\n                }\n              },\n              tickAmount: 5\n            },\n            colors: _this2.colorPalette,\n            stroke: {\n              width: 3,\n              // 增加线宽\n              curve: 'smooth',\n              // 平滑曲线\n              lineCap: 'round'\n            },\n            markers: {\n              size: 4,\n              // 增加标记大小\n              strokeWidth: 0,\n              hover: {\n                size: 6\n              }\n            },\n            tooltip: {\n              x: {\n                title: {\n                  formatter: function formatter() {\n                    return '步数';\n                  }\n                }\n              },\n              y: {\n                formatter: function formatter(val) {\n                  return \"\".concat(val.toFixed(2), \" \\u5355\\u4F4D\");\n                }\n              }\n            },\n            legend: {\n              position: 'top',\n              horizontalAlign: 'right',\n              fontSize: '12px',\n              fontWeight: 500,\n              markers: {\n                size: 8,\n                strokeWidth: 0\n              }\n            },\n            grid: {\n              borderColor: '#e0e0e0',\n              row: {\n                colors: ['#f3f3f3', 'transparent'],\n                opacity: 0.5\n              }\n            },\n            series: _this2.distanceChartSeries,\n            noData: {\n              text: '暂无数据',\n              align: 'center',\n              verticalAlign: 'middle',\n              style: {\n                fontSize: '14px'\n              }\n            }\n          });\n          _this2.chartInstance.render().then(function () {\n            console.log('图表渲染成功');\n            _this2.chartInitialized = true;\n            _this2.chartLoading = false;\n          })[\"catch\"](function (err) {\n            console.error('图表渲染失败:', err);\n            _this2.chartLoading = false;\n          });\n        })[\"catch\"](function (err) {\n          console.error('加载ApexCharts库失败:', err);\n          _this2.chartLoading = false;\n        });\n      } catch (error) {\n        console.error('创建图表实例失败:', error);\n        this.chartLoading = false;\n      }\n    },\n    destroyChart: function destroyChart() {\n      if (this.chartInstance) {\n        try {\n          this.chartInstance.destroy();\n          this.chartInstance = null;\n        } catch (e) {\n          console.error('销毁图表实例失败:', e);\n        }\n      }\n      if (this.chartUpdateTimer) {\n        clearTimeout(this.chartUpdateTimer);\n        this.chartUpdateTimer = null;\n      }\n    },\n    updateChart: function updateChart() {\n      var _this3 = this;\n      var now = performance.now();\n      var timeSinceLastUpdate = now - this.lastChartUpdate;\n\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\n        if (!this.chartUpdateTimer) {\n          this.chartUpdateTimer = setTimeout(function () {\n            _this3.updateChartData();\n            _this3.chartUpdateTimer = null;\n            _this3.lastChartUpdate = performance.now();\n          }, 200 - timeSinceLastUpdate);\n        }\n      } else {\n        // 直接更新\n        if (this.chartUpdateTimer) {\n          clearTimeout(this.chartUpdateTimer);\n          this.chartUpdateTimer = null;\n        }\n        this.updateChartData();\n        this.lastChartUpdate = now;\n      }\n      // 添加特殊处理：即使在模拟停止后也要确保最后一次数据更新\n      if (this.isCaptured || !this.isRunning) {\n        // 确保捕获后或停止后的最后一次数据更新\n        this.updateChartData();\n\n        // 存储最终状态到本地存储，以便在页面刷新或重新进入时恢复\n        var finalData = {\n          simulationId: this.$route.params.id,\n          chartData: JSON.stringify(this.distanceChartSeries),\n          stepCount: this.stepCount,\n          timestamp: new Date().getTime()\n        };\n        localStorage.setItem('simulation_final_data', JSON.stringify(finalData));\n      }\n    },\n    updateChartData: function updateChartData() {\n      var _this4 = this;\n      try {\n        if (!this.chartInitialized || !this.chartInstance || !this.hunters.length || !this.targets.length) {\n          return;\n        }\n        var target = this.targets[0];\n        if (!target || !target.position) return;\n\n        // 更新数据\n        var dataUpdated = false;\n        this.hunters.forEach(function (hunter, index) {\n          // 确保猎手数据有效\n          if (!hunter || !hunter.position) return;\n\n          // 计算与目标的距离\n          var distance = _this4.calculateDistance(hunter.position, target.position);\n          if (!_this4.agentDistances[hunter.id]) {\n            _this4.agentDistances[hunter.id] = [];\n          }\n\n          // 添加数据点\n          _this4.agentDistances[hunter.id].push({\n            x: _this4.stepCount,\n            y: Math.round(distance * 100) / 100\n          });\n\n          // 限制数据点数量，保留首尾点以保持图表连续性\n          if (_this4.agentDistances[hunter.id].length > _this4.maxDataPoints) {\n            var firstPoint = _this4.agentDistances[hunter.id][0];\n            var lastPoints = _this4.agentDistances[hunter.id].slice(-_this4.maxDataPoints + 1);\n            _this4.agentDistances[hunter.id] = [firstPoint].concat(_toConsumableArray(lastPoints));\n          }\n\n          // 更新系列数据\n          if (index < _this4.distanceChartSeries.length) {\n            _this4.distanceChartSeries[index].data = _toConsumableArray(_this4.agentDistances[hunter.id]);\n            dataUpdated = true;\n          }\n        });\n\n        // 仅当数据更新时才更新图表\n        if (dataUpdated && this.chartInstance) {\n          this.chartInstance.updateSeries(this.distanceChartSeries);\n\n          // 根据当前数据动态调整Y轴范围\n          this.optimizeYAxisRange();\n        }\n      } catch (error) {\n        console.error('更新图表数据失败:', error);\n      }\n    },\n    // 新增：优化Y轴范围方法\n    optimizeYAxisRange: function optimizeYAxisRange() {\n      var allDistances = this.distanceChartSeries.flatMap(function (series) {\n        return series.data.map(function (point) {\n          return point.y;\n        });\n      });\n      if (allDistances.length > 0) {\n        var maxDistance = Math.max.apply(Math, _toConsumableArray(allDistances));\n        var minDistance = Math.min.apply(Math, _toConsumableArray(allDistances));\n        var range = maxDistance - minDistance;\n\n        // 只有当范围足够小时才调整Y轴，避免频繁变化\n        if (range < maxDistance * 0.5) {\n          var padding = range * 0.2; // 20%的上下边距\n          this.chartInstance.updateOptions({\n            yaxis: {\n              min: Math.max(0, minDistance - padding),\n              max: maxDistance + padding,\n              labels: {\n                formatter: function formatter(val) {\n                  return val.toFixed(1);\n                }\n              }\n            }\n          }, false, true);\n        }\n      }\n    },\n    calculateDistance: function calculateDistance(pos1, pos2) {\n      return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    }\n  },\n  watch: {\n    hunters: {\n      handler: function handler(newHunters) {\n        if (!this.chartInitialized && newHunters.length > 0) {\n          this.initChart();\n        } else if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      },\n      deep: true\n    },\n    targets: {\n      handler: function handler() {\n        if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      },\n      deep: true\n    },\n    stepCount: {\n      handler: function handler() {\n        if (this.chartInitialized && this.chartInstance) {\n          this.updateChart();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","hunters","type","Array","default","targets","stepCount","Number","isRunning","Boolean","data","chartInstance","chartInitialized","chartLoading","distanceChartSeries","agentDistances","maxDataPoints","chartUpdateTimer","lastChartUpdate","optimizeChartUpdates","colorPalette","mounted","initChart","beforeDestroy","destroyChart","methods","_this","length","map","hunter","index","concat","id","color","forEach","$nextTick","setTimeout","createChartInstance","_this2","container","document","getElementById","console","error","then","ApexCharts","chart","height","animations","enabled","toolbar","show","background","fontFamily","zoom","xaxis","title","text","style","fontSize","fontWeight","labels","formatter","val","Math","floor","tickAmount","yaxis","min","toFixed","colors","stroke","width","curve","lineCap","markers","size","strokeWidth","hover","tooltip","x","y","legend","position","horizontalAlign","grid","borderColor","row","opacity","series","noData","align","verticalAlign","render","log","err","destroy","e","clearTimeout","updateChart","_this3","now","performance","timeSinceLastUpdate","updateChartData","isCaptured","finalData","simulationId","$route","params","chartData","JSON","stringify","timestamp","Date","getTime","localStorage","setItem","_this4","target","dataUpdated","distance","calculateDistance","push","round","firstPoint","lastPoints","slice","_toConsumableArray","updateSeries","optimizeYAxisRange","allDistances","flatMap","point","maxDistance","max","apply","minDistance","range","padding","updateOptions","pos1","pos2","sqrt","pow","watch","handler","newHunters","deep"],"sources":["src/components/simulation/HunterStatisticsChart.vue"],"sourcesContent":["<template>\r\n  <v-card class=\"hunter-chart-card\">\r\n    <v-card-title class=\"chart-title\">猎手统计</v-card-title>\r\n    <v-card-text class=\"chart-content\">\r\n      <div id=\"hunter-distance-chart\" ref=\"chartContainer\" class=\"chart-container\">\r\n        <div v-if=\"!chartInitialized || chartLoading\" class=\"chart-placeholder\">\r\n          正在加载图表...\r\n        </div>\r\n      </div>\r\n    </v-card-text>\r\n  </v-card>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'HunterStatisticsChart',\r\n  props: {\r\n    hunters: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    targets: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    stepCount: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    isRunning: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      chartInitialized: false,\r\n      chartLoading: false,\r\n      distanceChartSeries: [],\r\n      agentDistances: {},\r\n      maxDataPoints: 100,\r\n      chartUpdateTimer: null,\r\n      lastChartUpdate: 0,\r\n      optimizeChartUpdates: true,\r\n      colorPalette: ['#4285F4', '#34A853', '#EA4335', '#FBBC05'] // 谷歌色彩，更鲜明的对比\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n  },\r\n  beforeDestroy() {\r\n    this.destroyChart();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chartLoading = true;\r\n      \r\n      // 初始化数据系列\r\n      if (this.hunters.length > 0) {\r\n        this.distanceChartSeries = this.hunters.map((hunter, index) => ({\r\n          name: `猎手 ${hunter.id}`,\r\n          data: [],\r\n          color: this.colorPalette[index % this.colorPalette.length]\r\n        }));\r\n        \r\n        this.hunters.forEach(hunter => {\r\n          this.agentDistances[hunter.id] = [];\r\n        });\r\n        \r\n        this.$nextTick(() => {\r\n          setTimeout(() => {\r\n            this.createChartInstance();\r\n          }, 300);\r\n        });\r\n      } else {\r\n        this.chartLoading = false;\r\n      }\r\n    },\r\n    \r\n    createChartInstance() {\r\n      try {\r\n        // 确保没有现有图表实例\r\n        this.destroyChart();\r\n        \r\n        // 确保容器存在\r\n        const container = document.getElementById('hunter-distance-chart');\r\n        if (!container) {\r\n          console.error('找不到图表容器元素');\r\n          return;\r\n        }\r\n        \r\n        // 使用普通方式创建图表而不是Vue组件\r\n        import('apexcharts').then(ApexCharts => {\r\n          this.chartInstance = new ApexCharts.default(\r\n            container,\r\n            {\r\n              chart: {\r\n                type: 'line',\r\n                height: 240, // 增加高度以提供更好的可视性\r\n                animations: { enabled: false },\r\n                toolbar: { show: true }, // 启用工具栏方便查看\r\n                background: '#fff',\r\n                fontFamily: 'Roboto, sans-serif',\r\n                zoom: { enabled: true } // 启用缩放功能\r\n              },\r\n              xaxis: {\r\n                type: 'numeric',\r\n                title: { text: '步数', style: { fontSize: '12px', fontWeight: 600 } },\r\n                labels: { \r\n                  formatter: (val) => Math.floor(val),\r\n                  style: { fontSize: '11px' }\r\n                },\r\n                tickAmount: 5\r\n              },\r\n              yaxis: {\r\n                title: { \r\n                  text: '与目标距离', \r\n                  style: { fontSize: '12px', fontWeight: 600 } \r\n                },\r\n                min: 0, // 确保从0开始\r\n                labels: { \r\n                  style: { fontSize: '11px' },\r\n                  formatter: (val) => val.toFixed(1)\r\n                },\r\n                tickAmount: 5\r\n              },\r\n              colors: this.colorPalette,\r\n              stroke: {\r\n                width: 3, // 增加线宽\r\n                curve: 'smooth', // 平滑曲线\r\n                lineCap: 'round'\r\n              },\r\n              markers: { \r\n                size: 4, // 增加标记大小\r\n                strokeWidth: 0,\r\n                hover: { size: 6 }\r\n              },\r\n              tooltip: {\r\n                x: { title: { formatter: () => '步数' } },\r\n                y: { formatter: (val) => `${val.toFixed(2)} 单位` }\r\n              },\r\n              legend: {\r\n                position: 'top',\r\n                horizontalAlign: 'right',\r\n                fontSize: '12px',\r\n                fontWeight: 500,\r\n                markers: { size: 8, strokeWidth: 0 }\r\n              },\r\n              grid: { \r\n                borderColor: '#e0e0e0',\r\n                row: { colors: ['#f3f3f3', 'transparent'], opacity: 0.5 }\r\n              },\r\n              series: this.distanceChartSeries,\r\n              noData: {\r\n                text: '暂无数据',\r\n                align: 'center',\r\n                verticalAlign: 'middle',\r\n                style: {\r\n                  fontSize: '14px'\r\n                }\r\n              }\r\n            }\r\n          );\r\n          \r\n          this.chartInstance.render().then(() => {\r\n            console.log('图表渲染成功');\r\n            this.chartInitialized = true;\r\n            this.chartLoading = false;\r\n          }).catch(err => {\r\n            console.error('图表渲染失败:', err);\r\n            this.chartLoading = false;\r\n          });\r\n        }).catch(err => {\r\n          console.error('加载ApexCharts库失败:', err);\r\n          this.chartLoading = false;\r\n        });\r\n      } catch (error) {\r\n        console.error('创建图表实例失败:', error);\r\n        this.chartLoading = false;\r\n      }\r\n    },\r\n    \r\n    destroyChart() {\r\n      if (this.chartInstance) {\r\n        try {\r\n          this.chartInstance.destroy();\r\n          this.chartInstance = null;\r\n        } catch (e) {\r\n          console.error('销毁图表实例失败:', e);\r\n        }\r\n      }\r\n      \r\n      if (this.chartUpdateTimer) {\r\n        clearTimeout(this.chartUpdateTimer);\r\n        this.chartUpdateTimer = null;\r\n      }\r\n    },\r\n    \r\n    updateChart() {\r\n      const now = performance.now();\r\n      const timeSinceLastUpdate = now - this.lastChartUpdate;\r\n      \r\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\r\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\r\n        if (!this.chartUpdateTimer) {\r\n          this.chartUpdateTimer = setTimeout(() => {\r\n            this.updateChartData();\r\n            this.chartUpdateTimer = null;\r\n            this.lastChartUpdate = performance.now();\r\n          }, 200 - timeSinceLastUpdate);\r\n        }\r\n      } else {\r\n        // 直接更新\r\n        if (this.chartUpdateTimer) {\r\n          clearTimeout(this.chartUpdateTimer);\r\n          this.chartUpdateTimer = null;\r\n        }\r\n        this.updateChartData();\r\n        this.lastChartUpdate = now;\r\n      }\r\n      // 添加特殊处理：即使在模拟停止后也要确保最后一次数据更新\r\n    if (this.isCaptured || !this.isRunning) {\r\n      // 确保捕获后或停止后的最后一次数据更新\r\n      this.updateChartData();\r\n      \r\n      // 存储最终状态到本地存储，以便在页面刷新或重新进入时恢复\r\n      const finalData = {\r\n        simulationId: this.$route.params.id,\r\n        chartData: JSON.stringify(this.distanceChartSeries),\r\n        stepCount: this.stepCount,\r\n        timestamp: new Date().getTime()\r\n      };\r\n      localStorage.setItem('simulation_final_data', JSON.stringify(finalData));\r\n    }\r\n    },\r\n    \r\n    updateChartData() {\r\n      try {\r\n        if (!this.chartInitialized || !this.chartInstance || \r\n            !this.hunters.length || !this.targets.length) {\r\n          return;\r\n        }\r\n        \r\n        const target = this.targets[0];\r\n        if (!target || !target.position) return;\r\n        \r\n        // 更新数据\r\n        let dataUpdated = false;\r\n        \r\n        this.hunters.forEach((hunter, index) => {\r\n          // 确保猎手数据有效\r\n          if (!hunter || !hunter.position) return;\r\n          \r\n          // 计算与目标的距离\r\n          const distance = this.calculateDistance(hunter.position, target.position);\r\n          \r\n          if (!this.agentDistances[hunter.id]) {\r\n            this.agentDistances[hunter.id] = [];\r\n          }\r\n          \r\n          // 添加数据点\r\n          this.agentDistances[hunter.id].push({\r\n            x: this.stepCount,\r\n            y: Math.round(distance * 100) / 100\r\n          });\r\n          \r\n          // 限制数据点数量，保留首尾点以保持图表连续性\r\n          if (this.agentDistances[hunter.id].length > this.maxDataPoints) {\r\n            const firstPoint = this.agentDistances[hunter.id][0];\r\n            const lastPoints = this.agentDistances[hunter.id].slice(-this.maxDataPoints + 1);\r\n            this.agentDistances[hunter.id] = [firstPoint, ...lastPoints];\r\n          }\r\n          \r\n          // 更新系列数据\r\n          if (index < this.distanceChartSeries.length) {\r\n            this.distanceChartSeries[index].data = [...this.agentDistances[hunter.id]];\r\n            dataUpdated = true;\r\n          }\r\n        });\r\n        \r\n        // 仅当数据更新时才更新图表\r\n        if (dataUpdated && this.chartInstance) {\r\n          this.chartInstance.updateSeries(this.distanceChartSeries);\r\n          \r\n          // 根据当前数据动态调整Y轴范围\r\n          this.optimizeYAxisRange();\r\n        }\r\n      } catch (error) {\r\n        console.error('更新图表数据失败:', error);\r\n      }\r\n    },\r\n\r\n    // 新增：优化Y轴范围方法\r\n    optimizeYAxisRange() {\r\n      const allDistances = this.distanceChartSeries.flatMap(series => \r\n        series.data.map(point => point.y)\r\n      );\r\n      \r\n      if (allDistances.length > 0) {\r\n        const maxDistance = Math.max(...allDistances);\r\n        const minDistance = Math.min(...allDistances);\r\n        const range = maxDistance - minDistance;\r\n        \r\n        // 只有当范围足够小时才调整Y轴，避免频繁变化\r\n        if (range < maxDistance * 0.5) {\r\n          const padding = range * 0.2; // 20%的上下边距\r\n          this.chartInstance.updateOptions({\r\n            yaxis: {\r\n              min: Math.max(0, minDistance - padding),\r\n              max: maxDistance + padding,\r\n              labels: { \r\n                formatter: (val) => val.toFixed(1)\r\n              }\r\n            }\r\n          }, false, true);\r\n        }\r\n      }\r\n    },\r\n    \r\n    calculateDistance(pos1, pos2) {\r\n      return Math.sqrt(\r\n        Math.pow(pos1[0] - pos2[0], 2) + \r\n        Math.pow(pos1[1] - pos2[1], 2)\r\n      );\r\n    }\r\n  },\r\n  watch: {\r\n    hunters: {\r\n      handler(newHunters) {\r\n        if (!this.chartInitialized && newHunters.length > 0) {\r\n          this.initChart();\r\n        } else if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    targets: {\r\n      handler() {\r\n        if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    stepCount: {\r\n      handler() {\r\n        if (this.chartInitialized && this.chartInstance) {\r\n          this.updateChart();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.hunter-chart-card {\r\n  margin-bottom: 8px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.chart-title {\r\n  font-size: 1rem;\r\n  padding: 8px 12px !important;\r\n  min-height: 32px !important;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.chart-content {\r\n  padding: 8px !important;\r\n}\r\n\r\n.chart-container {\r\n  width: 100%;\r\n  height: 240px;\r\n  position: relative;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 0 2px rgba(0,0,0,0.1) inset;\r\n}\r\n\r\n.chart-placeholder {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  background-color: rgba(249, 249, 249, 0.7);\r\n  z-index: 1;\r\n}\r\n</style>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAcA;EACAA,IAAA;EACAC,KAAA;IACAC,OAAA;MACAC,IAAA,EAAAC,KAAA;MACA,oBAAAC,SAAA;QAAA;MAAA;IACA;IACAC,OAAA;MACAH,IAAA,EAAAC,KAAA;MACA,oBAAAC,SAAA;QAAA;MAAA;IACA;IACAE,SAAA;MACAJ,IAAA,EAAAK,MAAA;MACA;IACA;IACAC,SAAA;MACAN,IAAA,EAAAO,OAAA;MACA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,aAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,mBAAA;MACAC,cAAA;MACAC,aAAA;MACAC,gBAAA;MACAC,eAAA;MACAC,oBAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,aAAA,WAAAA,cAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACAH,SAAA,WAAAA,UAAA;MAAA,IAAAI,KAAA;MACA,KAAAb,YAAA;;MAEA;MACA,SAAAZ,OAAA,CAAA0B,MAAA;QACA,KAAAb,mBAAA,QAAAb,OAAA,CAAA2B,GAAA,WAAAC,MAAA,EAAAC,KAAA;UAAA;YACA/B,IAAA,kBAAAgC,MAAA,CAAAF,MAAA,CAAAG,EAAA;YACAtB,IAAA;YACAuB,KAAA,EAAAP,KAAA,CAAAN,YAAA,CAAAU,KAAA,GAAAJ,KAAA,CAAAN,YAAA,CAAAO,MAAA;UACA;QAAA;QAEA,KAAA1B,OAAA,CAAAiC,OAAA,WAAAL,MAAA;UACAH,KAAA,CAAAX,cAAA,CAAAc,MAAA,CAAAG,EAAA;QACA;QAEA,KAAAG,SAAA;UACAC,UAAA;YACAV,KAAA,CAAAW,mBAAA;UACA;QACA;MACA;QACA,KAAAxB,YAAA;MACA;IACA;IAEAwB,mBAAA,WAAAA,oBAAA;MAAA,IAAAC,MAAA;MACA;QACA;QACA,KAAAd,YAAA;;QAEA;QACA,IAAAe,SAAA,GAAAC,QAAA,CAAAC,cAAA;QACA,KAAAF,SAAA;UACAG,OAAA,CAAAC,KAAA;UACA;QACA;;QAEA;QACA,qBAAAC,IAAA,WAAAC,UAAA;UACAP,MAAA,CAAA3B,aAAA,OAAAkC,UAAA,YACAN,SAAA,EACA;YACAO,KAAA;cACA5C,IAAA;cACA6C,MAAA;cAAA;cACAC,UAAA;gBAAAC,OAAA;cAAA;cACAC,OAAA;gBAAAC,IAAA;cAAA;cAAA;cACAC,UAAA;cACAC,UAAA;cACAC,IAAA;gBAAAL,OAAA;cAAA;YACA;YACAM,KAAA;cACArD,IAAA;cACAsD,KAAA;gBAAAC,IAAA;gBAAAC,KAAA;kBAAAC,QAAA;kBAAAC,UAAA;gBAAA;cAAA;cACAC,MAAA;gBACAC,SAAA,WAAAA,UAAAC,GAAA;kBAAA,OAAAC,IAAA,CAAAC,KAAA,CAAAF,GAAA;gBAAA;gBACAL,KAAA;kBAAAC,QAAA;gBAAA;cACA;cACAO,UAAA;YACA;YACAC,KAAA;cACAX,KAAA;gBACAC,IAAA;gBACAC,KAAA;kBAAAC,QAAA;kBAAAC,UAAA;gBAAA;cACA;cACAQ,GAAA;cAAA;cACAP,MAAA;gBACAH,KAAA;kBAAAC,QAAA;gBAAA;gBACAG,SAAA,WAAAA,UAAAC,GAAA;kBAAA,OAAAA,GAAA,CAAAM,OAAA;gBAAA;cACA;cACAH,UAAA;YACA;YACAI,MAAA,EAAAhC,MAAA,CAAAlB,YAAA;YACAmD,MAAA;cACAC,KAAA;cAAA;cACAC,KAAA;cAAA;cACAC,OAAA;YACA;YACAC,OAAA;cACAC,IAAA;cAAA;cACAC,WAAA;cACAC,KAAA;gBAAAF,IAAA;cAAA;YACA;YACAG,OAAA;cACAC,CAAA;gBAAAxB,KAAA;kBAAAM,SAAA,WAAAA,UAAA;oBAAA;kBAAA;gBAAA;cAAA;cACAmB,CAAA;gBAAAnB,SAAA,WAAAA,UAAAC,GAAA;kBAAA,UAAAhC,MAAA,CAAAgC,GAAA,CAAAM,OAAA;gBAAA;cAAA;YACA;YACAa,MAAA;cACAC,QAAA;cACAC,eAAA;cACAzB,QAAA;cACAC,UAAA;cACAe,OAAA;gBAAAC,IAAA;gBAAAC,WAAA;cAAA;YACA;YACAQ,IAAA;cACAC,WAAA;cACAC,GAAA;gBAAAjB,MAAA;gBAAAkB,OAAA;cAAA;YACA;YACAC,MAAA,EAAAnD,MAAA,CAAAxB,mBAAA;YACA4E,MAAA;cACAjC,IAAA;cACAkC,KAAA;cACAC,aAAA;cACAlC,KAAA;gBACAC,QAAA;cACA;YACA;UACA,CACA;UAEArB,MAAA,CAAA3B,aAAA,CAAAkF,MAAA,GAAAjD,IAAA;YACAF,OAAA,CAAAoD,GAAA;YACAxD,MAAA,CAAA1B,gBAAA;YACA0B,MAAA,CAAAzB,YAAA;UACA,sBAAAkF,GAAA;YACArD,OAAA,CAAAC,KAAA,YAAAoD,GAAA;YACAzD,MAAA,CAAAzB,YAAA;UACA;QACA,sBAAAkF,GAAA;UACArD,OAAA,CAAAC,KAAA,qBAAAoD,GAAA;UACAzD,MAAA,CAAAzB,YAAA;QACA;MACA,SAAA8B,KAAA;QACAD,OAAA,CAAAC,KAAA,cAAAA,KAAA;QACA,KAAA9B,YAAA;MACA;IACA;IAEAW,YAAA,WAAAA,aAAA;MACA,SAAAb,aAAA;QACA;UACA,KAAAA,aAAA,CAAAqF,OAAA;UACA,KAAArF,aAAA;QACA,SAAAsF,CAAA;UACAvD,OAAA,CAAAC,KAAA,cAAAsD,CAAA;QACA;MACA;MAEA,SAAAhF,gBAAA;QACAiF,YAAA,MAAAjF,gBAAA;QACA,KAAAA,gBAAA;MACA;IACA;IAEAkF,WAAA,WAAAA,YAAA;MAAA,IAAAC,MAAA;MACA,IAAAC,GAAA,GAAAC,WAAA,CAAAD,GAAA;MACA,IAAAE,mBAAA,GAAAF,GAAA,QAAAnF,eAAA;;MAEA;MACA,SAAAC,oBAAA,SAAAX,SAAA,IAAA+F,mBAAA;QACA,UAAAtF,gBAAA;UACA,KAAAA,gBAAA,GAAAmB,UAAA;YACAgE,MAAA,CAAAI,eAAA;YACAJ,MAAA,CAAAnF,gBAAA;YACAmF,MAAA,CAAAlF,eAAA,GAAAoF,WAAA,CAAAD,GAAA;UACA,SAAAE,mBAAA;QACA;MACA;QACA;QACA,SAAAtF,gBAAA;UACAiF,YAAA,MAAAjF,gBAAA;UACA,KAAAA,gBAAA;QACA;QACA,KAAAuF,eAAA;QACA,KAAAtF,eAAA,GAAAmF,GAAA;MACA;MACA;MACA,SAAAI,UAAA,UAAAjG,SAAA;QACA;QACA,KAAAgG,eAAA;;QAEA;QACA,IAAAE,SAAA;UACAC,YAAA,OAAAC,MAAA,CAAAC,MAAA,CAAA7E,EAAA;UACA8E,SAAA,EAAAC,IAAA,CAAAC,SAAA,MAAAlG,mBAAA;UACAR,SAAA,OAAAA,SAAA;UACA2G,SAAA,MAAAC,IAAA,GAAAC,OAAA;QACA;QACAC,YAAA,CAAAC,OAAA,0BAAAN,IAAA,CAAAC,SAAA,CAAAN,SAAA;MACA;IACA;IAEAF,eAAA,WAAAA,gBAAA;MAAA,IAAAc,MAAA;MACA;QACA,UAAA1G,gBAAA,UAAAD,aAAA,IACA,MAAAV,OAAA,CAAA0B,MAAA,UAAAtB,OAAA,CAAAsB,MAAA;UACA;QACA;QAEA,IAAA4F,MAAA,QAAAlH,OAAA;QACA,KAAAkH,MAAA,KAAAA,MAAA,CAAApC,QAAA;;QAEA;QACA,IAAAqC,WAAA;QAEA,KAAAvH,OAAA,CAAAiC,OAAA,WAAAL,MAAA,EAAAC,KAAA;UACA;UACA,KAAAD,MAAA,KAAAA,MAAA,CAAAsD,QAAA;;UAEA;UACA,IAAAsC,QAAA,GAAAH,MAAA,CAAAI,iBAAA,CAAA7F,MAAA,CAAAsD,QAAA,EAAAoC,MAAA,CAAApC,QAAA;UAEA,KAAAmC,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA;YACAsF,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA;UACA;;UAEA;UACAsF,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA,EAAA2F,IAAA;YACA3C,CAAA,EAAAsC,MAAA,CAAAhH,SAAA;YACA2E,CAAA,EAAAjB,IAAA,CAAA4D,KAAA,CAAAH,QAAA;UACA;;UAEA;UACA,IAAAH,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA,EAAAL,MAAA,GAAA2F,MAAA,CAAAtG,aAAA;YACA,IAAA6G,UAAA,GAAAP,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA;YACA,IAAA8F,UAAA,GAAAR,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA,EAAA+F,KAAA,EAAAT,MAAA,CAAAtG,aAAA;YACAsG,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA,KAAA6F,UAAA,EAAA9F,MAAA,CAAAiG,kBAAA,CAAAF,UAAA;UACA;;UAEA;UACA,IAAAhG,KAAA,GAAAwF,MAAA,CAAAxG,mBAAA,CAAAa,MAAA;YACA2F,MAAA,CAAAxG,mBAAA,CAAAgB,KAAA,EAAApB,IAAA,GAAAsH,kBAAA,CAAAV,MAAA,CAAAvG,cAAA,CAAAc,MAAA,CAAAG,EAAA;YACAwF,WAAA;UACA;QACA;;QAEA;QACA,IAAAA,WAAA,SAAA7G,aAAA;UACA,KAAAA,aAAA,CAAAsH,YAAA,MAAAnH,mBAAA;;UAEA;UACA,KAAAoH,kBAAA;QACA;MACA,SAAAvF,KAAA;QACAD,OAAA,CAAAC,KAAA,cAAAA,KAAA;MACA;IACA;IAEA;IACAuF,kBAAA,WAAAA,mBAAA;MACA,IAAAC,YAAA,QAAArH,mBAAA,CAAAsH,OAAA,WAAA3C,MAAA;QAAA,OACAA,MAAA,CAAA/E,IAAA,CAAAkB,GAAA,WAAAyG,KAAA;UAAA,OAAAA,KAAA,CAAApD,CAAA;QAAA;MAAA,CACA;MAEA,IAAAkD,YAAA,CAAAxG,MAAA;QACA,IAAA2G,WAAA,GAAAtE,IAAA,CAAAuE,GAAA,CAAAC,KAAA,CAAAxE,IAAA,EAAAgE,kBAAA,CAAAG,YAAA;QACA,IAAAM,WAAA,GAAAzE,IAAA,CAAAI,GAAA,CAAAoE,KAAA,CAAAxE,IAAA,EAAAgE,kBAAA,CAAAG,YAAA;QACA,IAAAO,KAAA,GAAAJ,WAAA,GAAAG,WAAA;;QAEA;QACA,IAAAC,KAAA,GAAAJ,WAAA;UACA,IAAAK,OAAA,GAAAD,KAAA;UACA,KAAA/H,aAAA,CAAAiI,aAAA;YACAzE,KAAA;cACAC,GAAA,EAAAJ,IAAA,CAAAuE,GAAA,IAAAE,WAAA,GAAAE,OAAA;cACAJ,GAAA,EAAAD,WAAA,GAAAK,OAAA;cACA9E,MAAA;gBACAC,SAAA,WAAAA,UAAAC,GAAA;kBAAA,OAAAA,GAAA,CAAAM,OAAA;gBAAA;cACA;YACA;UACA;QACA;MACA;IACA;IAEAqD,iBAAA,WAAAA,kBAAAmB,IAAA,EAAAC,IAAA;MACA,OAAA9E,IAAA,CAAA+E,IAAA,CACA/E,IAAA,CAAAgF,GAAA,CAAAH,IAAA,MAAAC,IAAA,UACA9E,IAAA,CAAAgF,GAAA,CAAAH,IAAA,MAAAC,IAAA,OACA;IACA;EACA;EACAG,KAAA;IACAhJ,OAAA;MACAiJ,OAAA,WAAAA,QAAAC,UAAA;QACA,UAAAvI,gBAAA,IAAAuI,UAAA,CAAAxH,MAAA;UACA,KAAAL,SAAA;QACA,gBAAAV,gBAAA,SAAAD,aAAA;UACA,KAAAwF,WAAA;QACA;MACA;MACAiD,IAAA;IACA;IAEA/I,OAAA;MACA6I,OAAA,WAAAA,QAAA;QACA,SAAAtI,gBAAA,SAAAD,aAAA;UACA,KAAAwF,WAAA;QACA;MACA;MACAiD,IAAA;IACA;IAEA9I,SAAA;MACA4I,OAAA,WAAAA,QAAA;QACA,SAAAtI,gBAAA,SAAAD,aAAA;UACA,KAAAwF,WAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}