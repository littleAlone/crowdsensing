{"ast":null,"code":"import _createForOfIteratorHelper from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'SimulationCanvas',\n  props: {\n    hunters: {\n      type: Array,\n      required: true\n    },\n    targets: {\n      type: Array,\n      required: true\n    },\n    environmentSize: {\n      type: Number,\n      \"default\": 500\n    },\n    isRunning: {\n      type: Boolean,\n      \"default\": false\n    },\n    isCaptured: {\n      type: Boolean,\n      \"default\": false\n    },\n    showTrails: {\n      type: Boolean,\n      \"default\": true\n    },\n    showVisionRange: {\n      type: Boolean,\n      \"default\": false\n    },\n    showCommunicationRange: {\n      type: Boolean,\n      \"default\": false\n    },\n    // 新增:障碍物属性\n    obstacles: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      canvasSize: 600,\n      canvas: null,\n      ctx: null,\n      scale: 1,\n      colorMap: {\n        hunter: '#3f51b5',\n        // 蓝色\n        target: '#f44336',\n        // 红色\n        vision: 'rgba(63, 81, 181, 0.1)',\n        // 半透明蓝色\n        communication: 'rgba(63, 81, 181, 0.05)',\n        // 更透明的蓝色\n        trail: 'rgba(63, 81, 181, 0.5)',\n        // 半透明蓝色\n        captureRange: 'rgba(76, 175, 80, 0.3)',\n        // 半透明绿色\n        captured: 'rgba(244, 67, 54, 0.3)',\n        // 半透明红色\n        obstacle: 'rgba(95, 95, 95, 0.7)' // 障碍物颜色\n      },\n      // 新增：跟踪之前的位置，用于优化渲染\n      previousPositions: {\n        hunters: [],\n        targets: []\n      },\n      // 防抖渲染计时器\n      renderTimer: null,\n      // 帧率控制\n      lastRenderTime: 0,\n      targetFPS: 30,\n      // 渲染计数，用于降低非必要渲染的频率\n      renderCount: 0\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n    this.drawSimulation();\n\n    // 添加窗口大小变化监听\n    window.addEventListener('resize', this.handleResize);\n\n    // 使用requestAnimationFrame实现高效渲染循环\n    this.startRenderLoop();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // 清理事件监听器\n    window.removeEventListener('resize', this.handleResize);\n\n    // 停止渲染循环\n    this.stopRenderLoop();\n\n    // 清理计时器\n    if (this.renderTimer) {\n      clearTimeout(this.renderTimer);\n    }\n  },\n  methods: {\n    // 初始化画布\n    initCanvas: function initCanvas() {\n      this.canvas = this.$refs.canvas;\n      this.ctx = this.canvas.getContext('2d');\n      this.scale = this.canvasSize / this.environmentSize;\n\n      // 初始化previousPositions\n      this.updatePreviousPositions();\n    },\n    // 处理窗口大小变化\n    handleResize: function handleResize() {\n      var _this = this;\n      // 防抖处理\n      if (this.renderTimer) {\n        clearTimeout(this.renderTimer);\n      }\n      this.renderTimer = setTimeout(function () {\n        // 重新计算画布大小（可选，如果需要响应式调整画布大小）\n        // this.canvasSize = Math.min(window.innerWidth * 0.7, 600);\n        _this.scale = _this.canvasSize / _this.environmentSize;\n        _this.drawSimulation(true); // 强制完全重绘\n      }, 200);\n    },\n    // 启动渲染循环\n    startRenderLoop: function startRenderLoop() {\n      if (!this.animationFrameId) {\n        this.lastRenderTime = performance.now();\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\n      }\n    },\n    // 停止渲染循环\n    stopRenderLoop: function stopRenderLoop() {\n      if (this.animationFrameId) {\n        cancelAnimationFrame(this.animationFrameId);\n        this.animationFrameId = null;\n      }\n    },\n    // 渲染循环\n    renderLoop: function renderLoop(timestamp) {\n      // 计算每帧的时间间隔\n      var elapsed = timestamp - this.lastRenderTime;\n      var frameTime = 1000 / this.targetFPS;\n\n      // 如果时间间隔足够，执行渲染\n      if (elapsed >= frameTime) {\n        this.lastRenderTime = timestamp;\n\n        // 检查位置是否有变化，有变化时才渲染\n        if (this.hasPositionsChanged() || this.isRunning) {\n          this.drawOptimizedSimulation();\n          this.updatePreviousPositions();\n        }\n      }\n\n      // 继续循环\n      this.animationFrameId = requestAnimationFrame(this.renderLoop);\n    },\n    // 检查位置是否有变化\n    hasPositionsChanged: function hasPositionsChanged() {\n      // 优化：快速检查数组长度变化\n      if (this.hunters.length !== this.previousPositions.hunters.length || this.targets.length !== this.previousPositions.targets.length) {\n        return true;\n      }\n\n      // 检查运行状态变化\n      if (this.isRunning !== this.previousIsRunning || this.isCaptured !== this.previousIsCaptured) {\n        this.previousIsRunning = this.isRunning;\n        this.previousIsCaptured = this.isCaptured;\n        return true;\n      }\n\n      // 渲染计数，每5帧强制完全重绘一次（避免累积误差）\n      this.renderCount++;\n      if (this.renderCount >= 5) {\n        this.renderCount = 0;\n        return true;\n      }\n\n      // 只有在运行中或首次渲染时，才进行位置变化检查\n      if (!this.isRunning && this.previousPositions.hunters.length > 0) {\n        return false;\n      }\n\n      // 智能体位置变化检测\n      var threshold = 0.5; // 位置变化阈值\n\n      // 检查猎手位置变化\n      for (var i = 0; i < this.hunters.length; i++) {\n        var hunter = this.hunters[i];\n        var prevHunter = this.previousPositions.hunters[i];\n        if (!prevHunter) return true;\n        if (Math.abs(hunter.position[0] - prevHunter.position[0]) > threshold || Math.abs(hunter.position[1] - prevHunter.position[1]) > threshold) {\n          return true;\n        }\n      }\n\n      // 检查目标位置变化\n      for (var _i = 0; _i < this.targets.length; _i++) {\n        var target = this.targets[_i];\n        var prevTarget = this.previousPositions.targets[_i];\n        if (!prevTarget) return true;\n        if (Math.abs(target.position[0] - prevTarget.position[0]) > threshold || Math.abs(target.position[1] - prevTarget.position[1]) > threshold) {\n          return true;\n        }\n      }\n      return false;\n    },\n    // 更新之前的位置\n    updatePreviousPositions: function updatePreviousPositions() {\n      // 深拷贝位置数据\n      this.previousPositions.hunters = this.hunters.map(function (hunter) {\n        return {\n          id: hunter.id,\n          position: _toConsumableArray(hunter.position)\n        };\n      });\n      this.previousPositions.targets = this.targets.map(function (target) {\n        return {\n          id: target.id,\n          position: _toConsumableArray(target.position)\n        };\n      });\n    },\n    // 优化的绘制方法\n    drawOptimizedSimulation: function drawOptimizedSimulation() {\n      var _this2 = this;\n      if (!this.ctx) return;\n\n      // 清除画布\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n      this.drawBackground();\n\n      // 绘制环境边界\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\n\n      // 绘制障碍物\n      this.drawObstacles();\n\n      // 绘制捕获状态\n      if (this.isCaptured) {\n        this.ctx.fillStyle = this.colorMap.captured;\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.font = 'bold 32px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2);\n      }\n\n      // 绘制轨迹（如果启用）\n      if (this.showTrails) {\n        this.drawTrails();\n      }\n\n      // 绘制视野和通信范围（如果启用）\n      if (this.showVisionRange || this.showCommunicationRange) {\n        this.drawRanges();\n      }\n\n      // 绘制猎手\n      this.hunters.forEach(function (hunter) {\n        _this2.drawHunter(hunter);\n      });\n\n      // 绘制目标\n      this.targets.forEach(function (target) {\n        _this2.drawAgent(target, 'target');\n      });\n    },\n    // 绘制障碍物\n    drawObstacles: function drawObstacles() {\n      if (!this.obstacles || !this.obstacles.length) return;\n      var _iterator = _createForOfIteratorHelper(this.obstacles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var obstacle = _step.value;\n          var pos = this.transformPosition(obstacle.position);\n          var radius = obstacle.radius * this.scale;\n\n          // 创建渐变效果\n          var gradient = this.ctx.createRadialGradient(pos.x, pos.y, radius * 0.2, pos.x, pos.y, radius);\n          gradient.addColorStop(0, 'rgba(90, 90, 100, 0.9)');\n          gradient.addColorStop(0.7, 'rgba(70, 70, 85, 0.85)');\n          gradient.addColorStop(1, 'rgba(50, 50, 65, 0.8)');\n\n          // 绘制主体\n          this.ctx.beginPath();\n          this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\n          this.ctx.fillStyle = gradient;\n          this.ctx.fill();\n\n          // 添加边缘光晕效果\n          this.ctx.strokeStyle = 'rgba(120, 120, 140, 0.5)';\n          this.ctx.lineWidth = 2;\n          this.ctx.stroke();\n\n          // 添加内部纹理\n          this.drawObstacleTexture(pos.x, pos.y, radius);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    drawObstacleTexture: function drawObstacleTexture(x, y, radius) {\n      // 随机生成内部小圆点\n      var dotsCount = Math.floor(radius / 4);\n      this.ctx.fillStyle = 'rgba(40, 40, 55, 0.5)';\n      for (var i = 0; i < dotsCount; i++) {\n        var angle = Math.random() * Math.PI * 2;\n        var distance = Math.random() * radius * 0.8;\n        var dotX = x + Math.cos(angle) * distance;\n        var dotY = y + Math.sin(angle) * distance;\n        var dotSize = Math.random() * 3 + 1;\n        this.ctx.beginPath();\n        this.ctx.arc(dotX, dotY, dotSize, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    },\n    drawBackground: function drawBackground() {\n      var gridSize = 25 * this.scale;\n      var width = this.canvasSize;\n      var height = this.canvasSize;\n      this.ctx.strokeStyle = 'rgba(200, 200, 220, 0.2)';\n      this.ctx.lineWidth = 1;\n\n      // 绘制网格线\n      for (var x = 0; x <= width; x += gridSize) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x, 0);\n        this.ctx.lineTo(x, height);\n        this.ctx.stroke();\n      }\n      for (var y = 0; y <= height; y += gridSize) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, y);\n        this.ctx.lineTo(width, y);\n        this.ctx.stroke();\n      }\n\n      // 添加坐标轴\n      this.ctx.strokeStyle = 'rgba(150, 150, 180, 0.4)';\n      this.ctx.lineWidth = 2;\n\n      // x轴\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, height / 2);\n      this.ctx.lineTo(width, height / 2);\n      this.ctx.stroke();\n\n      // y轴\n      this.ctx.beginPath();\n      this.ctx.moveTo(width / 2, 0);\n      this.ctx.lineTo(width / 2, height);\n      this.ctx.stroke();\n    },\n    // 完整重绘方法\n    drawSimulation: function drawSimulation() {\n      var _this3 = this;\n      var forceFullRedraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.ctx) return;\n\n      // 如果不需要强制重绘，使用优化版本\n      if (!forceFullRedraw && this.previousPositions.hunters.length > 0) {\n        return this.drawOptimizedSimulation();\n      }\n\n      // 清除画布\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n      this.drawBackground();\n\n      // 绘制环境边界\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\n\n      // 绘制障碍物\n      this.drawObstacles();\n\n      // 绘制捕获状态\n      if (this.isCaptured) {\n        this.ctx.fillStyle = this.colorMap.captured;\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.font = 'bold 32px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2);\n      }\n\n      // 绘制轨迹（如果启用）\n      if (this.showTrails) {\n        this.drawTrails();\n      }\n\n      // 绘制视野和通信范围（如果启用）\n      if (this.showVisionRange || this.showCommunicationRange) {\n        this.drawRanges();\n      }\n\n      // 绘制猎手\n      this.hunters.forEach(function (hunter) {\n        _this3.drawHunter(hunter);\n      });\n\n      // 绘制目标\n      this.targets.forEach(function (target) {\n        _this3.drawAgent(target, 'target');\n      });\n\n      // 更新之前的位置\n      this.updatePreviousPositions();\n      this.previousIsRunning = this.isRunning;\n      this.previousIsCaptured = this.isCaptured;\n    },\n    // 单独绘制猎手，根据角色不同使用不同样式\n    drawHunter: function drawHunter(hunter) {\n      var pos = this.transformPosition(hunter.position);\n\n      // 绘制猎手\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, style.size, 0, Math.PI * 2);\n      this.ctx.fillStyle = this.colorMap.hunter;\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n\n      // 绘制ID标签\n      this.ctx.font = '10px Arial';\n      this.ctx.fillStyle = '#000';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(hunter.id.toString(), pos.x, pos.y + 15);\n\n      // 可选：显示角色名称\n      if (role !== 'standard') {\n        this.ctx.font = '8px Arial';\n        this.ctx.fillStyle = '#333';\n        this.ctx.fillText(role.substring(0, 1).toUpperCase(), pos.x, pos.y - 10);\n      }\n    },\n    // 单独绘制轨迹\n    drawTrails: function drawTrails() {\n      var _this4 = this;\n      // 绘制猎手轨迹\n      this.hunters.forEach(function (hunter) {\n        if (hunter.history && hunter.history.length > 1) {\n          _this4.ctx.beginPath();\n          var startPos = _this4.transformPosition(hunter.history[0]);\n          _this4.ctx.moveTo(startPos.x, startPos.y);\n\n          // 获取猎手角色和对应的样式\n          var _role = hunter.role || 'standard';\n          var _style = _this4.roleStyles[_role] || _this4.roleStyles.standard;\n          for (var i = 1; i < hunter.history.length; i++) {\n            var histPos = _this4.transformPosition(hunter.history[i]);\n            _this4.ctx.lineTo(histPos.x, histPos.y);\n          }\n          _this4.ctx.strokeStyle = _style.color;\n          _this4.ctx.lineWidth = 1;\n          _this4.ctx.stroke();\n        }\n      });\n\n      // 绘制目标轨迹\n      this.targets.forEach(function (target) {\n        if (target.history && target.history.length > 1) {\n          _this4.ctx.beginPath();\n          var startPos = _this4.transformPosition(target.history[0]);\n          _this4.ctx.moveTo(startPos.x, startPos.y);\n          for (var i = 1; i < target.history.length; i++) {\n            var histPos = _this4.transformPosition(target.history[i]);\n            _this4.ctx.lineTo(histPos.x, histPos.y);\n          }\n          _this4.ctx.strokeStyle = _this4.colorMap.target;\n          _this4.ctx.lineWidth = 1;\n          _this4.ctx.stroke();\n        }\n      });\n    },\n    // 单独绘制视野和通信范围\n    drawRanges: function drawRanges() {\n      var _this5 = this;\n      // 绘制猎手视野和通信范围\n      this.hunters.forEach(function (hunter) {\n        var pos = _this5.transformPosition(hunter.position);\n\n        // 绘制视野范围\n        if (_this5.showVisionRange) {\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, hunter.vision_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = _this5.colorMap.vision;\n          _this5.ctx.fill();\n        }\n\n        // 绘制通信范围\n        if (_this5.showCommunicationRange) {\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, hunter.communication_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = _this5.colorMap.communication;\n          _this5.ctx.fill();\n        }\n\n        // 绘制捕获范围\n        _this5.ctx.beginPath();\n        _this5.ctx.arc(pos.x, pos.y, 10 * _this5.scale, 0, Math.PI * 2); // 捕获范围固定为10\n        _this5.ctx.fillStyle = _this5.colorMap.captureRange;\n        _this5.ctx.fill();\n      });\n\n      // 绘制目标视野范围\n      this.targets.forEach(function (target) {\n        if (_this5.showVisionRange) {\n          var pos = _this5.transformPosition(target.position);\n          _this5.ctx.beginPath();\n          _this5.ctx.arc(pos.x, pos.y, target.vision_range * _this5.scale, 0, Math.PI * 2);\n          _this5.ctx.fillStyle = 'rgba(244, 67, 54, 0.1)'; // 半透明红色\n          _this5.ctx.fill();\n        }\n      });\n    },\n    // 绘制智能体\n    drawAgent: function drawAgent(agent, type) {\n      var pos = this.transformPosition(agent.position);\n\n      // 绘制智能体\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, type === 'hunter' ? 5 : 7, 0, Math.PI * 2);\n      this.ctx.fillStyle = this.colorMap[type];\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n\n      // 绘制ID标签\n      this.ctx.font = '10px Arial';\n      this.ctx.fillStyle = '#000';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(agent.id.toString(), pos.x, pos.y + (type === 'hunter' ? 15 : 20));\n    },\n    // 转换坐标\n    transformPosition: function transformPosition(position) {\n      // 将模拟坐标转换为画布坐标\n      return {\n        x: position[0] * this.scale,\n        y: position[1] * this.scale\n      };\n    },\n    // 清除特定区域\n    clearAgentArea: function clearAgentArea(position) {\n      var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n      var pos = this.transformPosition(position);\n      this.ctx.clearRect(pos.x - radius, pos.y - radius, radius * 2, radius * 2);\n    }\n  },\n  watch: {\n    hunters: {\n      handler: function handler() {\n        var _this6 = this;\n        // 使用防抖处理，避免频繁重绘\n        if (this.renderTimer) {\n          clearTimeout(this.renderTimer);\n        }\n        this.renderTimer = setTimeout(function () {\n          _this6.drawOptimizedSimulation();\n        }, 50);\n      },\n      deep: true\n    },\n    targets: {\n      handler: function handler() {\n        var _this7 = this;\n        // 使用防抖处理，避免频繁重绘\n        if (this.renderTimer) {\n          clearTimeout(this.renderTimer);\n        }\n        this.renderTimer = setTimeout(function () {\n          _this7.drawOptimizedSimulation();\n        }, 50);\n      },\n      deep: true\n    },\n    // 添加对obstacles的监听\n    obstacles: {\n      handler: function handler() {\n        this.drawSimulation(true); // 强制完全重绘\n      },\n      deep: true\n    },\n    isRunning: function isRunning(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    isCaptured: function isCaptured(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showTrails: function showTrails(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showVisionRange: function showVisionRange(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    showCommunicationRange: function showCommunicationRange(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.drawSimulation();\n      }\n    },\n    environmentSize: function environmentSize() {\n      this.scale = this.canvasSize / this.environmentSize;\n      this.drawSimulation(true); // 强制完全重绘\n    },\n    // 获取simulation对象\n    '$parent.simulation': {\n      handler: function handler(newVal) {\n        if (newVal) {\n          this.simulation = newVal;\n          this.drawSimulation(true);\n        }\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["name","props","hunters","type","Array","required","targets","environmentSize","Number","isRunning","Boolean","isCaptured","showTrails","showVisionRange","showCommunicationRange","obstacles","default","data","canvasSize","canvas","ctx","scale","colorMap","hunter","target","vision","communication","trail","captureRange","captured","obstacle","previousPositions","renderTimer","lastRenderTime","targetFPS","renderCount","mounted","initCanvas","drawSimulation","window","addEventListener","handleResize","startRenderLoop","beforeDestroy","removeEventListener","stopRenderLoop","clearTimeout","methods","$refs","getContext","updatePreviousPositions","_this","setTimeout","animationFrameId","performance","now","requestAnimationFrame","renderLoop","cancelAnimationFrame","timestamp","elapsed","frameTime","hasPositionsChanged","drawOptimizedSimulation","length","previousIsRunning","previousIsCaptured","threshold","i","prevHunter","Math","abs","position","prevTarget","map","id","_toConsumableArray","_this2","clearRect","drawBackground","strokeStyle","lineWidth","strokeRect","drawObstacles","fillStyle","fillRect","font","textAlign","fillText","drawTrails","drawRanges","forEach","drawHunter","drawAgent","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","pos","transformPosition","radius","gradient","createRadialGradient","x","y","addColorStop","beginPath","arc","PI","fill","stroke","drawObstacleTexture","err","e","f","dotsCount","floor","angle","random","distance","dotX","cos","dotY","sin","dotSize","gridSize","width","height","moveTo","lineTo","_this3","forceFullRedraw","arguments","undefined","style","size","toString","role","substring","toUpperCase","_this4","history","startPos","roleStyles","standard","histPos","color","_this5","vision_range","communication_range","agent","clearAgentArea","watch","handler","_this6","deep","_this7","newVal","oldVal","simulation"],"sources":["src/components/SimulationCanvas.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-canvas\">\r\n    <canvas \r\n      ref=\"canvas\" \r\n      :width=\"canvasSize\" \r\n      :height=\"canvasSize\" \r\n      class=\"simulation-canvas__area\"\r\n    ></canvas>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n  name: 'SimulationCanvas',\r\n  props: {\r\n    hunters: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    targets: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    environmentSize: {\r\n      type: Number,\r\n      default: 500\r\n    },\r\n    isRunning: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isCaptured: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showTrails: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    showVisionRange: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showCommunicationRange: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 新增:障碍物属性\r\n    obstacles: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      canvasSize: 600,\r\n      canvas: null,\r\n      ctx: null,\r\n      scale: 1,\r\n      colorMap: {\r\n        hunter: '#3f51b5', // 蓝色\r\n        target: '#f44336', // 红色\r\n        vision: 'rgba(63, 81, 181, 0.1)', // 半透明蓝色\r\n        communication: 'rgba(63, 81, 181, 0.05)', // 更透明的蓝色\r\n        trail: 'rgba(63, 81, 181, 0.5)', // 半透明蓝色\r\n        captureRange: 'rgba(76, 175, 80, 0.3)', // 半透明绿色\r\n        captured: 'rgba(244, 67, 54, 0.3)', // 半透明红色\r\n        obstacle: 'rgba(95, 95, 95, 0.7)' // 障碍物颜色\r\n      },\r\n      // 新增：跟踪之前的位置，用于优化渲染\r\n      previousPositions: {\r\n        hunters: [],\r\n        targets: []\r\n      },\r\n      // 防抖渲染计时器\r\n      renderTimer: null,\r\n      // 帧率控制\r\n      lastRenderTime: 0,\r\n      targetFPS: 30,\r\n      // 渲染计数，用于降低非必要渲染的频率\r\n      renderCount: 0\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initCanvas();\r\n    this.drawSimulation();\r\n    \r\n    // 添加窗口大小变化监听\r\n    window.addEventListener('resize', this.handleResize);\r\n    \r\n    // 使用requestAnimationFrame实现高效渲染循环\r\n    this.startRenderLoop();\r\n  },\r\n  beforeDestroy() {\r\n    // 清理事件监听器\r\n    window.removeEventListener('resize', this.handleResize);\r\n    \r\n    // 停止渲染循环\r\n    this.stopRenderLoop();\r\n    \r\n    // 清理计时器\r\n    if (this.renderTimer) {\r\n      clearTimeout(this.renderTimer);\r\n    }\r\n  },\r\n  methods: {\r\n    // 初始化画布\r\n    initCanvas() {\r\n      this.canvas = this.$refs.canvas;\r\n      this.ctx = this.canvas.getContext('2d');\r\n      this.scale = this.canvasSize / this.environmentSize;\r\n      \r\n      // 初始化previousPositions\r\n      this.updatePreviousPositions();\r\n    },\r\n    \r\n    // 处理窗口大小变化\r\n    handleResize() {\r\n      // 防抖处理\r\n      if (this.renderTimer) {\r\n        clearTimeout(this.renderTimer);\r\n      }\r\n      \r\n      this.renderTimer = setTimeout(() => {\r\n        // 重新计算画布大小（可选，如果需要响应式调整画布大小）\r\n        // this.canvasSize = Math.min(window.innerWidth * 0.7, 600);\r\n        this.scale = this.canvasSize / this.environmentSize;\r\n        this.drawSimulation(true); // 强制完全重绘\r\n      }, 200);\r\n    },\r\n    \r\n    // 启动渲染循环\r\n    startRenderLoop() {\r\n      if (!this.animationFrameId) {\r\n        this.lastRenderTime = performance.now();\r\n        this.animationFrameId = requestAnimationFrame(this.renderLoop);\r\n      }\r\n    },\r\n    \r\n    // 停止渲染循环\r\n    stopRenderLoop() {\r\n      if (this.animationFrameId) {\r\n        cancelAnimationFrame(this.animationFrameId);\r\n        this.animationFrameId = null;\r\n      }\r\n    },\r\n    \r\n    // 渲染循环\r\n    renderLoop(timestamp) {\r\n      // 计算每帧的时间间隔\r\n      const elapsed = timestamp - this.lastRenderTime;\r\n      const frameTime = 1000 / this.targetFPS;\r\n      \r\n      // 如果时间间隔足够，执行渲染\r\n      if (elapsed >= frameTime) {\r\n        this.lastRenderTime = timestamp;\r\n        \r\n        // 检查位置是否有变化，有变化时才渲染\r\n        if (this.hasPositionsChanged() || this.isRunning) {\r\n          this.drawOptimizedSimulation();\r\n          this.updatePreviousPositions();\r\n        }\r\n      }\r\n      \r\n      // 继续循环\r\n      this.animationFrameId = requestAnimationFrame(this.renderLoop);\r\n    },\r\n    \r\n    // 检查位置是否有变化\r\n    hasPositionsChanged() {\r\n      // 优化：快速检查数组长度变化\r\n      if (this.hunters.length !== this.previousPositions.hunters.length ||\r\n          this.targets.length !== this.previousPositions.targets.length) {\r\n        return true;\r\n      }\r\n      \r\n      // 检查运行状态变化\r\n      if (this.isRunning !== this.previousIsRunning ||\r\n          this.isCaptured !== this.previousIsCaptured) {\r\n        this.previousIsRunning = this.isRunning;\r\n        this.previousIsCaptured = this.isCaptured;\r\n        return true;\r\n      }\r\n      \r\n      // 渲染计数，每5帧强制完全重绘一次（避免累积误差）\r\n      this.renderCount++;\r\n      if (this.renderCount >= 5) {\r\n        this.renderCount = 0;\r\n        return true;\r\n      }\r\n      \r\n      // 只有在运行中或首次渲染时，才进行位置变化检查\r\n      if (!this.isRunning && this.previousPositions.hunters.length > 0) {\r\n        return false;\r\n      }\r\n      \r\n      // 智能体位置变化检测\r\n      const threshold = 0.5; // 位置变化阈值\r\n      \r\n      // 检查猎手位置变化\r\n      for (let i = 0; i < this.hunters.length; i++) {\r\n        const hunter = this.hunters[i];\r\n        const prevHunter = this.previousPositions.hunters[i];\r\n        \r\n        if (!prevHunter) return true;\r\n        \r\n        if (Math.abs(hunter.position[0] - prevHunter.position[0]) > threshold ||\r\n            Math.abs(hunter.position[1] - prevHunter.position[1]) > threshold) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      // 检查目标位置变化\r\n      for (let i = 0; i < this.targets.length; i++) {\r\n        const target = this.targets[i];\r\n        const prevTarget = this.previousPositions.targets[i];\r\n        \r\n        if (!prevTarget) return true;\r\n        \r\n        if (Math.abs(target.position[0] - prevTarget.position[0]) > threshold ||\r\n            Math.abs(target.position[1] - prevTarget.position[1]) > threshold) {\r\n          return true;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    \r\n    // 更新之前的位置\r\n    updatePreviousPositions() {\r\n      // 深拷贝位置数据\r\n      this.previousPositions.hunters = this.hunters.map(hunter => ({\r\n        id: hunter.id,\r\n        position: [...hunter.position]\r\n      }));\r\n      \r\n      this.previousPositions.targets = this.targets.map(target => ({\r\n        id: target.id,\r\n        position: [...target.position]\r\n      }));\r\n    },\r\n    \r\n    // 优化的绘制方法\r\n    drawOptimizedSimulation() {\r\n      if (!this.ctx) return;\r\n      \r\n      // 清除画布\r\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\r\n\r\n      this.drawBackground();\r\n      \r\n      // 绘制环境边界\r\n      this.ctx.strokeStyle = '#ccc';\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\r\n      \r\n      // 绘制障碍物\r\n      this.drawObstacles();\r\n      \r\n      // 绘制捕获状态\r\n      if (this.isCaptured) {\r\n        this.ctx.fillStyle = this.colorMap.captured;\r\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.font = 'bold 32px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2);\r\n      }\r\n      \r\n      // 绘制轨迹（如果启用）\r\n      if (this.showTrails) {\r\n        this.drawTrails();\r\n      }\r\n      \r\n      // 绘制视野和通信范围（如果启用）\r\n      if (this.showVisionRange || this.showCommunicationRange) {\r\n        this.drawRanges();\r\n      }\r\n      \r\n      // 绘制猎手\r\n      this.hunters.forEach(hunter => {\r\n        this.drawHunter(hunter);\r\n      });\r\n      \r\n      // 绘制目标\r\n      this.targets.forEach(target => {\r\n        this.drawAgent(target, 'target');\r\n      });\r\n    },\r\n    \r\n    // 绘制障碍物\r\n    drawObstacles() {\r\n      if (!this.obstacles || !this.obstacles.length) return;\r\n      \r\n      for (const obstacle of this.obstacles) {\r\n        const pos = this.transformPosition(obstacle.position);\r\n        const radius = obstacle.radius * this.scale;\r\n        \r\n        // 创建渐变效果\r\n        const gradient = this.ctx.createRadialGradient(\r\n          pos.x, pos.y, radius * 0.2,\r\n          pos.x, pos.y, radius\r\n        );\r\n        gradient.addColorStop(0, 'rgba(90, 90, 100, 0.9)');\r\n        gradient.addColorStop(0.7, 'rgba(70, 70, 85, 0.85)');\r\n        gradient.addColorStop(1, 'rgba(50, 50, 65, 0.8)');\r\n        \r\n        // 绘制主体\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.fill();\r\n        \r\n        // 添加边缘光晕效果\r\n        this.ctx.strokeStyle = 'rgba(120, 120, 140, 0.5)';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.stroke();\r\n        \r\n        // 添加内部纹理\r\n        this.drawObstacleTexture(pos.x, pos.y, radius);\r\n      }\r\n    },\r\n\r\n    drawObstacleTexture(x, y, radius) {\r\n      // 随机生成内部小圆点\r\n      const dotsCount = Math.floor(radius / 4);\r\n      this.ctx.fillStyle = 'rgba(40, 40, 55, 0.5)';\r\n      \r\n      for (let i = 0; i < dotsCount; i++) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const distance = Math.random() * radius * 0.8;\r\n        const dotX = x + Math.cos(angle) * distance;\r\n        const dotY = y + Math.sin(angle) * distance;\r\n        const dotSize = Math.random() * 3 + 1;\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.arc(dotX, dotY, dotSize, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n      }\r\n    },\r\n\r\n    drawBackground() {\r\n      const gridSize = 25 * this.scale;\r\n      const width = this.canvasSize;\r\n      const height = this.canvasSize;\r\n      \r\n      this.ctx.strokeStyle = 'rgba(200, 200, 220, 0.2)';\r\n      this.ctx.lineWidth = 1;\r\n      \r\n      // 绘制网格线\r\n      for (let x = 0; x <= width; x += gridSize) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, 0);\r\n        this.ctx.lineTo(x, height);\r\n        this.ctx.stroke();\r\n      }\r\n      \r\n      for (let y = 0; y <= height; y += gridSize) {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0, y);\r\n        this.ctx.lineTo(width, y);\r\n        this.ctx.stroke();\r\n      }\r\n      \r\n      // 添加坐标轴\r\n      this.ctx.strokeStyle = 'rgba(150, 150, 180, 0.4)';\r\n      this.ctx.lineWidth = 2;\r\n      \r\n      // x轴\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, height/2);\r\n      this.ctx.lineTo(width, height/2);\r\n      this.ctx.stroke();\r\n      \r\n      // y轴\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(width/2, 0);\r\n      this.ctx.lineTo(width/2, height);\r\n      this.ctx.stroke();\r\n    },\r\n    \r\n    // 完整重绘方法\r\n    drawSimulation(forceFullRedraw = false) {\r\n      if (!this.ctx) return;\r\n      \r\n      // 如果不需要强制重绘，使用优化版本\r\n      if (!forceFullRedraw && this.previousPositions.hunters.length > 0) {\r\n        return this.drawOptimizedSimulation();\r\n      }\r\n      \r\n      // 清除画布\r\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\r\n\r\n      this.drawBackground();\r\n      \r\n      // 绘制环境边界\r\n      this.ctx.strokeStyle = '#ccc';\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\r\n      \r\n      // 绘制障碍物\r\n      this.drawObstacles();\r\n      \r\n      // 绘制捕获状态\r\n      if (this.isCaptured) {\r\n        this.ctx.fillStyle = this.colorMap.captured;\r\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n        this.ctx.font = 'bold 32px Arial';\r\n        this.ctx.textAlign = 'center';\r\n        this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2);\r\n      }\r\n      \r\n      // 绘制轨迹（如果启用）\r\n      if (this.showTrails) {\r\n        this.drawTrails();\r\n      }\r\n      \r\n      // 绘制视野和通信范围（如果启用）\r\n      if (this.showVisionRange || this.showCommunicationRange) {\r\n        this.drawRanges();\r\n      }\r\n      \r\n      // 绘制猎手\r\n      this.hunters.forEach(hunter => {\r\n        this.drawHunter(hunter);\r\n      });\r\n      \r\n      // 绘制目标\r\n      this.targets.forEach(target => {\r\n        this.drawAgent(target, 'target');\r\n      });\r\n      \r\n      // 更新之前的位置\r\n      this.updatePreviousPositions();\r\n      this.previousIsRunning = this.isRunning;\r\n      this.previousIsCaptured = this.isCaptured;\r\n    },\r\n    \r\n    // 单独绘制猎手，根据角色不同使用不同样式\r\n    drawHunter(hunter) {\r\n      const pos = this.transformPosition(hunter.position);\r\n      \r\n      // 绘制猎手\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(pos.x, pos.y, style.size, 0, Math.PI * 2);\r\n      this.ctx.fillStyle = this.colorMap.hunter;\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = '#fff';\r\n      this.ctx.lineWidth = 1;\r\n      this.ctx.stroke();\r\n      \r\n      // 绘制ID标签\r\n      this.ctx.font = '10px Arial';\r\n      this.ctx.fillStyle = '#000';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText(hunter.id.toString(), pos.x, pos.y + 15);\r\n      \r\n      // 可选：显示角色名称\r\n      if (role !== 'standard') {\r\n        this.ctx.font = '8px Arial';\r\n        this.ctx.fillStyle = '#333';\r\n        this.ctx.fillText(role.substring(0, 1).toUpperCase(), pos.x, pos.y - 10);\r\n      }\r\n    },\r\n    \r\n    // 单独绘制轨迹\r\n    drawTrails() {\r\n      // 绘制猎手轨迹\r\n      this.hunters.forEach(hunter => {\r\n        if (hunter.history && hunter.history.length > 1) {\r\n          this.ctx.beginPath();\r\n          const startPos = this.transformPosition(hunter.history[0]);\r\n          this.ctx.moveTo(startPos.x, startPos.y);\r\n          \r\n          // 获取猎手角色和对应的样式\r\n          const role = hunter.role || 'standard';\r\n          const style = this.roleStyles[role] || this.roleStyles.standard;\r\n          \r\n          for (let i = 1; i < hunter.history.length; i++) {\r\n            const histPos = this.transformPosition(hunter.history[i]);\r\n            this.ctx.lineTo(histPos.x, histPos.y);\r\n          }\r\n          \r\n          this.ctx.strokeStyle = style.color;\r\n          this.ctx.lineWidth = 1;\r\n          this.ctx.stroke();\r\n        }\r\n      });\r\n      \r\n      // 绘制目标轨迹\r\n      this.targets.forEach(target => {\r\n        if (target.history && target.history.length > 1) {\r\n          this.ctx.beginPath();\r\n          const startPos = this.transformPosition(target.history[0]);\r\n          this.ctx.moveTo(startPos.x, startPos.y);\r\n          \r\n          for (let i = 1; i < target.history.length; i++) {\r\n            const histPos = this.transformPosition(target.history[i]);\r\n            this.ctx.lineTo(histPos.x, histPos.y);\r\n          }\r\n          \r\n          this.ctx.strokeStyle = this.colorMap.target;\r\n          this.ctx.lineWidth = 1;\r\n          this.ctx.stroke();\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 单独绘制视野和通信范围\r\n    drawRanges() {\r\n      // 绘制猎手视野和通信范围\r\n      this.hunters.forEach(hunter => {\r\n        const pos = this.transformPosition(hunter.position);\r\n        \r\n        // 绘制视野范围\r\n        if (this.showVisionRange) {\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, hunter.vision_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = this.colorMap.vision;\r\n          this.ctx.fill();\r\n        }\r\n        \r\n        // 绘制通信范围\r\n        if (this.showCommunicationRange) {\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, hunter.communication_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = this.colorMap.communication;\r\n          this.ctx.fill();\r\n        }\r\n        \r\n        // 绘制捕获范围\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(pos.x, pos.y, 10 * this.scale, 0, Math.PI * 2); // 捕获范围固定为10\r\n        this.ctx.fillStyle = this.colorMap.captureRange;\r\n        this.ctx.fill();\r\n      });\r\n      \r\n      // 绘制目标视野范围\r\n      this.targets.forEach(target => {\r\n        if (this.showVisionRange) {\r\n          const pos = this.transformPosition(target.position);\r\n          this.ctx.beginPath();\r\n          this.ctx.arc(pos.x, pos.y, target.vision_range * this.scale, 0, Math.PI * 2);\r\n          this.ctx.fillStyle = 'rgba(244, 67, 54, 0.1)'; // 半透明红色\r\n          this.ctx.fill();\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 绘制智能体\r\n    drawAgent(agent, type) {\r\n      const pos = this.transformPosition(agent.position);\r\n      \r\n      // 绘制智能体\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(pos.x, pos.y, type === 'hunter' ? 5 : 7, 0, Math.PI * 2);\r\n      this.ctx.fillStyle = this.colorMap[type];\r\n      this.ctx.fill();\r\n      this.ctx.strokeStyle = '#fff';\r\n      this.ctx.lineWidth = 1;\r\n      this.ctx.stroke();\r\n      \r\n      // 绘制ID标签\r\n      this.ctx.font = '10px Arial';\r\n      this.ctx.fillStyle = '#000';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText(agent.id.toString(), pos.x, pos.y + (type === 'hunter' ? 15 : 20));\r\n    },\r\n    \r\n    // 转换坐标\r\n    transformPosition(position) {\r\n      // 将模拟坐标转换为画布坐标\r\n      return {\r\n        x: position[0] * this.scale,\r\n        y: position[1] * this.scale\r\n      }\r\n    },\r\n    \r\n    // 清除特定区域\r\n    clearAgentArea(position, radius = 20) {\r\n      const pos = this.transformPosition(position);\r\n      this.ctx.clearRect(pos.x - radius, pos.y - radius, radius * 2, radius * 2);\r\n    }\r\n  },\r\n  watch: {\r\n    hunters: {\r\n      handler() {\r\n        // 使用防抖处理，避免频繁重绘\r\n        if (this.renderTimer) {\r\n          clearTimeout(this.renderTimer);\r\n        }\r\n        this.renderTimer = setTimeout(() => {\r\n          this.drawOptimizedSimulation();\r\n        }, 50);\r\n      },\r\n      deep: true\r\n    },\r\n    targets: {\r\n      handler() {\r\n        // 使用防抖处理，避免频繁重绘\r\n        if (this.renderTimer) {\r\n          clearTimeout(this.renderTimer);\r\n        }\r\n        this.renderTimer = setTimeout(() => {\r\n          this.drawOptimizedSimulation();\r\n        }, 50);\r\n      },\r\n      deep: true\r\n    },\r\n    // 添加对obstacles的监听\r\n    obstacles: {\r\n      handler() {\r\n        this.drawSimulation(true); // 强制完全重绘\r\n      },\r\n      deep: true\r\n    },\r\n    isRunning(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    isCaptured(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showTrails(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showVisionRange(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    showCommunicationRange(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this.drawSimulation();\r\n      }\r\n    },\r\n    environmentSize() {\r\n      this.scale = this.canvasSize / this.environmentSize;\r\n      this.drawSimulation(true); // 强制完全重绘\r\n    },\r\n    // 获取simulation对象\r\n    '$parent.simulation': {\r\n      handler(newVal) {\r\n        if (newVal) {\r\n          this.simulation = newVal;\r\n          this.drawSimulation(true);\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-canvas {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 16px 0; /* 增加上下边距 */\r\n}\r\n\r\n.simulation-canvas-card {\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  background: linear-gradient(to bottom, #fafbff, #f0f4f8);\r\n}\r\n\r\n.simulation-canvas__area {\r\n  border: none;\r\n  background-color: #fcfcff;\r\n}\r\n\r\n.control-panel {\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n}\r\n\r\n.info-title, .chart-title, .panel-title {\r\n  background: linear-gradient(to right, #3949AB, #5C6BC0);\r\n  color: white;\r\n  padding: 10px 16px !important;\r\n}\r\n\r\n\r\n.simulation-canvas__controls {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.simulation-canvas__controls .v-btn {\r\n  height: 32px !important;\r\n  min-width: 60px !important;\r\n  font-size: 0.8rem !important;\r\n  padding: 0 8px !important;\r\n}\r\n\r\n.simulation-canvas__controls .v-btn .v-icon {\r\n  font-size: 18px !important;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}