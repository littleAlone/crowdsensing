{"ast":null,"code":"import _regeneratorRuntime from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.timers.js\";\n// 导入组件\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\nimport SimulationInfo from '../components/simulation/SimulationInfo.vue';\nimport HunterStatisticsChart from '../components/simulation/HunterStatisticsChart.vue';\nimport PerformanceMonitor from '../components/simulation/PerformanceMonitor.vue';\nimport { setupWebSocket, closeWebSocket } from '../components/simulation/WebSocketManager.js';\nimport { mapState, mapGetters } from 'vuex';\nexport default {\n  name: 'SimulationDetail',\n  components: {\n    SimulationCanvas: SimulationCanvas,\n    SimulationInfo: SimulationInfo,\n    HunterStatisticsChart: HunterStatisticsChart,\n    PerformanceMonitor: PerformanceMonitor\n  },\n  props: {\n    simulationId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      simulation: {},\n      isRunning: false,\n      isCaptured: false,\n      socket: null,\n      showTrails: true,\n      showVisionRange: false,\n      showCommunicationRange: false,\n      showDeleteDialog: false,\n      deleteLoading: false,\n      // 添加缺失的响应式属性\n      activeTab: 0,\n      // WebSocket相关状态\n      wsLatency: 0,\n      lastMessageTime: 0,\n      // 连接状态提示\n      showConnectionStatus: false,\n      connectionStatusText: '',\n      connectionStatusColor: 'info',\n      // 性能监控\n      renderTime: 0,\n      lastRenderTimestamp: 0,\n      // 数据处理相关\n      dataUpdateTimer: null\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    storeCurrentSimulation: function storeCurrentSimulation(state) {\n      return state.currentSimulation;\n    },\n    simulationsLoading: function simulationsLoading(state) {\n      return state.loading;\n    }\n  })), mapGetters(['getSimulationById'])), {}, {\n    statusChipColor: function statusChipColor() {\n      if (this.isCaptured) return 'success';\n      if (this.isRunning) return 'primary';\n      return 'grey';\n    },\n    statusChipText: function statusChipText() {\n      if (this.isCaptured) return '已捕获';\n      if (this.isRunning) return '进行中';\n      return '已停止';\n    }\n  }),\n  created: function created() {\n    // 注册错误处理事件监听\n    this.$root.$on('api-error', this.handleApiError);\n  },\n  mounted: function mounted() {\n    console.log('SimulationDetail mounted');\n    // 监听页面可见性变化\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    window.addEventListener('focus', this.handleWindowFocus);\n    window.addEventListener('blur', this.handleWindowBlur);\n\n    // 初始化组件\n    this.initializeComponent();\n  },\n  beforeDestroy: function beforeDestroy() {\n    console.log('SimulationDetail beforeDestroy');\n    // 清理资源\n    this.closeWebSocketConnection();\n    this.cleanupTimers();\n\n    // 移除事件监听\n    this.$root.$off('api-error', this.handleApiError);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    window.removeEventListener('focus', this.handleWindowFocus);\n    window.removeEventListener('blur', this.handleWindowBlur);\n  },\n  methods: {\n    // 初始化组件\n    initializeComponent: function initializeComponent() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              console.log('初始化组件...');\n              _context.prev = 1;\n              _context.next = 4;\n              return _this.fetchSimulation();\n            case 4:\n              console.log('模拟数据获取成功:', _this.simulation.id);\n\n              // 设置WebSocket连接\n              _this.setupWebSocketConnection();\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('初始化组件失败:', _context.t0);\n              _this.showErrorStatus('初始化失败，请刷新页面重试');\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 8]]);\n      }))();\n    },\n    // 获取模拟数据\n    fetchSimulation: function fetchSimulation() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var storeSimulation, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              console.log('获取模拟数据, ID:', _this2.simulationId);\n              // 尝试从store获取数据\n              storeSimulation = _this2.getSimulationById(_this2.simulationId); // 如果store中没有数据，从API获取\n              if (storeSimulation) {\n                _context2.next = 11;\n                break;\n              }\n              console.log('从API获取模拟数据');\n              _context2.next = 7;\n              return _this2.$store.dispatch('fetchSimulation', _this2.simulationId);\n            case 7:\n              response = _context2.sent;\n              _this2.simulation = response;\n              _context2.next = 13;\n              break;\n            case 11:\n              console.log('从Store获取模拟数据');\n              _this2.simulation = storeSimulation;\n            case 13:\n              // 更新状态\n              _this2.isRunning = _this2.simulation.is_running;\n              _this2.isCaptured = _this2.simulation.is_captured;\n              console.log('模拟数据获取完成:', _this2.simulation.name);\n              return _context2.abrupt(\"return\", _this2.simulation);\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('获取模拟数据失败:', _context2.t0);\n              _this2.$toast.error('获取模拟数据失败');\n              throw _context2.t0;\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 19]]);\n      }))();\n    },\n    // 设置WebSocket连接\n    setupWebSocketConnection: function setupWebSocketConnection() {\n      var _this3 = this;\n      this.socket = setupWebSocket(this.simulationId, {\n        onOpen: function onOpen() {\n          _this3.showSuccessStatus('WebSocket连接已建立');\n        },\n        onMessage: function onMessage(data) {\n          _this3.handleWebSocketMessage(data);\n        },\n        onClose: function onClose(event) {\n          // 如果是正常关闭，不显示错误\n          if (event.code !== 1000 && event.code !== 1001) {\n            _this3.showWarningStatus('WebSocket连接已关闭');\n          }\n        },\n        onError: function onError() {\n          _this3.showErrorStatus('WebSocket连接错误');\n        }\n      });\n    },\n    // 关闭WebSocket连接\n    closeWebSocketConnection: function closeWebSocketConnection() {\n      if (this.socket) {\n        closeWebSocket(this.socket);\n        this.socket = null;\n      }\n    },\n    // 处理WebSocket消息\n    handleWebSocketMessage: function handleWebSocketMessage(data) {\n      // 计算延迟\n      this.calculateWsLatency();\n\n      // 处理错误\n      if (data.error) {\n        console.error('WebSocket错误:', data.error);\n        this.$toast.error(\"WebSocket\\u9519\\u8BEF: \".concat(data.error));\n        return;\n      }\n\n      // 使用防抖更新数据，避免频繁更新\n      this.updateSimulationDataDebounced(data);\n    },\n    // 计算WebSocket延迟\n    calculateWsLatency: function calculateWsLatency() {\n      var now = performance.now();\n      if (this.lastMessageTime) {\n        this.wsLatency = Math.round(now - this.lastMessageTime);\n      }\n      this.lastMessageTime = now;\n    },\n    // 防抖更新数据\n    updateSimulationDataDebounced: function updateSimulationDataDebounced(data) {\n      var _this4 = this;\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n      }\n      this.dataUpdateTimer = setTimeout(function () {\n        var startTime = performance.now();\n\n        // 更新模拟数据\n        _this4.simulation = data;\n        _this4.isRunning = data.is_running;\n        _this4.isCaptured = data.is_captured;\n\n        // 更新Vuex存储\n        _this4.$store.dispatch('updateSimulationAgents', {\n          simulationId: _this4.simulationId,\n          hunters: data.hunters || [],\n          targets: data.targets || []\n        });\n\n        // 计算渲染时间\n        _this4.renderTime = Math.round(performance.now() - startTime);\n      }, 50); // 50ms防抖延迟\n    },\n    // 模拟控制方法\n    startSimulation: function startSimulation() {\n      var _this5 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              // 先关闭可能存在的旧连接\n              _this5.closeWebSocketConnection();\n\n              // 发送启动请求到API\n              _context3.next = 4;\n              return _this5.$store.dispatch('startSimulation', _this5.simulationId);\n            case 4:\n              _this5.isRunning = true;\n\n              // 重新建立WebSocket连接以接收实时更新\n              _this5.setupWebSocketConnection();\n              _this5.$toast.success('模拟已启动');\n              _context3.next = 13;\n              break;\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('启动模拟失败:', _context3.t0);\n              _this5.$toast.error('启动模拟失败');\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 9]]);\n      }))();\n    },\n    stopSimulation: function stopSimulation() {\n      var _this6 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _this6.$store.dispatch('stopSimulation', _this6.simulationId);\n            case 3:\n              _this6.isRunning = false;\n              _this6.$toast.success('模拟已停止');\n              _context4.next = 11;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('停止模拟失败:', _context4.t0);\n              _this6.$toast.error('停止模拟失败');\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 7]]);\n      }))();\n    },\n    resetSimulation: function resetSimulation() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return _this7.$store.dispatch('resetSimulation', _this7.simulationId);\n            case 3:\n              data = _context5.sent;\n              _this7.simulation = data;\n              _this7.isRunning = false;\n              _this7.isCaptured = false;\n              _this7.$toast.success('模拟已重置');\n              _context5.next = 14;\n              break;\n            case 10:\n              _context5.prev = 10;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.error('重置模拟失败:', _context5.t0);\n              _this7.$toast.error('重置模拟失败');\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[0, 10]]);\n      }))();\n    },\n    deleteSimulation: function deleteSimulation() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _this8.deleteLoading = true;\n              _context6.prev = 1;\n              _context6.next = 4;\n              return _this8.$store.dispatch('deleteSimulation', _this8.simulationId);\n            case 4:\n              _this8.$toast.success('模拟已删除');\n              _this8.$router.push('/simulations');\n              _context6.next = 12;\n              break;\n            case 8:\n              _context6.prev = 8;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.error('删除模拟失败:', _context6.t0);\n              _this8.$toast.error('删除模拟失败');\n            case 12:\n              _context6.prev = 12;\n              _this8.deleteLoading = false;\n              _this8.showDeleteDialog = false;\n              return _context6.finish(12);\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[1, 8, 12, 16]]);\n      }))();\n    },\n    // 导航方法\n    navigateToList: function navigateToList() {\n      // 清理资源后再导航\n      this.closeWebSocketConnection();\n      this.cleanupTimers();\n      this.$router.push('/simulations');\n    },\n    // 状态提示显示方法\n    showInfoStatus: function showInfoStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'info';\n      this.showConnectionStatus = true;\n    },\n    showSuccessStatus: function showSuccessStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'success';\n      this.showConnectionStatus = true;\n    },\n    showWarningStatus: function showWarningStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'warning';\n      this.showConnectionStatus = true;\n    },\n    showErrorStatus: function showErrorStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'error';\n      this.showConnectionStatus = true;\n    },\n    // 错误处理\n    handleApiError: function handleApiError(error) {\n      console.error('API错误:', error);\n\n      // 特定错误处理\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\n        this.$toast.error('模拟不存在或已被删除');\n        this.$router.push('/simulations');\n      }\n    },\n    // 页面可见性处理\n    handleVisibilityChange: function handleVisibilityChange() {\n      if (document.hidden) {\n        // 页面隐藏时关闭WebSocket\n        this.closeWebSocketConnection();\n      } else {\n        // 页面可见时重新连接\n        if (this.isRunning && !this.isCaptured) {\n          this.setupWebSocketConnection();\n        }\n      }\n    },\n    // 窗口焦点变化处理\n    handleWindowFocus: function handleWindowFocus() {\n      if (this.isRunning && !this.isCaptured && !this.socket) {\n        this.setupWebSocketConnection();\n      }\n    },\n    handleWindowBlur: function handleWindowBlur() {\n      // 窗口失去焦点时无需处理\n    },\n    // 清理定时器\n    cleanupTimers: function cleanupTimers() {\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n        this.dataUpdateTimer = null;\n      }\n    }\n  },\n  watch: {\n    simulationId: {\n      handler: function handler(newId, oldId) {\n        if (newId !== oldId) {\n          console.log(\"\\u6A21\\u62DFID\\u53D8\\u66F4: \".concat(oldId, \" -> \").concat(newId));\n          // 重新初始化组件\n          this.closeWebSocketConnection();\n          this.cleanupTimers();\n          this.initializeComponent();\n        }\n      },\n      immediate: false\n    },\n    // 监视store中的当前模拟数据变化\n    storeCurrentSimulation: {\n      handler: function handler(newSimulation) {\n        if (newSimulation && newSimulation.id === this.simulationId) {\n          // 仅在首次加载或重要属性变化时更新本地数据\n          if (!this.simulation.id || newSimulation.is_running !== this.simulation.is_running || newSimulation.is_captured !== this.simulation.is_captured) {\n            this.simulation = newSimulation;\n            this.isRunning = newSimulation.is_running;\n            this.isCaptured = newSimulation.is_captured;\n          }\n        }\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["SimulationCanvas","SimulationInfo","HunterStatisticsChart","PerformanceMonitor","setupWebSocket","closeWebSocket","mapState","mapGetters","name","components","props","simulationId","type","Number","required","data","simulation","isRunning","isCaptured","socket","showTrails","showVisionRange","showCommunicationRange","showDeleteDialog","deleteLoading","activeTab","wsLatency","lastMessageTime","showConnectionStatus","connectionStatusText","connectionStatusColor","renderTime","lastRenderTimestamp","dataUpdateTimer","computed","_objectSpread","storeCurrentSimulation","state","currentSimulation","simulationsLoading","loading","statusChipColor","statusChipText","created","$root","$on","handleApiError","mounted","console","log","document","addEventListener","handleVisibilityChange","window","handleWindowFocus","handleWindowBlur","initializeComponent","beforeDestroy","closeWebSocketConnection","cleanupTimers","$off","removeEventListener","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","fetchSimulation","id","setupWebSocketConnection","t0","error","showErrorStatus","stop","_this2","_callee2","storeSimulation","response","_callee2$","_context2","getSimulationById","$store","dispatch","sent","is_running","is_captured","abrupt","$toast","_this3","onOpen","showSuccessStatus","onMessage","handleWebSocketMessage","onClose","event","code","showWarningStatus","onError","calculateWsLatency","concat","updateSimulationDataDebounced","now","performance","Math","round","_this4","clearTimeout","setTimeout","startTime","hunters","targets","startSimulation","_this5","_callee3","_callee3$","_context3","success","stopSimulation","_this6","_callee4","_callee4$","_context4","resetSimulation","_this7","_callee5","_callee5$","_context5","deleteSimulation","_this8","_callee6","_callee6$","_context6","$router","push","finish","navigateToList","showInfoStatus","message","status","includes","hidden","watch","handler","newId","oldId","immediate","newSimulation","deep"],"sources":["src/views/SimulationDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-detail\">\r\n    <v-container fluid class=\"content-container\">\r\n      <v-row no-gutters class=\"content-row\">\r\n        <!-- 左侧模拟画布区域 -->\r\n        <v-col cols=\"12\" md=\"8\" class=\"pr-md-2\">\r\n          <v-card class=\"simulation-canvas-card\">\r\n            <div class=\"d-flex align-center px-2\">\r\n              <div class=\"title-section\">\r\n                <span class=\"subtitle-1 font-weight-medium\">{{ simulation.name }}</span>\r\n              </div>\r\n              <v-spacer></v-spacer>\r\n              <v-chip x-small :color=\"statusChipColor\" text-color=\"white\" class=\"ml-2\">\r\n                {{ statusChipText }}\r\n              </v-chip>\r\n            </div>\r\n            \r\n            <!-- 模拟画布 - 移除重复按钮 -->\r\n            <simulation-canvas\r\n              ref=\"canvas\"\r\n              :hunters=\"simulation.hunters || []\"\r\n              :targets=\"simulation.targets || []\"\r\n              :environment-size=\"simulation.environment_size || 500\"\r\n              :is-running=\"isRunning\"\r\n              :is-captured=\"isCaptured\"\r\n              :show-trails=\"showTrails\"\r\n              :show-vision-range=\"showVisionRange\"\r\n              :show-communication-range=\"showCommunicationRange\"\r\n            ></simulation-canvas>\r\n          </v-card>\r\n        </v-col>\r\n        \r\n        <!-- 右侧控制面板和数据分析区域 -->\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-card class=\"control-panel mb-2\">\r\n            <v-card-title class=\"py-1 subtitle-1\">控制面板</v-card-title>\r\n            <v-card-text class=\"py-1\">\r\n              <!-- 控制按钮组 -->\r\n              <div class=\"d-flex mb-3 justify-center\">\r\n                <v-btn small color=\"primary\" :disabled=\"isRunning || isCaptured\" @click=\"startSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-play</v-icon>开始\r\n                </v-btn>\r\n                <v-btn small color=\"error\" :disabled=\"!isRunning\" @click=\"stopSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-stop</v-icon>停止\r\n                </v-btn>\r\n                <v-btn small color=\"warning\" :disabled=\"isRunning\" @click=\"resetSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-refresh</v-icon>重置\r\n                </v-btn>\r\n              </div>\r\n              \r\n              <!-- 显示选项 -->\r\n              <div class=\"display-options mb-2\">\r\n                <div class=\"subtitle-2 mb-1\">显示选项</div>\r\n                <v-row dense>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"轨迹\" v-model=\"showTrails\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"视野范围\" v-model=\"showVisionRange\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"通信范围\" v-model=\"showCommunicationRange\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                </v-row>\r\n              </div>\r\n            </v-card-text>\r\n          </v-card>\r\n          \r\n          <!-- 数据分析区域 - 使用标签页组织内容 -->\r\n          <v-card>\r\n            <v-tabs v-model=\"activeTab\" background-color=\"primary\" dark dense>\r\n              <v-tab>模拟信息</v-tab>\r\n              <v-tab>统计图表</v-tab>\r\n            </v-tabs>\r\n            \r\n            <v-tabs-items v-model=\"activeTab\">\r\n              <v-tab-item>\r\n                <simulation-info :simulation=\"simulation\"></simulation-info>\r\n              </v-tab-item>\r\n              <v-tab-item>\r\n                <hunter-statistics-chart\r\n                  :hunters=\"simulation.hunters || []\"\r\n                  :targets=\"simulation.targets || []\"\r\n                  :step-count=\"simulation.step_count || 0\"\r\n                  :is-running=\"isRunning\"\r\n                ></hunter-statistics-chart>\r\n                \r\n                <performance-monitor\r\n                  v-if=\"simulation.step_count > 0\"\r\n                  :render-time=\"renderTime\"\r\n                  :ws-latency=\"wsLatency\"\r\n                ></performance-monitor>\r\n              </v-tab-item>\r\n            </v-tabs-items>\r\n          </v-card>\r\n          \r\n          <!-- 底部操作按钮 -->\r\n          <v-card class=\"mt-2 pa-2\">\r\n            <div class=\"d-flex justify-space-between\">\r\n              <v-btn small text color=\"primary\" @click=\"navigateToList\">\r\n                <v-icon small left>mdi-arrow-left</v-icon>返回列表\r\n              </v-btn>\r\n              <v-btn small text color=\"error\" @click=\"showDeleteDialog = true\">\r\n                <v-icon small left>mdi-delete</v-icon>删除模拟\r\n              </v-btn>\r\n            </div>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n    \r\n    <!-- 删除确认对话框 -->\r\n    <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title class=\"headline\">确认删除?</v-card-title>\r\n        <v-card-text>此操作将永久删除该模拟及其所有相关数据，无法恢复。</v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteDialog = false\">取消</v-btn>\r\n          <v-btn color=\"error\" text @click=\"deleteSimulation\" :loading=\"deleteLoading\">确认删除</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入组件\r\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\r\nimport SimulationInfo from '../components/simulation/SimulationInfo.vue';\r\nimport HunterStatisticsChart from '../components/simulation/HunterStatisticsChart.vue';\r\nimport PerformanceMonitor from '../components/simulation/PerformanceMonitor.vue';\r\nimport { setupWebSocket, closeWebSocket } from '../components/simulation/WebSocketManager.js';\r\nimport { mapState, mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  name: 'SimulationDetail',\r\n  components: {\r\n    SimulationCanvas,\r\n    SimulationInfo,\r\n    HunterStatisticsChart,\r\n    PerformanceMonitor\r\n  },\r\n  props: {\r\n    simulationId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: {},\r\n      isRunning: false,\r\n      isCaptured: false,\r\n      socket: null,\r\n      showTrails: true,\r\n      showVisionRange: false,\r\n      showCommunicationRange: false,\r\n      showDeleteDialog: false,\r\n      deleteLoading: false,\r\n      \r\n      // 添加缺失的响应式属性\r\n      activeTab: 0,\r\n      \r\n      // WebSocket相关状态\r\n      wsLatency: 0,\r\n      lastMessageTime: 0,\r\n      \r\n      // 连接状态提示\r\n      showConnectionStatus: false,\r\n      connectionStatusText: '',\r\n      connectionStatusColor: 'info',\r\n      \r\n      // 性能监控\r\n      renderTime: 0,\r\n      lastRenderTimestamp: 0,\r\n      \r\n      // 数据处理相关\r\n      dataUpdateTimer: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      storeCurrentSimulation: state => state.currentSimulation,\r\n      simulationsLoading: state => state.loading\r\n    }),\r\n    ...mapGetters([\r\n      'getSimulationById'\r\n    ]),\r\n    statusChipColor() {\r\n      if (this.isCaptured) return 'success';\r\n      if (this.isRunning) return 'primary';\r\n      return 'grey';\r\n    },\r\n    statusChipText() {\r\n      if (this.isCaptured) return '已捕获';\r\n      if (this.isRunning) return '进行中';\r\n      return '已停止';\r\n    }\r\n  },\r\n  created() {\r\n    // 注册错误处理事件监听\r\n    this.$root.$on('api-error', this.handleApiError);\r\n  },\r\n  mounted() {\r\n    console.log('SimulationDetail mounted');\r\n    // 监听页面可见性变化\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.addEventListener('focus', this.handleWindowFocus);\r\n    window.addEventListener('blur', this.handleWindowBlur);\r\n    \r\n    // 初始化组件\r\n    this.initializeComponent();\r\n  },\r\n  beforeDestroy() {\r\n    console.log('SimulationDetail beforeDestroy');\r\n    // 清理资源\r\n    this.closeWebSocketConnection();\r\n    this.cleanupTimers();\r\n    \r\n    // 移除事件监听\r\n    this.$root.$off('api-error', this.handleApiError);\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.removeEventListener('focus', this.handleWindowFocus);\r\n    window.removeEventListener('blur', this.handleWindowBlur);\r\n  },\r\n  methods: {\r\n    // 初始化组件\r\n    async initializeComponent() {\r\n      console.log('初始化组件...');\r\n      try {\r\n        // 从API获取模拟数据\r\n        await this.fetchSimulation();\r\n        console.log('模拟数据获取成功:', this.simulation.id);\r\n        \r\n        // 设置WebSocket连接\r\n        this.setupWebSocketConnection();\r\n      } catch (error) {\r\n        console.error('初始化组件失败:', error);\r\n        this.showErrorStatus('初始化失败，请刷新页面重试');\r\n      }\r\n    },\r\n    \r\n    // 获取模拟数据\r\n    async fetchSimulation() {\r\n      try {\r\n        console.log('获取模拟数据, ID:', this.simulationId);\r\n        // 尝试从store获取数据\r\n        let storeSimulation = this.getSimulationById(this.simulationId);\r\n        \r\n        // 如果store中没有数据，从API获取\r\n        if (!storeSimulation) {\r\n          console.log('从API获取模拟数据');\r\n          const response = await this.$store.dispatch('fetchSimulation', this.simulationId);\r\n          this.simulation = response;\r\n        } else {\r\n          console.log('从Store获取模拟数据');\r\n          this.simulation = storeSimulation;\r\n        }\r\n        \r\n        // 更新状态\r\n        this.isRunning = this.simulation.is_running;\r\n        this.isCaptured = this.simulation.is_captured;\r\n        \r\n        console.log('模拟数据获取完成:', this.simulation.name);\r\n        return this.simulation;\r\n      } catch (error) {\r\n        console.error('获取模拟数据失败:', error);\r\n        this.$toast.error('获取模拟数据失败');\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    // 设置WebSocket连接\r\n    setupWebSocketConnection() {\r\n      this.socket = setupWebSocket(this.simulationId, {\r\n        onOpen: () => {\r\n          this.showSuccessStatus('WebSocket连接已建立');\r\n        },\r\n        onMessage: (data) => {\r\n          this.handleWebSocketMessage(data);\r\n        },\r\n        onClose: (event) => {\r\n          // 如果是正常关闭，不显示错误\r\n          if (event.code !== 1000 && event.code !== 1001) {\r\n            this.showWarningStatus('WebSocket连接已关闭');\r\n          }\r\n        },\r\n        onError: () => {\r\n          this.showErrorStatus('WebSocket连接错误');\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 关闭WebSocket连接\r\n    closeWebSocketConnection() {\r\n      if (this.socket) {\r\n        closeWebSocket(this.socket);\r\n        this.socket = null;\r\n      }\r\n    },\r\n    \r\n    // 处理WebSocket消息\r\n    handleWebSocketMessage(data) {\r\n      // 计算延迟\r\n      this.calculateWsLatency();\r\n      \r\n      // 处理错误\r\n      if (data.error) {\r\n        console.error('WebSocket错误:', data.error);\r\n        this.$toast.error(`WebSocket错误: ${data.error}`);\r\n        return;\r\n      }\r\n      \r\n      // 使用防抖更新数据，避免频繁更新\r\n      this.updateSimulationDataDebounced(data);\r\n    },\r\n    \r\n    // 计算WebSocket延迟\r\n    calculateWsLatency() {\r\n      const now = performance.now();\r\n      if (this.lastMessageTime) {\r\n        this.wsLatency = Math.round(now - this.lastMessageTime);\r\n      }\r\n      this.lastMessageTime = now;\r\n    },\r\n    \r\n    // 防抖更新数据\r\n    updateSimulationDataDebounced(data) {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n      }\r\n      \r\n      this.dataUpdateTimer = setTimeout(() => {\r\n        const startTime = performance.now();\r\n        \r\n        // 更新模拟数据\r\n        this.simulation = data;\r\n        this.isRunning = data.is_running;\r\n        this.isCaptured = data.is_captured;\r\n        \r\n        // 更新Vuex存储\r\n        this.$store.dispatch('updateSimulationAgents', {\r\n          simulationId: this.simulationId,\r\n          hunters: data.hunters || [],\r\n          targets: data.targets || []\r\n        });\r\n        \r\n        // 计算渲染时间\r\n        this.renderTime = Math.round(performance.now() - startTime);\r\n      }, 50); // 50ms防抖延迟\r\n    },\r\n    \r\n    // 模拟控制方法\r\n    async startSimulation() {\r\n      try {\r\n       // 先关闭可能存在的旧连接\r\n      this.closeWebSocketConnection();\r\n      \r\n      // 发送启动请求到API\r\n      await this.$store.dispatch('startSimulation', this.simulationId);\r\n      this.isRunning = true;\r\n      \r\n      // 重新建立WebSocket连接以接收实时更新\r\n      this.setupWebSocketConnection();\r\n      \r\n      this.$toast.success('模拟已启动');\r\n      } catch (error) {\r\n        console.error('启动模拟失败:', error);\r\n        this.$toast.error('启动模拟失败');\r\n      }\r\n    },\r\n    \r\n    async stopSimulation() {\r\n      try {\r\n        await this.$store.dispatch('stopSimulation', this.simulationId);\r\n        this.isRunning = false;\r\n        this.$toast.success('模拟已停止');\r\n      } catch (error) {\r\n        console.error('停止模拟失败:', error);\r\n        this.$toast.error('停止模拟失败');\r\n      }\r\n    },\r\n    \r\n    async resetSimulation() {\r\n      try {\r\n        const data = await this.$store.dispatch('resetSimulation', this.simulationId);\r\n        this.simulation = data;\r\n        this.isRunning = false;\r\n        this.isCaptured = false;\r\n        \r\n        this.$toast.success('模拟已重置');\r\n      } catch (error) {\r\n        console.error('重置模拟失败:', error);\r\n        this.$toast.error('重置模拟失败');\r\n      }\r\n    },\r\n    \r\n    async deleteSimulation() {\r\n      this.deleteLoading = true;\r\n      try {\r\n        await this.$store.dispatch('deleteSimulation', this.simulationId);\r\n        this.$toast.success('模拟已删除');\r\n        this.$router.push('/simulations');\r\n      } catch (error) {\r\n        console.error('删除模拟失败:', error);\r\n        this.$toast.error('删除模拟失败');\r\n      } finally {\r\n        this.deleteLoading = false;\r\n        this.showDeleteDialog = false;\r\n      }\r\n    },\r\n    \r\n    // 导航方法\r\n    navigateToList() {\r\n      // 清理资源后再导航\r\n      this.closeWebSocketConnection();\r\n      this.cleanupTimers();\r\n      this.$router.push('/simulations');\r\n    },\r\n    \r\n    // 状态提示显示方法\r\n    showInfoStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'info';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showSuccessStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'success';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showWarningStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'warning';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showErrorStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'error';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    // 错误处理\r\n    handleApiError(error) {\r\n      console.error('API错误:', error);\r\n      \r\n      // 特定错误处理\r\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\r\n        this.$toast.error('模拟不存在或已被删除');\r\n        this.$router.push('/simulations');\r\n      }\r\n    },\r\n    \r\n    // 页面可见性处理\r\n    handleVisibilityChange() {\r\n      if (document.hidden) {\r\n        // 页面隐藏时关闭WebSocket\r\n        this.closeWebSocketConnection();\r\n      } else {\r\n        // 页面可见时重新连接\r\n        if (this.isRunning && !this.isCaptured) {\r\n          this.setupWebSocketConnection();\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 窗口焦点变化处理\r\n    handleWindowFocus() {\r\n      if (this.isRunning && !this.isCaptured && !this.socket) {\r\n        this.setupWebSocketConnection();\r\n      }\r\n    },\r\n    \r\n    handleWindowBlur() {\r\n      // 窗口失去焦点时无需处理\r\n    },\r\n    \r\n    // 清理定时器\r\n    cleanupTimers() {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n        this.dataUpdateTimer = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    simulationId: {\r\n      handler(newId, oldId) {\r\n        if (newId !== oldId) {\r\n          console.log(`模拟ID变更: ${oldId} -> ${newId}`);\r\n          // 重新初始化组件\r\n          this.closeWebSocketConnection();\r\n          this.cleanupTimers();\r\n          this.initializeComponent();\r\n        }\r\n      },\r\n      immediate: false\r\n    },\r\n    \r\n    // 监视store中的当前模拟数据变化\r\n    storeCurrentSimulation: {\r\n      handler(newSimulation) {\r\n        if (newSimulation && newSimulation.id === this.simulationId) {\r\n          // 仅在首次加载或重要属性变化时更新本地数据\r\n          if (!this.simulation.id || \r\n              newSimulation.is_running !== this.simulation.is_running ||\r\n              newSimulation.is_captured !== this.simulation.is_captured) {\r\n            this.simulation = newSimulation;\r\n            this.isRunning = newSimulation.is_running;\r\n            this.isCaptured = newSimulation.is_captured;\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-detail {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 控制内容区域的最大宽度和居中 */\r\n.content-container {\r\n  max-width: 1200px !important;\r\n  margin: 0 auto !important;\r\n  padding: 0 12px !important;\r\n}\r\n\r\n.content-row {\r\n  justify-content: center;\r\n}\r\n\r\n.simulation-canvas-card {\r\n  height: calc(100vh - 100px);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.control-panel {\r\n  height: auto;\r\n}\r\n\r\n/* 控制元素样式优化 */\r\n:deep(.v-input--switch) {\r\n  margin-top: 0;\r\n}\r\n\r\n:deep(.v-messages) {\r\n  min-height: 0;\r\n}\r\n\r\n:deep(.v-card__title) {\r\n  padding: 8px 12px;\r\n}\r\n\r\n:deep(.v-card__text) {\r\n  padding: 8px 12px;\r\n}\r\n\r\n.title-section {\r\n  padding: 8px 4px;\r\n}\r\n\r\n/* 响应式设计优化 */\r\n@media (max-width: 960px) {\r\n  .simulation-canvas-card {\r\n    height: 60vh;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}