{"ast":null,"code":"import SimulationCanvas from '../components/SimulationCanvas.vue';\nimport { mapState, mapGetters } from 'vuex';\nexport default {\n  name: 'SimulationDetail',\n  components: {\n    SimulationCanvas\n  },\n  props: {\n    simulationId: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      simulation: {},\n      isRunning: false,\n      isCaptured: false,\n      socket: null,\n      showTrails: true,\n      showVisionRange: false,\n      showCommunicationRange: false,\n      showDeleteDialog: false,\n      deleteLoading: false,\n      // 图表配置\n      distanceChartOptions: {\n        chart: {\n          id: 'distance-chart',\n          animations: {\n            enabled: false // 禁用动画提高性能\n          },\n          toolbar: {\n            show: false\n          },\n          background: '#fff',\n          fontFamily: 'Roboto, sans-serif'\n        },\n        xaxis: {\n          type: 'numeric',\n          title: {\n            text: '步数'\n          },\n          labels: {\n            formatter: val => Math.floor(val)\n          }\n        },\n        yaxis: {\n          title: {\n            text: '与目标距离'\n          },\n          min: function (min) {\n            return min * 0.9; // 最小值向下扩展10%\n          }\n        },\n        colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50', '#03a9f4', '#8bc34a', '#9c27b0', '#795548', '#607d8b'],\n        stroke: {\n          width: 2,\n          curve: 'smooth',\n          lineCap: 'round'\n        },\n        markers: {\n          size: 0,\n          // 隐藏点标记提高性能\n          hover: {\n            size: 5\n          }\n        },\n        tooltip: {\n          x: {\n            title: {\n              formatter: () => '步数'\n            }\n          },\n          y: {\n            formatter: val => `${val.toFixed(2)} 单位`\n          }\n        },\n        grid: {\n          padding: {\n            left: 10,\n            right: 10\n          }\n        },\n        legend: {\n          position: 'top',\n          horizontalAlign: 'center'\n        },\n        responsive: [{\n          breakpoint: 768,\n          options: {\n            chart: {\n              height: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }]\n      },\n      distanceChartSeries: [],\n      agentDistances: {},\n      // WebSocket相关状态\n      wsConnectionAttempts: 0,\n      wsMaxConnectionAttempts: 5,\n      wsReconnectDelay: 2000,\n      heartbeatInterval: null,\n      heartbeatTimeout: null,\n      lastMessageTime: 0,\n      wsLatency: 0,\n      // 连接状态提示\n      showConnectionStatus: false,\n      connectionStatusText: '',\n      connectionStatusColor: 'info',\n      // 性能监控\n      renderTime: 0,\n      lastRenderTimestamp: 0,\n      // 数据处理相关\n      dataUpdateTimer: null,\n      chartUpdateTimer: null,\n      maxDataPoints: 100,\n      // 限制图表数据点数量\n      lastChartUpdate: 0,\n      optimizeChartUpdates: true\n    };\n  },\n  computed: {\n    ...mapState({\n      storeCurrentSimulation: state => state.currentSimulation,\n      simulationsLoading: state => state.loading\n    }),\n    ...mapGetters(['getSimulationById']),\n    statusChipColor() {\n      if (this.isCaptured) return 'success';\n      if (this.isRunning) return 'primary';\n      return 'grey';\n    },\n    statusChipText() {\n      if (this.isCaptured) return '已捕获';\n      if (this.isRunning) return '进行中';\n      return '已停止';\n    },\n    hasWebSocket() {\n      return !!this.socket && this.socket.readyState === WebSocket.OPEN;\n    }\n  },\n  created() {\n    // 注册错误处理事件监听\n    this.$root.$on('api-error', this.handleApiError);\n\n    // 初始化\n    this.initializeComponent();\n  },\n  mounted() {\n    // 监听页面可见性变化\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n\n    // 监听窗口焦点变化\n    window.addEventListener('focus', this.handleWindowFocus);\n    window.addEventListener('blur', this.handleWindowBlur);\n  },\n  beforeDestroy() {\n    // 清理WebSocket连接\n    this.closeWebSocket();\n\n    // 清理定时器\n    this.cleanupTimers();\n\n    // 移除事件监听\n    this.$root.$off('api-error', this.handleApiError);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    window.removeEventListener('focus', this.handleWindowFocus);\n    window.removeEventListener('blur', this.handleWindowBlur);\n  },\n  methods: {\n    async initializeComponent() {\n      try {\n        // 从API获取模拟数据\n        await this.fetchSimulation();\n\n        // 初始化图表\n        this.initDistanceChart();\n\n        // 设置WebSocket连接\n        this.setupWebSocket();\n      } catch (error) {\n        console.error('初始化组件失败:', error);\n        this.showErrorStatus('初始化失败，请刷新页面重试');\n      }\n    },\n    // 获取模拟数据\n    async fetchSimulation() {\n      try {\n        // 尝试从store获取数据\n        let storeSimulation = this.getSimulationById(this.simulationId);\n\n        // 如果store中没有数据，从API获取\n        if (!storeSimulation) {\n          const response = await this.$store.dispatch('fetchSimulation', this.simulationId);\n          this.simulation = response;\n        } else {\n          this.simulation = storeSimulation;\n        }\n\n        // 更新状态\n        this.isRunning = this.simulation.is_running;\n        this.isCaptured = this.simulation.is_captured;\n        return this.simulation;\n      } catch (error) {\n        console.error('获取模拟数据失败:', error);\n        this.$toast.error('获取模拟数据失败');\n        throw error;\n      }\n    },\n    // WebSocket连接管理\n    setupWebSocket() {\n      // 关闭之前的连接\n      this.closeWebSocket();\n\n      // 添加连接状态跟踪\n      this.wsConnectionAttempts = 0;\n      this.wsMaxConnectionAttempts = 5;\n      this.wsReconnectDelay = 2000; // 初始重连延迟（毫秒）\n\n      // 创建新的WebSocket连接\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsBaseUrl = process.env.VUE_APP_WS_URL || `${wsProtocol}//${window.location.host}`;\n      const wsUrl = `${wsBaseUrl}/api/v1/ws/simulations/${this.simulationId}`;\n      console.log(`连接WebSocket: ${wsUrl}`);\n      this.socket = new WebSocket(wsUrl);\n      this.socket.onopen = () => {\n        console.log(`WebSocket连接已建立 (simulationId: ${this.simulationId})`);\n        // 重置重连计数器\n        this.wsConnectionAttempts = 0;\n        this.wsReconnectDelay = 2000;\n        // 显示连接成功提示\n        this.showSuccessStatus('WebSocket连接已建立');\n        // 添加心跳检测\n        this.startHeartbeat();\n      };\n      this.socket.onmessage = event => {\n        // 计算延迟\n        this.calculateWsLatency();\n        try {\n          const data = JSON.parse(event.data);\n          if (data.error) {\n            console.error('WebSocket错误:', data.error);\n            this.$toast.error(`WebSocket错误: ${data.error}`);\n            return;\n          }\n\n          // 使用防抖更新数据，避免频繁更新\n          this.updateSimulationDataDebounced(data);\n\n          // 如果是心跳响应，重置超时计时器\n          if (data.heartbeat) {\n            this.resetHeartbeatTimeout();\n          }\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error);\n        }\n      };\n      this.socket.onclose = event => {\n        console.log(`WebSocket连接已关闭 (code: ${event.code}, reason: ${event.reason})`);\n        // 清理心跳计时器\n        this.stopHeartbeat();\n\n        // 如果是正常关闭，不显示错误\n        if (event.code === 1000 || event.code === 1001) {\n          return;\n        }\n\n        // 显示连接关闭提示\n        this.showWarningStatus('WebSocket连接已关闭');\n\n        // 如果模拟仍在运行但连接关闭，尝试重新连接\n        if (this.isRunning && !this.isCaptured && this.wsConnectionAttempts < this.wsMaxConnectionAttempts) {\n          // 指数退避重连策略\n          this.wsConnectionAttempts++;\n          const delay = Math.min(this.wsReconnectDelay * Math.pow(1.5, this.wsConnectionAttempts - 1), 30000);\n          console.log(`尝试重新连接WebSocket... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts}) 延迟: ${delay}ms`);\n          this.showInfoStatus(`正在重新连接... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts})`);\n          setTimeout(() => this.setupWebSocket(), delay);\n        } else if (this.wsConnectionAttempts >= this.wsMaxConnectionAttempts) {\n          console.error('达到最大重连次数，停止尝试');\n          this.showErrorStatus('WebSocket连接失败，请刷新页面重试');\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket错误:', error);\n        this.showErrorStatus('WebSocket连接错误');\n      };\n    },\n    // 关闭WebSocket连接\n    closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.socket) {\n        // 移除所有事件监听器\n        this.socket.onopen = null;\n        this.socket.onmessage = null;\n        this.socket.onclose = null;\n        this.socket.onerror = null;\n\n        // 关闭连接\n        if (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING) {\n          this.socket.close();\n        }\n        this.socket = null;\n      }\n    },\n    // 开始发送心跳\n    startHeartbeat() {\n      this.heartbeatInterval = setInterval(() => {\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n          // 发送心跳消息\n          this.socket.send(JSON.stringify({\n            type: 'heartbeat'\n          }));\n\n          // 设置心跳超时，如果超时没收到响应则重连\n          this.heartbeatTimeout = setTimeout(() => {\n            console.warn('心跳超时，尝试重新连接...');\n            this.closeWebSocket();\n            this.setupWebSocket();\n          }, 5000); // 5秒超时\n        }\n      }, 30000); // 每30秒发送一次心跳\n    },\n    // 停止心跳\n    stopHeartbeat() {\n      if (this.heartbeatInterval) {\n        clearInterval(this.heartbeatInterval);\n        this.heartbeatInterval = null;\n      }\n      if (this.heartbeatTimeout) {\n        clearTimeout(this.heartbeatTimeout);\n        this.heartbeatTimeout = null;\n      }\n    },\n    // 重置心跳超时\n    resetHeartbeatTimeout() {\n      if (this.heartbeatTimeout) {\n        clearTimeout(this.heartbeatTimeout);\n        this.heartbeatTimeout = null;\n      }\n    },\n    // 计算WebSocket延迟\n    calculateWsLatency() {\n      const now = performance.now();\n      if (this.lastMessageTime) {\n        this.wsLatency = Math.round(now - this.lastMessageTime);\n      }\n      this.lastMessageTime = now;\n    },\n    // 防抖更新数据\n    updateSimulationDataDebounced(data) {\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n      }\n      this.dataUpdateTimer = setTimeout(() => {\n        const startTime = performance.now();\n\n        // 更新模拟数据\n        this.simulation = data;\n        this.isRunning = data.is_running;\n        this.isCaptured = data.is_captured;\n\n        // 更新Vuex存储\n        this.$store.dispatch('updateSimulationAgents', {\n          simulationId: this.simulationId,\n          hunters: data.hunters || [],\n          targets: data.targets || []\n        });\n\n        // 更新图表（使用节流）\n        this.updateChartThrottled();\n\n        // 计算渲染时间\n        this.renderTime = Math.round(performance.now() - startTime);\n      }, 50); // 50ms防抖延迟\n    },\n    // 节流更新图表\n    updateChartThrottled() {\n      const now = performance.now();\n      const timeSinceLastUpdate = now - this.lastChartUpdate;\n\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\n        if (!this.chartUpdateTimer) {\n          this.chartUpdateTimer = setTimeout(() => {\n            this.updateDistanceChart();\n            this.chartUpdateTimer = null;\n            this.lastChartUpdate = performance.now();\n          }, 200 - timeSinceLastUpdate);\n        }\n      } else {\n        // 直接更新\n        if (this.chartUpdateTimer) {\n          clearTimeout(this.chartUpdateTimer);\n          this.chartUpdateTimer = null;\n        }\n        this.updateDistanceChart();\n        this.lastChartUpdate = now;\n      }\n    },\n    // 模拟控制方法\n    async startSimulation() {\n      try {\n        await this.$store.dispatch('startSimulation', this.simulationId);\n        this.isRunning = true;\n        this.$toast.success('模拟已启动');\n      } catch (error) {\n        console.error('启动模拟失败:', error);\n        this.$toast.error('启动模拟失败');\n      }\n    },\n    async stopSimulation() {\n      try {\n        await this.$store.dispatch('stopSimulation', this.simulationId);\n        this.isRunning = false;\n        this.$toast.success('模拟已停止');\n      } catch (error) {\n        console.error('停止模拟失败:', error);\n        this.$toast.error('停止模拟失败');\n      }\n    },\n    async resetSimulation() {\n      try {\n        const data = await this.$store.dispatch('resetSimulation', this.simulationId);\n        this.simulation = data;\n        this.isRunning = false;\n        this.isCaptured = false;\n\n        // 重置图表数据\n        this.agentDistances = {};\n        this.initDistanceChart();\n        this.$toast.success('模拟已重置');\n      } catch (error) {\n        console.error('重置模拟失败:', error);\n        this.$toast.error('重置模拟失败');\n      }\n    },\n    async deleteSimulation() {\n      this.deleteLoading = true;\n      try {\n        await this.$store.dispatch('deleteSimulation', this.simulationId);\n        this.$toast.success('模拟已删除');\n        this.$router.push('/simulations');\n      } catch (error) {\n        console.error('删除模拟失败:', error);\n        this.$toast.error('删除模拟失败');\n      } finally {\n        this.deleteLoading = false;\n        this.showDeleteDialog = false;\n      }\n    },\n    // 图表相关方法\n    initDistanceChart() {\n      if (!this.simulation.hunters || !this.simulation.targets) return;\n      this.distanceChartSeries = this.simulation.hunters.map(hunter => ({\n        name: `猎手 ${hunter.id}`,\n        data: []\n      }));\n      this.agentDistances = {};\n      this.simulation.hunters.forEach(hunter => {\n        this.agentDistances[hunter.id] = [];\n      });\n    },\n    updateDistanceChart() {\n      if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) return;\n      const target = this.simulation.targets[0];\n      this.simulation.hunters.forEach((hunter, index) => {\n        // 计算与目标的距离\n        const distance = this.calculateDistance(hunter.position, target.position);\n        if (!this.agentDistances[hunter.id]) {\n          this.agentDistances[hunter.id] = [];\n        }\n\n        // 添加数据点\n        this.agentDistances[hunter.id].push({\n          x: this.simulation.step_count,\n          y: Math.round(distance * 100) / 100\n        });\n\n        // 限制数据点数量，避免性能问题\n        if (this.agentDistances[hunter.id].length > this.maxDataPoints) {\n          // 清除旧数据点，但保留第一个点以保持连续性\n          const firstPoint = this.agentDistances[hunter.id][0];\n          this.agentDistances[hunter.id] = [firstPoint, ...this.agentDistances[hunter.id].slice(-this.maxDataPoints + 1)];\n        }\n\n        // 更新图表数据 - 使用不可变更新\n        if (index < this.distanceChartSeries.length) {\n          // 创建新数组以触发图表更新\n          this.$set(this.distanceChartSeries[index], 'data', [...this.agentDistances[hunter.id]]);\n        }\n      });\n    },\n    // 辅助方法\n    calculateDistance(pos1, pos2) {\n      return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    },\n    formatDate(dateString) {\n      if (!dateString) return '未知';\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    formatAlgorithm(algorithm) {\n      const map = {\n        'APF': '人工势场法',\n        'CONSENSUS': '共识算法'\n      };\n      return map[algorithm] || algorithm;\n    },\n    // 导航方法\n    navigateToList() {\n      // 清理资源后再导航\n      this.closeWebSocket();\n      this.cleanupTimers();\n      this.$router.push('/simulations');\n    },\n    // 状态提示显示方法\n    showInfoStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'info';\n      this.showConnectionStatus = true;\n    },\n    showSuccessStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'success';\n      this.showConnectionStatus = true;\n    },\n    showWarningStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'warning';\n      this.showConnectionStatus = true;\n    },\n    showErrorStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'error';\n      this.showConnectionStatus = true;\n    },\n    // 错误处理\n    handleApiError(error) {\n      console.error('API错误:', error);\n\n      // 特定错误处理\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\n        this.$toast.error('模拟不存在或已被删除');\n        this.$router.push('/simulations');\n      }\n    },\n    // 页面可见性处理\n    handleVisibilityChange() {\n      if (document.hidden) {\n        // 页面隐藏时暂停WebSocket\n        this.stopHeartbeat();\n      } else {\n        // 页面可见时恢复WebSocket\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n          this.startHeartbeat();\n        } else if (this.isRunning && !this.isCaptured) {\n          // 如果模拟正在运行，但WebSocket关闭，则重新连接\n          this.setupWebSocket();\n        }\n      }\n    },\n    // 窗口焦点变化处理\n    handleWindowFocus() {\n      if (this.isRunning && !this.isCaptured) {\n        // 如果模拟正在运行，确保WebSocket连接正常\n        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n          this.setupWebSocket();\n        }\n      }\n    },\n    handleWindowBlur() {\n      // 窗口失去焦点时的处理（如果需要）\n      // 可以降低更新频率等\n      this.optimizeChartUpdates = true;\n    },\n    // 清理定时器\n    cleanupTimers() {\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n        this.dataUpdateTimer = null;\n      }\n      if (this.chartUpdateTimer) {\n        clearTimeout(this.chartUpdateTimer);\n        this.chartUpdateTimer = null;\n      }\n    }\n  },\n  watch: {\n    simulationId: {\n      handler(newId, oldId) {\n        if (newId !== oldId) {\n          // 重新初始化组件\n          this.closeWebSocket();\n          this.cleanupTimers();\n          this.initializeComponent();\n        }\n      },\n      immediate: false\n    },\n    // 监视store中的当前模拟数据变化\n    storeCurrentSimulation: {\n      handler(newSimulation) {\n        if (newSimulation && newSimulation.id === this.simulationId) {\n          // 仅在首次加载或重要属性变化时更新本地数据\n          if (!this.simulation.id || newSimulation.is_running !== this.simulation.is_running || newSimulation.is_captured !== this.simulation.is_captured) {\n            this.simulation = newSimulation;\n            this.isRunning = newSimulation.is_running;\n            this.isCaptured = newSimulation.is_captured;\n          }\n        }\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["SimulationCanvas","mapState","mapGetters","name","components","props","simulationId","type","Number","required","data","simulation","isRunning","isCaptured","socket","showTrails","showVisionRange","showCommunicationRange","showDeleteDialog","deleteLoading","distanceChartOptions","chart","id","animations","enabled","toolbar","show","background","fontFamily","xaxis","title","text","labels","formatter","val","Math","floor","yaxis","min","colors","stroke","width","curve","lineCap","markers","size","hover","tooltip","x","y","toFixed","grid","padding","left","right","legend","position","horizontalAlign","responsive","breakpoint","options","height","distanceChartSeries","agentDistances","wsConnectionAttempts","wsMaxConnectionAttempts","wsReconnectDelay","heartbeatInterval","heartbeatTimeout","lastMessageTime","wsLatency","showConnectionStatus","connectionStatusText","connectionStatusColor","renderTime","lastRenderTimestamp","dataUpdateTimer","chartUpdateTimer","maxDataPoints","lastChartUpdate","optimizeChartUpdates","computed","storeCurrentSimulation","state","currentSimulation","simulationsLoading","loading","statusChipColor","statusChipText","hasWebSocket","readyState","WebSocket","OPEN","created","$root","$on","handleApiError","initializeComponent","mounted","document","addEventListener","handleVisibilityChange","window","handleWindowFocus","handleWindowBlur","beforeDestroy","closeWebSocket","cleanupTimers","$off","removeEventListener","methods","fetchSimulation","initDistanceChart","setupWebSocket","error","console","showErrorStatus","storeSimulation","getSimulationById","response","$store","dispatch","is_running","is_captured","$toast","wsProtocol","location","protocol","wsBaseUrl","process","env","VUE_APP_WS_URL","host","wsUrl","log","onopen","showSuccessStatus","startHeartbeat","onmessage","event","calculateWsLatency","JSON","parse","updateSimulationDataDebounced","heartbeat","resetHeartbeatTimeout","onclose","code","reason","stopHeartbeat","showWarningStatus","delay","pow","showInfoStatus","setTimeout","onerror","CONNECTING","close","setInterval","send","stringify","warn","clearInterval","clearTimeout","now","performance","round","startTime","hunters","targets","updateChartThrottled","timeSinceLastUpdate","updateDistanceChart","startSimulation","success","stopSimulation","resetSimulation","deleteSimulation","$router","push","map","hunter","forEach","length","target","index","distance","calculateDistance","step_count","firstPoint","slice","$set","pos1","pos2","sqrt","formatDate","dateString","date","Date","toLocaleString","formatAlgorithm","algorithm","navigateToList","message","status","includes","hidden","watch","handler","newId","oldId","immediate","newSimulation","deep"],"sources":["src/views/SimulationDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-detail\">\r\n    <v-container>\r\n      <v-row>\r\n        <v-col cols=\"12\">\r\n          <v-card>\r\n            <v-card-title class=\"headline\">\r\n              {{ simulation.name }}\r\n              <v-spacer></v-spacer>\r\n              <v-chip\r\n                :color=\"statusChipColor\"\r\n                text-color=\"white\"\r\n                small\r\n              >\r\n                {{ statusChipText }}\r\n              </v-chip>\r\n            </v-card-title>\r\n            <v-card-subtitle>{{ simulation.description }}</v-card-subtitle>\r\n            \r\n            <v-card-text>\r\n              <v-row>\r\n                <v-col cols=\"12\" md=\"8\">\r\n                  <simulation-canvas\r\n                    :hunters=\"simulation.hunters || []\"\r\n                    :targets=\"simulation.targets || []\"\r\n                    :environment-size=\"simulation.environment_size || 500\"\r\n                    :is-running=\"isRunning\"\r\n                    :is-captured=\"isCaptured\"\r\n                    :show-trails=\"showTrails\"\r\n                    :show-vision-range=\"showVisionRange\"\r\n                    :show-communication-range=\"showCommunicationRange\"\r\n                    @start=\"startSimulation\"\r\n                    @stop=\"stopSimulation\"\r\n                    @reset=\"resetSimulation\"\r\n                  ></simulation-canvas>\r\n                  \r\n                  <v-card class=\"mt-4\">\r\n                    <v-card-title>显示选项</v-card-title>\r\n                    <v-card-text>\r\n                      <v-row>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showTrails\"\r\n                            label=\"显示轨迹\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showVisionRange\"\r\n                            label=\"显示视野范围\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showCommunicationRange\"\r\n                            label=\"显示通信范围\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                      </v-row>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                </v-col>\r\n                \r\n                <v-col cols=\"12\" md=\"4\">\r\n                  <v-card>\r\n                    <v-card-title>模拟信息</v-card-title>\r\n                    <v-list dense>\r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>算法类型</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ formatAlgorithm(simulation.algorithm_type) }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>猎手数量</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.hunters ? simulation.hunters.length : 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>目标数量</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.targets ? simulation.targets.length : 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>环境大小</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.environment_size || 500 }} x {{ simulation.environment_size || 500 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>当前步数</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.step_count || 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item v-if=\"simulation.is_captured\">\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>捕获时间</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.capture_time ? simulation.capture_time.toFixed(2) + ' 秒' : '未知' }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>创建时间</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ formatDate(simulation.created_at) }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                    </v-list>\r\n                  </v-card>\r\n                  \r\n                  <v-card class=\"mt-4\">\r\n                    <v-card-title>猎手统计</v-card-title>\r\n                    <v-card-text v-if=\"simulation.hunters && simulation.hunters.length\">\r\n                      <apexchart\r\n                        type=\"line\"\r\n                        height=\"250\"\r\n                        :options=\"distanceChartOptions\"\r\n                        :series=\"distanceChartSeries\"\r\n                      ></apexchart>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                  \r\n                  <v-card class=\"mt-4\" v-if=\"simulation.step_count > 0\">\r\n                    <v-card-title>性能监控</v-card-title>\r\n                    <v-card-text>\r\n                      <v-row>\r\n                        <v-col cols=\"6\">\r\n                          <div class=\"text-subtitle-2\">渲染时间</div>\r\n                          <div>{{ renderTime }} ms</div>\r\n                        </v-col>\r\n                        <v-col cols=\"6\">\r\n                          <div class=\"text-subtitle-2\">WebSocket延迟</div>\r\n                          <div>{{ wsLatency }} ms</div>\r\n                        </v-col>\r\n                      </v-row>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                </v-col>\r\n              </v-row>\r\n            </v-card-text>\r\n            \r\n            <v-card-actions>\r\n              <v-btn text color=\"primary\" @click=\"navigateToList\">\r\n                <v-icon left>mdi-arrow-left</v-icon> 返回列表\r\n              </v-btn>\r\n              <v-spacer></v-spacer>\r\n              <v-btn text color=\"error\" @click=\"showDeleteDialog = true\">\r\n                <v-icon left>mdi-delete</v-icon> 删除模拟\r\n              </v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n    \r\n    <!-- 删除确认对话框 -->\r\n    <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title class=\"headline\">确认删除?</v-card-title>\r\n        <v-card-text>\r\n          此操作将永久删除该模拟及其所有相关数据，无法恢复。\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteDialog = false\">取消</v-btn>\r\n          <v-btn color=\"error\" text @click=\"deleteSimulation\" :loading=\"deleteLoading\">确认删除</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n    \r\n    <!-- 连接状态提示 -->\r\n    <v-snackbar\r\n      v-model=\"showConnectionStatus\"\r\n      :color=\"connectionStatusColor\"\r\n      :timeout=\"3000\"\r\n      bottom\r\n      right\r\n    >\r\n      {{ connectionStatusText }}\r\n      <template v-slot:action=\"{ attrs }\">\r\n        <v-btn\r\n          text\r\n          v-bind=\"attrs\"\r\n          @click=\"showConnectionStatus = false\"\r\n        >\r\n          关闭\r\n        </v-btn>\r\n      </template>\r\n    </v-snackbar>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\r\nimport { mapState, mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  name: 'SimulationDetail',\r\n  components: {\r\n    SimulationCanvas\r\n  },\r\n  props: {\r\n    simulationId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: {},\r\n      isRunning: false,\r\n      isCaptured: false,\r\n      socket: null,\r\n      showTrails: true,\r\n      showVisionRange: false,\r\n      showCommunicationRange: false,\r\n      showDeleteDialog: false,\r\n      deleteLoading: false,\r\n      \r\n      // 图表配置\r\n      distanceChartOptions: {\r\n        chart: {\r\n          id: 'distance-chart',\r\n          animations: {\r\n            enabled: false, // 禁用动画提高性能\r\n          },\r\n          toolbar: {\r\n            show: false\r\n          },\r\n          background: '#fff',\r\n          fontFamily: 'Roboto, sans-serif',\r\n        },\r\n        xaxis: {\r\n          type: 'numeric',\r\n          title: {\r\n            text: '步数'\r\n          },\r\n          labels: {\r\n            formatter: (val) => Math.floor(val)\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: '与目标距离'\r\n          },\r\n          min: function(min) {\r\n            return min * 0.9; // 最小值向下扩展10%\r\n          }\r\n        },\r\n        colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50', '#03a9f4', '#8bc34a', '#9c27b0', '#795548', '#607d8b'],\r\n        stroke: {\r\n          width: 2,\r\n          curve: 'smooth',\r\n          lineCap: 'round'\r\n        },\r\n        markers: {\r\n          size: 0, // 隐藏点标记提高性能\r\n          hover: {\r\n            size: 5\r\n          }\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            title: {\r\n              formatter: () => '步数'\r\n            }\r\n          },\r\n          y: {\r\n            formatter: (val) => `${val.toFixed(2)} 单位`\r\n          }\r\n        },\r\n        grid: {\r\n          padding: {\r\n            left: 10,\r\n            right: 10\r\n          }\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n          horizontalAlign: 'center'\r\n        },\r\n        responsive: [{\r\n          breakpoint: 768,\r\n          options: {\r\n            chart: {\r\n              height: 200\r\n            },\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      distanceChartSeries: [],\r\n      agentDistances: {},\r\n      \r\n      // WebSocket相关状态\r\n      wsConnectionAttempts: 0,\r\n      wsMaxConnectionAttempts: 5,\r\n      wsReconnectDelay: 2000,\r\n      heartbeatInterval: null,\r\n      heartbeatTimeout: null,\r\n      lastMessageTime: 0,\r\n      wsLatency: 0,\r\n      \r\n      // 连接状态提示\r\n      showConnectionStatus: false,\r\n      connectionStatusText: '',\r\n      connectionStatusColor: 'info',\r\n      \r\n      // 性能监控\r\n      renderTime: 0,\r\n      lastRenderTimestamp: 0,\r\n      \r\n      // 数据处理相关\r\n      dataUpdateTimer: null,\r\n      chartUpdateTimer: null,\r\n      maxDataPoints: 100, // 限制图表数据点数量\r\n      lastChartUpdate: 0,\r\n      optimizeChartUpdates: true,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      storeCurrentSimulation: state => state.currentSimulation,\r\n      simulationsLoading: state => state.loading\r\n    }),\r\n    ...mapGetters([\r\n      'getSimulationById'\r\n    ]),\r\n    statusChipColor() {\r\n      if (this.isCaptured) return 'success';\r\n      if (this.isRunning) return 'primary';\r\n      return 'grey';\r\n    },\r\n    statusChipText() {\r\n      if (this.isCaptured) return '已捕获';\r\n      if (this.isRunning) return '进行中';\r\n      return '已停止';\r\n    },\r\n    hasWebSocket() {\r\n      return !!this.socket && this.socket.readyState === WebSocket.OPEN;\r\n    }\r\n  },\r\n  created() {\r\n    // 注册错误处理事件监听\r\n    this.$root.$on('api-error', this.handleApiError);\r\n    \r\n    // 初始化\r\n    this.initializeComponent();\r\n  },\r\n  mounted() {\r\n    // 监听页面可见性变化\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    \r\n    // 监听窗口焦点变化\r\n    window.addEventListener('focus', this.handleWindowFocus);\r\n    window.addEventListener('blur', this.handleWindowBlur);\r\n  },\r\n  beforeDestroy() {\r\n    // 清理WebSocket连接\r\n    this.closeWebSocket();\r\n    \r\n    // 清理定时器\r\n    this.cleanupTimers();\r\n    \r\n    // 移除事件监听\r\n    this.$root.$off('api-error', this.handleApiError);\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.removeEventListener('focus', this.handleWindowFocus);\r\n    window.removeEventListener('blur', this.handleWindowBlur);\r\n  },\r\n  methods: {\r\n    async initializeComponent() {\r\n      try {\r\n        // 从API获取模拟数据\r\n        await this.fetchSimulation();\r\n        \r\n        // 初始化图表\r\n        this.initDistanceChart();\r\n        \r\n        // 设置WebSocket连接\r\n        this.setupWebSocket();\r\n      } catch (error) {\r\n        console.error('初始化组件失败:', error);\r\n        this.showErrorStatus('初始化失败，请刷新页面重试');\r\n      }\r\n    },\r\n    \r\n    // 获取模拟数据\r\n    async fetchSimulation() {\r\n      try {\r\n        // 尝试从store获取数据\r\n        let storeSimulation = this.getSimulationById(this.simulationId);\r\n        \r\n        // 如果store中没有数据，从API获取\r\n        if (!storeSimulation) {\r\n          const response = await this.$store.dispatch('fetchSimulation', this.simulationId);\r\n          this.simulation = response;\r\n        } else {\r\n          this.simulation = storeSimulation;\r\n        }\r\n        \r\n        // 更新状态\r\n        this.isRunning = this.simulation.is_running;\r\n        this.isCaptured = this.simulation.is_captured;\r\n        \r\n        return this.simulation;\r\n      } catch (error) {\r\n        console.error('获取模拟数据失败:', error);\r\n        this.$toast.error('获取模拟数据失败');\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    // WebSocket连接管理\r\n    setupWebSocket() {\r\n      // 关闭之前的连接\r\n      this.closeWebSocket();\r\n      \r\n      // 添加连接状态跟踪\r\n      this.wsConnectionAttempts = 0;\r\n      this.wsMaxConnectionAttempts = 5;\r\n      this.wsReconnectDelay = 2000; // 初始重连延迟（毫秒）\r\n      \r\n      // 创建新的WebSocket连接\r\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const wsBaseUrl = process.env.VUE_APP_WS_URL || `${wsProtocol}//${window.location.host}`;\r\n      const wsUrl = `${wsBaseUrl}/api/v1/ws/simulations/${this.simulationId}`;\r\n      \r\n      console.log(`连接WebSocket: ${wsUrl}`);\r\n      this.socket = new WebSocket(wsUrl);\r\n      \r\n      this.socket.onopen = () => {\r\n        console.log(`WebSocket连接已建立 (simulationId: ${this.simulationId})`);\r\n        // 重置重连计数器\r\n        this.wsConnectionAttempts = 0;\r\n        this.wsReconnectDelay = 2000;\r\n        // 显示连接成功提示\r\n        this.showSuccessStatus('WebSocket连接已建立');\r\n        // 添加心跳检测\r\n        this.startHeartbeat();\r\n      };\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        // 计算延迟\r\n        this.calculateWsLatency();\r\n        \r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.error) {\r\n            console.error('WebSocket错误:', data.error);\r\n            this.$toast.error(`WebSocket错误: ${data.error}`);\r\n            return;\r\n          }\r\n          \r\n          // 使用防抖更新数据，避免频繁更新\r\n          this.updateSimulationDataDebounced(data);\r\n          \r\n          // 如果是心跳响应，重置超时计时器\r\n          if (data.heartbeat) {\r\n            this.resetHeartbeatTimeout();\r\n          }\r\n        } catch (error) {\r\n          console.error('解析WebSocket消息失败:', error);\r\n        }\r\n      };\r\n      \r\n      this.socket.onclose = (event) => {\r\n        console.log(`WebSocket连接已关闭 (code: ${event.code}, reason: ${event.reason})`);\r\n        // 清理心跳计时器\r\n        this.stopHeartbeat();\r\n        \r\n        // 如果是正常关闭，不显示错误\r\n        if (event.code === 1000 || event.code === 1001) {\r\n          return;\r\n        }\r\n        \r\n        // 显示连接关闭提示\r\n        this.showWarningStatus('WebSocket连接已关闭');\r\n        \r\n        // 如果模拟仍在运行但连接关闭，尝试重新连接\r\n        if ((this.isRunning && !this.isCaptured) && \r\n            this.wsConnectionAttempts < this.wsMaxConnectionAttempts) {\r\n          // 指数退避重连策略\r\n          this.wsConnectionAttempts++;\r\n          const delay = Math.min(this.wsReconnectDelay * Math.pow(1.5, this.wsConnectionAttempts-1), 30000);\r\n          \r\n          console.log(`尝试重新连接WebSocket... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts}) 延迟: ${delay}ms`);\r\n          this.showInfoStatus(`正在重新连接... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts})`);\r\n          \r\n          setTimeout(() => this.setupWebSocket(), delay);\r\n        } else if (this.wsConnectionAttempts >= this.wsMaxConnectionAttempts) {\r\n          console.error('达到最大重连次数，停止尝试');\r\n          this.showErrorStatus('WebSocket连接失败，请刷新页面重试');\r\n        }\r\n      };\r\n      \r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket错误:', error);\r\n        this.showErrorStatus('WebSocket连接错误');\r\n      };\r\n    },\r\n    \r\n    // 关闭WebSocket连接\r\n    closeWebSocket() {\r\n      this.stopHeartbeat();\r\n      \r\n      if (this.socket) {\r\n        // 移除所有事件监听器\r\n        this.socket.onopen = null;\r\n        this.socket.onmessage = null;\r\n        this.socket.onclose = null;\r\n        this.socket.onerror = null;\r\n        \r\n        // 关闭连接\r\n        if (this.socket.readyState === WebSocket.OPEN || \r\n            this.socket.readyState === WebSocket.CONNECTING) {\r\n          this.socket.close();\r\n        }\r\n        this.socket = null;\r\n      }\r\n    },\r\n    \r\n    // 开始发送心跳\r\n    startHeartbeat() {\r\n      this.heartbeatInterval = setInterval(() => {\r\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n          // 发送心跳消息\r\n          this.socket.send(JSON.stringify({ type: 'heartbeat' }));\r\n          \r\n          // 设置心跳超时，如果超时没收到响应则重连\r\n          this.heartbeatTimeout = setTimeout(() => {\r\n            console.warn('心跳超时，尝试重新连接...');\r\n            this.closeWebSocket();\r\n            this.setupWebSocket();\r\n          }, 5000); // 5秒超时\r\n        }\r\n      }, 30000); // 每30秒发送一次心跳\r\n    },\r\n    \r\n    // 停止心跳\r\n    stopHeartbeat() {\r\n      if (this.heartbeatInterval) {\r\n        clearInterval(this.heartbeatInterval);\r\n        this.heartbeatInterval = null;\r\n      }\r\n      \r\n      if (this.heartbeatTimeout) {\r\n        clearTimeout(this.heartbeatTimeout);\r\n        this.heartbeatTimeout = null;\r\n      }\r\n    },\r\n    \r\n    // 重置心跳超时\r\n    resetHeartbeatTimeout() {\r\n      if (this.heartbeatTimeout) {\r\n        clearTimeout(this.heartbeatTimeout);\r\n        this.heartbeatTimeout = null;\r\n      }\r\n    },\r\n    \r\n    // 计算WebSocket延迟\r\n    calculateWsLatency() {\r\n      const now = performance.now();\r\n      if (this.lastMessageTime) {\r\n        this.wsLatency = Math.round(now - this.lastMessageTime);\r\n      }\r\n      this.lastMessageTime = now;\r\n    },\r\n    \r\n    // 防抖更新数据\r\n    updateSimulationDataDebounced(data) {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n      }\r\n      \r\n      this.dataUpdateTimer = setTimeout(() => {\r\n        const startTime = performance.now();\r\n        \r\n        // 更新模拟数据\r\n        this.simulation = data;\r\n        this.isRunning = data.is_running;\r\n        this.isCaptured = data.is_captured;\r\n        \r\n        // 更新Vuex存储\r\n        this.$store.dispatch('updateSimulationAgents', {\r\n          simulationId: this.simulationId,\r\n          hunters: data.hunters || [],\r\n          targets: data.targets || []\r\n        });\r\n        \r\n        // 更新图表（使用节流）\r\n        this.updateChartThrottled();\r\n        \r\n        // 计算渲染时间\r\n        this.renderTime = Math.round(performance.now() - startTime);\r\n      }, 50); // 50ms防抖延迟\r\n    },\r\n    \r\n    // 节流更新图表\r\n    updateChartThrottled() {\r\n      const now = performance.now();\r\n      const timeSinceLastUpdate = now - this.lastChartUpdate;\r\n      \r\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\r\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\r\n        if (!this.chartUpdateTimer) {\r\n          this.chartUpdateTimer = setTimeout(() => {\r\n            this.updateDistanceChart();\r\n            this.chartUpdateTimer = null;\r\n            this.lastChartUpdate = performance.now();\r\n          }, 200 - timeSinceLastUpdate);\r\n        }\r\n      } else {\r\n        // 直接更新\r\n        if (this.chartUpdateTimer) {\r\n          clearTimeout(this.chartUpdateTimer);\r\n          this.chartUpdateTimer = null;\r\n        }\r\n        this.updateDistanceChart();\r\n        this.lastChartUpdate = now;\r\n      }\r\n    },\r\n    \r\n    // 模拟控制方法\r\n    async startSimulation() {\r\n      try {\r\n        await this.$store.dispatch('startSimulation', this.simulationId);\r\n        this.isRunning = true;\r\n        this.$toast.success('模拟已启动');\r\n      } catch (error) {\r\n        console.error('启动模拟失败:', error);\r\n        this.$toast.error('启动模拟失败');\r\n      }\r\n    },\r\n    \r\n    async stopSimulation() {\r\n      try {\r\n        await this.$store.dispatch('stopSimulation', this.simulationId);\r\n        this.isRunning = false;\r\n        this.$toast.success('模拟已停止');\r\n      } catch (error) {\r\n        console.error('停止模拟失败:', error);\r\n        this.$toast.error('停止模拟失败');\r\n      }\r\n    },\r\n    \r\n    async resetSimulation() {\r\n      try {\r\n        const data = await this.$store.dispatch('resetSimulation', this.simulationId);\r\n        this.simulation = data;\r\n        this.isRunning = false;\r\n        this.isCaptured = false;\r\n        \r\n        // 重置图表数据\r\n        this.agentDistances = {};\r\n        this.initDistanceChart();\r\n        \r\n        this.$toast.success('模拟已重置');\r\n      } catch (error) {\r\n        console.error('重置模拟失败:', error);\r\n        this.$toast.error('重置模拟失败');\r\n      }\r\n    },\r\n    \r\n    async deleteSimulation() {\r\n      this.deleteLoading = true;\r\n      try {\r\n        await this.$store.dispatch('deleteSimulation', this.simulationId);\r\n        this.$toast.success('模拟已删除');\r\n        this.$router.push('/simulations');\r\n      } catch (error) {\r\n        console.error('删除模拟失败:', error);\r\n        this.$toast.error('删除模拟失败');\r\n      } finally {\r\n        this.deleteLoading = false;\r\n        this.showDeleteDialog = false;\r\n      }\r\n    },\r\n    \r\n    // 图表相关方法\r\n    initDistanceChart() {\r\n      if (!this.simulation.hunters || !this.simulation.targets) return;\r\n      \r\n      this.distanceChartSeries = this.simulation.hunters.map(hunter => ({\r\n        name: `猎手 ${hunter.id}`,\r\n        data: []\r\n      }));\r\n      \r\n      this.agentDistances = {};\r\n      this.simulation.hunters.forEach(hunter => {\r\n        this.agentDistances[hunter.id] = [];\r\n      });\r\n    },\r\n    \r\n    updateDistanceChart() {\r\n      if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) return;\r\n      \r\n      const target = this.simulation.targets[0];\r\n      \r\n      this.simulation.hunters.forEach((hunter, index) => {\r\n        // 计算与目标的距离\r\n        const distance = this.calculateDistance(hunter.position, target.position);\r\n        \r\n        if (!this.agentDistances[hunter.id]) {\r\n          this.agentDistances[hunter.id] = [];\r\n        }\r\n        \r\n        // 添加数据点\r\n        this.agentDistances[hunter.id].push({\r\n          x: this.simulation.step_count,\r\n          y: Math.round(distance * 100) / 100\r\n        });\r\n        \r\n        // 限制数据点数量，避免性能问题\r\n        if (this.agentDistances[hunter.id].length > this.maxDataPoints) {\r\n          // 清除旧数据点，但保留第一个点以保持连续性\r\n          const firstPoint = this.agentDistances[hunter.id][0];\r\n          this.agentDistances[hunter.id] = [\r\n            firstPoint,\r\n            ...this.agentDistances[hunter.id].slice(-this.maxDataPoints + 1)\r\n          ];\r\n        }\r\n        \r\n        // 更新图表数据 - 使用不可变更新\r\n        if (index < this.distanceChartSeries.length) {\r\n          // 创建新数组以触发图表更新\r\n          this.$set(this.distanceChartSeries[index], 'data', [...this.agentDistances[hunter.id]]);\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 辅助方法\r\n    calculateDistance(pos1, pos2) {\r\n      return Math.sqrt(\r\n        Math.pow(pos1[0] - pos2[0], 2) + \r\n        Math.pow(pos1[1] - pos2[1], 2)\r\n      );\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return '未知';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString();\r\n    },\r\n    \r\n    formatAlgorithm(algorithm) {\r\n      const map = {\r\n        'APF': '人工势场法',\r\n        'CONSENSUS': '共识算法'\r\n      };\r\n      return map[algorithm] || algorithm;\r\n    },\r\n    \r\n    // 导航方法\r\n    navigateToList() {\r\n      // 清理资源后再导航\r\n      this.closeWebSocket();\r\n      this.cleanupTimers();\r\n      this.$router.push('/simulations');\r\n    },\r\n    \r\n    // 状态提示显示方法\r\n    showInfoStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'info';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showSuccessStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'success';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showWarningStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'warning';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showErrorStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'error';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    // 错误处理\r\n    handleApiError(error) {\r\n      console.error('API错误:', error);\r\n      \r\n      // 特定错误处理\r\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\r\n        this.$toast.error('模拟不存在或已被删除');\r\n        this.$router.push('/simulations');\r\n      }\r\n    },\r\n    \r\n    // 页面可见性处理\r\n    handleVisibilityChange() {\r\n      if (document.hidden) {\r\n        // 页面隐藏时暂停WebSocket\r\n        this.stopHeartbeat();\r\n      } else {\r\n        // 页面可见时恢复WebSocket\r\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n          this.startHeartbeat();\r\n        } else if (this.isRunning && !this.isCaptured) {\r\n          // 如果模拟正在运行，但WebSocket关闭，则重新连接\r\n          this.setupWebSocket();\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 窗口焦点变化处理\r\n    handleWindowFocus() {\r\n      if (this.isRunning && !this.isCaptured) {\r\n        // 如果模拟正在运行，确保WebSocket连接正常\r\n        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n          this.setupWebSocket();\r\n        }\r\n      }\r\n    },\r\n    \r\n    handleWindowBlur() {\r\n      // 窗口失去焦点时的处理（如果需要）\r\n      // 可以降低更新频率等\r\n      this.optimizeChartUpdates = true;\r\n    },\r\n    \r\n    // 清理定时器\r\n    cleanupTimers() {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n        this.dataUpdateTimer = null;\r\n      }\r\n      \r\n      if (this.chartUpdateTimer) {\r\n        clearTimeout(this.chartUpdateTimer);\r\n        this.chartUpdateTimer = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    simulationId: {\r\n      handler(newId, oldId) {\r\n        if (newId !== oldId) {\r\n          // 重新初始化组件\r\n          this.closeWebSocket();\r\n          this.cleanupTimers();\r\n          this.initializeComponent();\r\n        }\r\n      },\r\n      immediate: false\r\n    },\r\n    \r\n    // 监视store中的当前模拟数据变化\r\n    storeCurrentSimulation: {\r\n      handler(newSimulation) {\r\n        if (newSimulation && newSimulation.id === this.simulationId) {\r\n          // 仅在首次加载或重要属性变化时更新本地数据\r\n          if (!this.simulation.id || \r\n              newSimulation.is_running !== this.simulation.is_running ||\r\n              newSimulation.is_captured !== this.simulation.is_captured) {\r\n            this.simulation = newSimulation;\r\n            this.isRunning = newSimulation.is_running;\r\n            this.isCaptured = newSimulation.is_captured;\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-detail {\r\n  padding-top: 16px;\r\n}\r\n\r\n.v-card__title {\r\n  word-break: break-word;\r\n}\r\n\r\n.v-card-text {\r\n  position: relative;\r\n}\r\n\r\n.v-list-item {\r\n  min-height: 40px;\r\n}\r\n\r\n.performance-monitor {\r\n  position: absolute;\r\n  bottom: 8px;\r\n  right: 8px;\r\n  font-size: 12px;\r\n  color: #999;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  z-index: 1;\r\n}\r\n\r\n@media (max-width: 960px) {\r\n  .simulation-detail {\r\n    padding-top: 8px;\r\n  }\r\n  \r\n  .v-card__title {\r\n    font-size: 18px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}