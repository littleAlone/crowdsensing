{"ast":null,"code":"import _toConsumableArray from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\nimport { mapState, mapGetters } from 'vuex';\nexport default {\n  name: 'SimulationDetail',\n  components: {\n    SimulationCanvas: SimulationCanvas\n  },\n  props: {\n    simulationId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      simulation: {},\n      isRunning: false,\n      isCaptured: false,\n      socket: null,\n      showTrails: true,\n      showVisionRange: false,\n      showCommunicationRange: false,\n      showDeleteDialog: false,\n      deleteLoading: false,\n      // 图表配置\n      chartInitialized: false,\n      distanceChartOptions: {\n        chart: {\n          id: 'distance-chart',\n          animations: {\n            enabled: false // 禁用动画提高性能\n          },\n          toolbar: {\n            show: false\n          },\n          background: '#fff',\n          fontFamily: 'Roboto, sans-serif'\n        },\n        xaxis: {\n          type: 'numeric',\n          title: {\n            text: '步数'\n          },\n          labels: {\n            formatter: function formatter(val) {\n              return Math.floor(val);\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: '与目标距离'\n          },\n          min: function min(_min) {\n            return _min ? _min * 0.9 : 0; // 最小值向下扩展10%\n          }\n        },\n        colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50', '#03a9f4', '#8bc34a', '#9c27b0', '#795548', '#607d8b'],\n        stroke: {\n          width: 2,\n          curve: 'smooth',\n          lineCap: 'round'\n        },\n        markers: {\n          size: 0,\n          // 隐藏点标记提高性能\n          hover: {\n            size: 5\n          }\n        },\n        tooltip: {\n          x: {\n            title: {\n              formatter: function formatter() {\n                return '步数';\n              }\n            }\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"\".concat(val.toFixed(2), \" \\u5355\\u4F4D\");\n            }\n          }\n        },\n        grid: {\n          padding: {\n            left: 10,\n            right: 10\n          }\n        },\n        legend: {\n          position: 'top',\n          horizontalAlign: 'center'\n        },\n        responsive: [{\n          breakpoint: 768,\n          options: {\n            chart: {\n              height: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }]\n      },\n      distanceChartSeries: [],\n      agentDistances: {},\n      // WebSocket相关状态\n      wsConnectionAttempts: 0,\n      wsMaxConnectionAttempts: 5,\n      wsReconnectDelay: 2000,\n      heartbeatInterval: null,\n      heartbeatTimeout: null,\n      lastMessageTime: 0,\n      wsLatency: 0,\n      // 连接状态提示\n      showConnectionStatus: false,\n      connectionStatusText: '',\n      connectionStatusColor: 'info',\n      // 性能监控\n      renderTime: 0,\n      lastRenderTimestamp: 0,\n      // 数据处理相关\n      dataUpdateTimer: null,\n      chartUpdateTimer: null,\n      maxDataPoints: 100,\n      // 限制图表数据点数量\n      lastChartUpdate: 0,\n      optimizeChartUpdates: true\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    storeCurrentSimulation: function storeCurrentSimulation(state) {\n      return state.currentSimulation;\n    },\n    simulationsLoading: function simulationsLoading(state) {\n      return state.loading;\n    }\n  })), mapGetters(['getSimulationById'])), {}, {\n    statusChipColor: function statusChipColor() {\n      if (this.isCaptured) return 'success';\n      if (this.isRunning) return 'primary';\n      return 'grey';\n    },\n    statusChipText: function statusChipText() {\n      if (this.isCaptured) return '已捕获';\n      if (this.isRunning) return '进行中';\n      return '已停止';\n    },\n    hasWebSocket: function hasWebSocket() {\n      return !!this.socket && this.socket.readyState === WebSocket.OPEN;\n    }\n  }),\n  created: function created() {\n    // 注册错误处理事件监听\n    this.$root.$on('api-error', this.handleApiError);\n  },\n  mounted: function mounted() {\n    // 监听页面可见性变化\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n\n    // 监听窗口焦点变化\n    window.addEventListener('focus', this.handleWindowFocus);\n    window.addEventListener('blur', this.handleWindowBlur);\n    this.initializeComponent();\n  },\n  initializeComponent: function initializeComponent() {\n    var _this = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _this.fetchSimulation();\n          case 3:\n            // 设置WebSocket连接\n            _this.setupWebSocket();\n\n            // 使用nextTick确保视图更新后再初始化图表\n            _this.$nextTick(function () {\n              // 增加更长的延迟确保DOM完全准备好\n              setTimeout(function () {\n                _this.safeInitDistanceChart();\n              }, 1000);\n            });\n            _context.next = 11;\n            break;\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('初始化组件失败:', _context.t0);\n            _this.showErrorStatus('初始化失败，请刷新页面重试');\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 7]]);\n    }))();\n  },\n  updated: function updated() {\n    var _this2 = this;\n    // 在组件更新后检查是否需要初始化图表\n    if (this.simulation.hunters && this.simulation.hunters.length && !this.chartInitialized) {\n      this.$nextTick(function () {\n        _this2.safeInitDistanceChart();\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    // 清理WebSocket连接\n    this.closeWebSocket();\n\n    // 清理定时器\n    this.cleanupTimers();\n\n    // 移除事件监听\n    this.$root.$off('api-error', this.handleApiError);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    window.removeEventListener('focus', this.handleWindowFocus);\n    window.removeEventListener('blur', this.handleWindowBlur);\n  },\n  methods: {\n    initializeComponent: function initializeComponent() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _this3.fetchSimulation();\n            case 3:\n              // 初始化图表 - 使用安全初始化方法\n              _this3.$nextTick(function () {\n                _this3.safeInitDistanceChart();\n              });\n\n              // 设置WebSocket连接\n              _this3.setupWebSocket();\n              _context2.next = 11;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('初始化组件失败:', _context2.t0);\n              _this3.showErrorStatus('初始化失败，请刷新页面重试');\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 7]]);\n      }))();\n    },\n    // 获取模拟数据\n    fetchSimulation: function fetchSimulation() {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var storeSimulation, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              // 尝试从store获取数据\n              storeSimulation = _this4.getSimulationById(_this4.simulationId); // 如果store中没有数据，从API获取\n              if (storeSimulation) {\n                _context3.next = 9;\n                break;\n              }\n              _context3.next = 5;\n              return _this4.$store.dispatch('fetchSimulation', _this4.simulationId);\n            case 5:\n              response = _context3.sent;\n              _this4.simulation = response;\n              _context3.next = 10;\n              break;\n            case 9:\n              _this4.simulation = storeSimulation;\n            case 10:\n              // 更新状态\n              _this4.isRunning = _this4.simulation.is_running;\n              _this4.isCaptured = _this4.simulation.is_captured;\n              return _context3.abrupt(\"return\", _this4.simulation);\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('获取模拟数据失败:', _context3.t0);\n              _this4.$toast.error('获取模拟数据失败');\n              throw _context3.t0;\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 15]]);\n      }))();\n    },\n    // 安全初始化图表方法 - 包含错误处理\n    safeInitDistanceChart: function safeInitDistanceChart() {\n      var _this5 = this;\n      // 增加判断，确保模拟数据已加载\n      if (!this.simulation.hunters || !this.simulation.hunters.length) {\n        console.log('模拟数据尚未加载，延迟图表初始化');\n        setTimeout(function () {\n          return _this5.safeInitDistanceChart();\n        }, 500);\n        return;\n      }\n\n      // 使用nextTick确保DOM已更新\n      this.$nextTick(function () {\n        // 再次检查DOM元素是否存在\n        if (!_this5.$refs.chartContainer) {\n          console.log('图表容器DOM元素尚未渲染，再次延迟初始化');\n          setTimeout(function () {\n            return _this5.safeInitDistanceChart();\n          }, 500);\n          return;\n        }\n        try {\n          _this5.initDistanceChart();\n          console.log('图表初始化成功');\n        } catch (error) {\n          console.error('初始化图表失败:', error);\n          setTimeout(function () {\n            if (!_this5.chartInitialized) {\n              _this5.safeInitDistanceChart();\n            }\n          }, 1000);\n        }\n      });\n    },\n    // WebSocket连接管理\n    setupWebSocket: function setupWebSocket() {\n      var _this6 = this;\n      // 关闭之前的连接\n      this.closeWebSocket();\n\n      // 添加连接状态跟踪\n      this.wsConnectionAttempts = 0;\n      this.wsMaxConnectionAttempts = 5;\n      this.wsReconnectDelay = 2000; // 初始重连延迟（毫秒）\n\n      // 创建新的WebSocket连接\n      var wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      var wsBaseUrl = \"\".concat(wsProtocol, \"//localhost:8000\");\n      var wsUrl = \"\".concat(wsBaseUrl, \"/api/v1/ws/simulations/\").concat(this.simulationId);\n      console.log(\"\\u8FDE\\u63A5WebSocket: \".concat(wsUrl));\n      this.socket = new WebSocket(wsUrl);\n      this.socket.onopen = function () {\n        console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB (simulationId: \".concat(_this6.simulationId, \")\"));\n        // 重置重连计数器\n        _this6.wsConnectionAttempts = 0;\n        _this6.wsReconnectDelay = 2000;\n        // 显示连接成功提示\n        _this6.showSuccessStatus('WebSocket连接已建立');\n        // 添加心跳检测\n        _this6.startHeartbeat();\n      };\n      this.socket.onmessage = function (event) {\n        // 计算延迟\n        _this6.calculateWsLatency();\n        try {\n          var data = JSON.parse(event.data);\n          if (data.error) {\n            console.error('WebSocket错误:', data.error);\n            _this6.$toast.error(\"WebSocket\\u9519\\u8BEF: \".concat(data.error));\n            return;\n          }\n\n          // 使用防抖更新数据，避免频繁更新\n          _this6.updateSimulationDataDebounced(data);\n\n          // 如果是心跳响应，重置超时计时器\n          if (data.heartbeat) {\n            _this6.resetHeartbeatTimeout();\n          }\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error);\n        }\n      };\n      this.socket.onclose = function (event) {\n        console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED (code: \".concat(event.code, \", reason: \").concat(event.reason, \")\"));\n        // 清理心跳计时器\n        _this6.stopHeartbeat();\n\n        // 如果是正常关闭，不显示错误\n        if (event.code === 1000 || event.code === 1001) {\n          return;\n        }\n\n        // 显示连接关闭提示\n        _this6.showWarningStatus('WebSocket连接已关闭');\n\n        // 如果模拟仍在运行但连接关闭，尝试重新连接\n        if (_this6.isRunning && !_this6.isCaptured && _this6.wsConnectionAttempts < _this6.wsMaxConnectionAttempts) {\n          // 指数退避重连策略\n          _this6.wsConnectionAttempts++;\n          var delay = Math.min(_this6.wsReconnectDelay * Math.pow(1.5, _this6.wsConnectionAttempts - 1), 30000);\n          console.log(\"\\u5C1D\\u8BD5\\u91CD\\u65B0\\u8FDE\\u63A5WebSocket... (\".concat(_this6.wsConnectionAttempts, \"/\").concat(_this6.wsMaxConnectionAttempts, \") \\u5EF6\\u8FDF: \").concat(delay, \"ms\"));\n          _this6.showInfoStatus(\"\\u6B63\\u5728\\u91CD\\u65B0\\u8FDE\\u63A5... (\".concat(_this6.wsConnectionAttempts, \"/\").concat(_this6.wsMaxConnectionAttempts, \")\"));\n          setTimeout(function () {\n            return _this6.setupWebSocket();\n          }, delay);\n        } else if (_this6.wsConnectionAttempts >= _this6.wsMaxConnectionAttempts) {\n          console.error('达到最大重连次数，停止尝试');\n          _this6.showErrorStatus('WebSocket连接失败，请刷新页面重试');\n        }\n      };\n      this.socket.onerror = function (error) {\n        console.error('WebSocket错误:', error);\n        _this6.showErrorStatus('WebSocket连接错误');\n      };\n    },\n    // 关闭WebSocket连接\n    closeWebSocket: function closeWebSocket() {\n      this.stopHeartbeat();\n      if (this.socket) {\n        // 移除所有事件监听器\n        this.socket.onopen = null;\n        this.socket.onmessage = null;\n        this.socket.onclose = null;\n        this.socket.onerror = null;\n\n        // 关闭连接\n        if (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING) {\n          this.socket.close();\n        }\n        this.socket = null;\n      }\n    },\n    // 开始发送心跳\n    startHeartbeat: function startHeartbeat() {\n      var _this7 = this;\n      this.heartbeatInterval = setInterval(function () {\n        if (_this7.socket && _this7.socket.readyState === WebSocket.OPEN) {\n          // 发送心跳消息\n          _this7.socket.send(JSON.stringify({\n            type: 'heartbeat'\n          }));\n\n          // 设置心跳超时，如果超时没收到响应则重连\n          _this7.heartbeatTimeout = setTimeout(function () {\n            console.warn('心跳超时，尝试重新连接...');\n            _this7.closeWebSocket();\n            _this7.setupWebSocket();\n          }, 5000); // 5秒超时\n        }\n      }, 30000); // 每30秒发送一次心跳\n    },\n    // 停止心跳\n    stopHeartbeat: function stopHeartbeat() {\n      if (this.heartbeatInterval) {\n        clearInterval(this.heartbeatInterval);\n        this.heartbeatInterval = null;\n      }\n      if (this.heartbeatTimeout) {\n        clearTimeout(this.heartbeatTimeout);\n        this.heartbeatTimeout = null;\n      }\n    },\n    // 重置心跳超时\n    resetHeartbeatTimeout: function resetHeartbeatTimeout() {\n      if (this.heartbeatTimeout) {\n        clearTimeout(this.heartbeatTimeout);\n        this.heartbeatTimeout = null;\n      }\n    },\n    // 计算WebSocket延迟\n    calculateWsLatency: function calculateWsLatency() {\n      var now = performance.now();\n      if (this.lastMessageTime) {\n        this.wsLatency = Math.round(now - this.lastMessageTime);\n      }\n      this.lastMessageTime = now;\n    },\n    // 防抖更新数据\n    // 修改更新模拟数据的方法\n    updateSimulationDataDebounced: function updateSimulationDataDebounced(data) {\n      var _this8 = this;\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n      }\n      this.dataUpdateTimer = setTimeout(function () {\n        var startTime = performance.now();\n\n        // 更新模拟数据\n        _this8.simulation = data;\n        _this8.isRunning = data.is_running;\n        _this8.isCaptured = data.is_captured;\n\n        // 使用nextTick确保视图更新后再更新图表\n        _this8.$nextTick(function () {\n          // 更新Vuex存储\n          _this8.$store.dispatch('updateSimulationAgents', {\n            simulationId: _this8.simulationId,\n            hunters: data.hunters || [],\n            targets: data.targets || []\n          });\n\n          // 更新图表（使用节流）\n          if (_this8.chartInitialized && _this8.$refs.chartContainer) {\n            _this8.updateChartThrottled();\n          } else if (!_this8.chartInitialized && _this8.$refs.chartContainer) {\n            // 如果图表尚未初始化但DOM元素已存在，尝试初始化\n            _this8.safeInitDistanceChart();\n          }\n\n          // 计算渲染时间\n          _this8.renderTime = Math.round(performance.now() - startTime);\n        });\n      }, 50);\n    },\n    // 节流更新图表\n    updateChartThrottled: function updateChartThrottled() {\n      var _this9 = this;\n      var now = performance.now();\n      var timeSinceLastUpdate = now - this.lastChartUpdate;\n\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\n        if (!this.chartUpdateTimer) {\n          this.chartUpdateTimer = setTimeout(function () {\n            _this9.safeUpdateDistanceChart();\n            _this9.chartUpdateTimer = null;\n            _this9.lastChartUpdate = performance.now();\n          }, 200 - timeSinceLastUpdate);\n        }\n      } else {\n        // 直接更新\n        if (this.chartUpdateTimer) {\n          clearTimeout(this.chartUpdateTimer);\n          this.chartUpdateTimer = null;\n        }\n        this.safeUpdateDistanceChart();\n        this.lastChartUpdate = now;\n      }\n    },\n    // 安全更新图表 - 包含错误处理\n    safeUpdateDistanceChart: function safeUpdateDistanceChart() {\n      var _this10 = this;\n      try {\n        if (this.chartInitialized) {\n          this.updateDistanceChart();\n        }\n      } catch (error) {\n        console.error('更新图表失败:', error);\n        // 如果更新失败，尝试重新初始化图表\n        this.chartInitialized = false;\n        this.$nextTick(function () {\n          _this10.safeInitDistanceChart();\n        });\n      }\n    },\n    // 模拟控制方法\n    startSimulation: function startSimulation() {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _this11.$store.dispatch('startSimulation', _this11.simulationId);\n            case 3:\n              _this11.isRunning = true;\n              _this11.$toast.success('模拟已启动');\n              _context4.next = 11;\n              break;\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('启动模拟失败:', _context4.t0);\n              _this11.$toast.error('启动模拟失败');\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 7]]);\n      }))();\n    },\n    stopSimulation: function stopSimulation() {\n      var _this12 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return _this12.$store.dispatch('stopSimulation', _this12.simulationId);\n            case 3:\n              _this12.isRunning = false;\n              _this12.$toast.success('模拟已停止');\n              _context5.next = 11;\n              break;\n            case 7:\n              _context5.prev = 7;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.error('停止模拟失败:', _context5.t0);\n              _this12.$toast.error('停止模拟失败');\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[0, 7]]);\n      }))();\n    },\n    resetSimulation: function resetSimulation() {\n      var _this13 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return _this13.$store.dispatch('resetSimulation', _this13.simulationId);\n            case 3:\n              data = _context6.sent;\n              _this13.simulation = data;\n              _this13.isRunning = false;\n              _this13.isCaptured = false;\n\n              // 重置图表数据\n              _this13.agentDistances = {};\n              _this13.chartInitialized = false; // 标记需要重新初始化\n              _this13.$nextTick(function () {\n                _this13.safeInitDistanceChart();\n              });\n              _this13.$toast.success('模拟已重置');\n              _context6.next = 17;\n              break;\n            case 13:\n              _context6.prev = 13;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.error('重置模拟失败:', _context6.t0);\n              _this13.$toast.error('重置模拟失败');\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[0, 13]]);\n      }))();\n    },\n    deleteSimulation: function deleteSimulation() {\n      var _this14 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _this14.deleteLoading = true;\n              _context7.prev = 1;\n              _context7.next = 4;\n              return _this14.$store.dispatch('deleteSimulation', _this14.simulationId);\n            case 4:\n              _this14.$toast.success('模拟已删除');\n              _this14.$router.push('/simulations');\n              _context7.next = 12;\n              break;\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](1);\n              console.error('删除模拟失败:', _context7.t0);\n              _this14.$toast.error('删除模拟失败');\n            case 12:\n              _context7.prev = 12;\n              _this14.deleteLoading = false;\n              _this14.showDeleteDialog = false;\n              return _context7.finish(12);\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[1, 8, 12, 16]]);\n      }))();\n    },\n    // 图表相关方法\n    initDistanceChart: function initDistanceChart() {\n      var _this15 = this;\n      if (!this.simulation.hunters || !this.simulation.targets) return;\n\n      // 确保DOM元素存在\n      if (!this.$refs.chartContainer) {\n        console.warn('图表容器未找到，延迟初始化');\n        return;\n      }\n\n      // 清空旧数据\n      this.distanceChartSeries = [];\n      this.agentDistances = {};\n\n      // 为每个猎手创建数据系列\n      if (this.simulation.hunters && this.simulation.hunters.length > 0) {\n        this.distanceChartSeries = this.simulation.hunters.map(function (hunter) {\n          return {\n            name: \"\\u730E\\u624B \".concat(hunter.id),\n            data: []\n          };\n        });\n        this.simulation.hunters.forEach(function (hunter) {\n          _this15.agentDistances[hunter.id] = [];\n        });\n      }\n\n      // 标记图表已初始化\n      this.chartInitialized = true;\n      console.log('图表初始化完成');\n    },\n    updateDistanceChart: function updateDistanceChart() {\n      var _this16 = this;\n      if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) {\n        return;\n      }\n      var target = this.simulation.targets[0];\n      if (!target || !target.position) return;\n      this.simulation.hunters.forEach(function (hunter, index) {\n        // 确保猎手数据有效\n        if (!hunter || !hunter.position) return;\n\n        // 计算与目标的距离\n        var distance = _this16.calculateDistance(hunter.position, target.position);\n        if (!_this16.agentDistances[hunter.id]) {\n          _this16.agentDistances[hunter.id] = [];\n        }\n\n        // 添加数据点\n        _this16.agentDistances[hunter.id].push({\n          x: _this16.simulation.step_count,\n          y: Math.round(distance * 100) / 100\n        });\n\n        // 限制数据点数量，避免性能问题\n        if (_this16.agentDistances[hunter.id].length > _this16.maxDataPoints) {\n          // 清除旧数据点，但保留第一个点以保持连续性\n          var firstPoint = _this16.agentDistances[hunter.id][0];\n          _this16.agentDistances[hunter.id] = [firstPoint].concat(_toConsumableArray(_this16.agentDistances[hunter.id].slice(-_this16.maxDataPoints + 1)));\n        }\n\n        // 确保索引有效\n        if (index < _this16.distanceChartSeries.length) {\n          // 使用Vue的$set方法更新数组，确保响应式更新\n          _this16.$set(_this16.distanceChartSeries[index], 'data', _toConsumableArray(_this16.agentDistances[hunter.id]));\n        }\n      });\n    },\n    // 辅助方法\n    calculateDistance: function calculateDistance(pos1, pos2) {\n      return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n    },\n    formatDate: function formatDate(dateString) {\n      if (!dateString) return '未知';\n      var date = new Date(dateString);\n      return date.toLocaleString();\n    },\n    formatAlgorithm: function formatAlgorithm(algorithm) {\n      var map = {\n        'APF': '人工势场法',\n        'CONSENSUS': '共识算法'\n      };\n      return map[algorithm] || algorithm;\n    },\n    // 导航方法\n    navigateToList: function navigateToList() {\n      // 清理资源后再导航\n      this.closeWebSocket();\n      this.cleanupTimers();\n      this.$router.push('/simulations');\n    },\n    // 状态提示显示方法\n    showInfoStatus: function showInfoStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'info';\n      this.showConnectionStatus = true;\n    },\n    showSuccessStatus: function showSuccessStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'success';\n      this.showConnectionStatus = true;\n    },\n    showWarningStatus: function showWarningStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'warning';\n      this.showConnectionStatus = true;\n    },\n    showErrorStatus: function showErrorStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'error';\n      this.showConnectionStatus = true;\n    },\n    // 错误处理\n    handleApiError: function handleApiError(error) {\n      console.error('API错误:', error);\n\n      // 特定错误处理\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\n        this.$toast.error('模拟不存在或已被删除');\n        this.$router.push('/simulations');\n      }\n    },\n    // 页面可见性处理\n    handleVisibilityChange: function handleVisibilityChange() {\n      if (document.hidden) {\n        // 页面隐藏时暂停WebSocket\n        this.stopHeartbeat();\n      } else {\n        // 页面可见时恢复WebSocket\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n          this.startHeartbeat();\n        } else if (this.isRunning && !this.isCaptured) {\n          // 如果模拟正在运行，但WebSocket关闭，则重新连接\n          this.setupWebSocket();\n        }\n      }\n    },\n    // 窗口焦点变化处理\n    handleWindowFocus: function handleWindowFocus() {\n      if (this.isRunning && !this.isCaptured) {\n        // 如果模拟正在运行，确保WebSocket连接正常\n        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n          this.setupWebSocket();\n        }\n      }\n    },\n    handleWindowBlur: function handleWindowBlur() {\n      // 窗口失去焦点时的处理（如果需要）\n      // 可以降低更新频率等\n      this.optimizeChartUpdates = true;\n    },\n    // 清理定时器\n    cleanupTimers: function cleanupTimers() {\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n        this.dataUpdateTimer = null;\n      }\n      if (this.chartUpdateTimer) {\n        clearTimeout(this.chartUpdateTimer);\n        this.chartUpdateTimer = null;\n      }\n    }\n  },\n  watch: {\n    simulationId: {\n      handler: function handler(newId, oldId) {\n        if (newId !== oldId) {\n          // 重新初始化组件\n          this.closeWebSocket();\n          this.cleanupTimers();\n          this.chartInitialized = false;\n          this.initializeComponent();\n        }\n      },\n      immediate: false\n    },\n    // 监视store中的当前模拟数据变化\n    storeCurrentSimulation: {\n      handler: function handler(newSimulation) {\n        if (newSimulation && newSimulation.id === this.simulationId) {\n          // 仅在首次加载或重要属性变化时更新本地数据\n          if (!this.simulation.id || newSimulation.is_running !== this.simulation.is_running || newSimulation.is_captured !== this.simulation.is_captured) {\n            this.simulation = newSimulation;\n            this.isRunning = newSimulation.is_running;\n            this.isCaptured = newSimulation.is_captured;\n          }\n        }\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["SimulationCanvas","mapState","mapGetters","name","components","props","simulationId","type","Number","required","data","simulation","isRunning","isCaptured","socket","showTrails","showVisionRange","showCommunicationRange","showDeleteDialog","deleteLoading","chartInitialized","distanceChartOptions","chart","id","animations","enabled","toolbar","show","background","fontFamily","xaxis","title","text","labels","formatter","val","Math","floor","yaxis","min","colors","stroke","width","curve","lineCap","markers","size","hover","tooltip","x","y","concat","toFixed","grid","padding","left","right","legend","position","horizontalAlign","responsive","breakpoint","options","height","distanceChartSeries","agentDistances","wsConnectionAttempts","wsMaxConnectionAttempts","wsReconnectDelay","heartbeatInterval","heartbeatTimeout","lastMessageTime","wsLatency","showConnectionStatus","connectionStatusText","connectionStatusColor","renderTime","lastRenderTimestamp","dataUpdateTimer","chartUpdateTimer","maxDataPoints","lastChartUpdate","optimizeChartUpdates","computed","_objectSpread","storeCurrentSimulation","state","currentSimulation","simulationsLoading","loading","statusChipColor","statusChipText","hasWebSocket","readyState","WebSocket","OPEN","created","$root","$on","handleApiError","mounted","document","addEventListener","handleVisibilityChange","window","handleWindowFocus","handleWindowBlur","initializeComponent","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","fetchSimulation","setupWebSocket","$nextTick","setTimeout","safeInitDistanceChart","t0","console","error","showErrorStatus","stop","updated","_this2","hunters","length","beforeDestroy","closeWebSocket","cleanupTimers","$off","removeEventListener","methods","_this3","_callee2","_callee2$","_context2","_this4","_callee3","storeSimulation","response","_callee3$","_context3","getSimulationById","$store","dispatch","sent","is_running","is_captured","abrupt","$toast","_this5","log","$refs","chartContainer","initDistanceChart","_this6","wsProtocol","location","protocol","wsBaseUrl","wsUrl","onopen","showSuccessStatus","startHeartbeat","onmessage","event","calculateWsLatency","JSON","parse","updateSimulationDataDebounced","heartbeat","resetHeartbeatTimeout","onclose","code","reason","stopHeartbeat","showWarningStatus","delay","pow","showInfoStatus","onerror","CONNECTING","close","_this7","setInterval","send","stringify","warn","clearInterval","clearTimeout","now","performance","round","_this8","startTime","targets","updateChartThrottled","_this9","timeSinceLastUpdate","safeUpdateDistanceChart","_this10","updateDistanceChart","startSimulation","_this11","_callee4","_callee4$","_context4","success","stopSimulation","_this12","_callee5","_callee5$","_context5","resetSimulation","_this13","_callee6","_callee6$","_context6","deleteSimulation","_this14","_callee7","_callee7$","_context7","$router","push","finish","_this15","map","hunter","forEach","_this16","target","index","distance","calculateDistance","step_count","firstPoint","_toConsumableArray","slice","$set","pos1","pos2","sqrt","formatDate","dateString","date","Date","toLocaleString","formatAlgorithm","algorithm","navigateToList","message","status","includes","hidden","watch","handler","newId","oldId","immediate","newSimulation","deep"],"sources":["src/views/SimulationDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-detail\">\r\n    <v-container>\r\n      <v-row>\r\n        <v-col cols=\"12\">\r\n          <v-card>\r\n            <v-card-title class=\"headline\">\r\n              {{ simulation.name }}\r\n              <v-spacer></v-spacer>\r\n              <v-chip\r\n                :color=\"statusChipColor\"\r\n                text-color=\"white\"\r\n                small\r\n              >\r\n                {{ statusChipText }}\r\n              </v-chip>\r\n            </v-card-title>\r\n            <v-card-subtitle>{{ simulation.description }}</v-card-subtitle>\r\n            \r\n            <v-card-text>\r\n              <v-row>\r\n                <v-col cols=\"12\" md=\"8\">\r\n                  <simulation-canvas\r\n                    :hunters=\"simulation.hunters || []\"\r\n                    :targets=\"simulation.targets || []\"\r\n                    :environment-size=\"simulation.environment_size || 500\"\r\n                    :is-running=\"isRunning\"\r\n                    :is-captured=\"isCaptured\"\r\n                    :show-trails=\"showTrails\"\r\n                    :show-vision-range=\"showVisionRange\"\r\n                    :show-communication-range=\"showCommunicationRange\"\r\n                    @start=\"startSimulation\"\r\n                    @stop=\"stopSimulation\"\r\n                    @reset=\"resetSimulation\"\r\n                  ></simulation-canvas>\r\n                  \r\n                  <v-card class=\"mt-4\">\r\n                    <v-card-title>显示选项</v-card-title>\r\n                    <v-card-text>\r\n                      <v-row>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showTrails\"\r\n                            label=\"显示轨迹\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showVisionRange\"\r\n                            label=\"显示视野范围\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                        <v-col cols=\"12\" sm=\"4\">\r\n                          <v-switch\r\n                            v-model=\"showCommunicationRange\"\r\n                            label=\"显示通信范围\"\r\n                            color=\"primary\"\r\n                            hide-details\r\n                            class=\"ma-2\"\r\n                          ></v-switch>\r\n                        </v-col>\r\n                      </v-row>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                </v-col>\r\n                \r\n                <v-col cols=\"12\" md=\"4\">\r\n                  <v-card>\r\n                    <v-card-title>模拟信息</v-card-title>\r\n                    <v-list dense>\r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>算法类型</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ formatAlgorithm(simulation.algorithm_type) }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>猎手数量</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.hunters ? simulation.hunters.length : 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>目标数量</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.targets ? simulation.targets.length : 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>环境大小</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.environment_size || 500 }} x {{ simulation.environment_size || 500 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>当前步数</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.step_count || 0 }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item v-if=\"simulation.is_captured\">\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>捕获时间</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ simulation.capture_time ? simulation.capture_time.toFixed(2) + ' 秒' : '未知' }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                      \r\n                      <v-list-item>\r\n                        <v-list-item-content>\r\n                          <v-list-item-subtitle>创建时间</v-list-item-subtitle>\r\n                          <v-list-item-title>{{ formatDate(simulation.created_at) }}</v-list-item-title>\r\n                        </v-list-item-content>\r\n                      </v-list-item>\r\n                    </v-list>\r\n                  </v-card>\r\n                  \r\n                  <v-card class=\"mt-4\">\r\n                    <v-card-title>猎手统计</v-card-title>\r\n                    <v-card-text v-if=\"simulation.hunters && simulation.hunters.length && chartInitialized\">\r\n                      <div id=\"distance-chart-container\" ref=\"chartContainer\">\r\n                        <apexchart\r\n                          ref=\"distanceChart\"\r\n                          type=\"line\"\r\n                          height=\"250\"\r\n                          :options=\"distanceChartOptions\"\r\n                          :series=\"distanceChartSeries\"\r\n                        ></apexchart>\r\n                      </div>\r\n                    </v-card-text>\r\n                    <v-card-text v-else>\r\n                      <p class=\"text-center\">等待数据加载...</p>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                  \r\n                  <v-card class=\"mt-4\" v-if=\"simulation.step_count > 0\">\r\n                    <v-card-title>性能监控</v-card-title>\r\n                    <v-card-text>\r\n                      <v-row>\r\n                        <v-col cols=\"6\">\r\n                          <div class=\"text-subtitle-2\">渲染时间</div>\r\n                          <div>{{ renderTime }} ms</div>\r\n                        </v-col>\r\n                        <v-col cols=\"6\">\r\n                          <div class=\"text-subtitle-2\">WebSocket延迟</div>\r\n                          <div>{{ wsLatency }} ms</div>\r\n                        </v-col>\r\n                      </v-row>\r\n                    </v-card-text>\r\n                  </v-card>\r\n                </v-col>\r\n              </v-row>\r\n            </v-card-text>\r\n            \r\n            <v-card-actions>\r\n              <v-btn text color=\"primary\" @click=\"navigateToList\">\r\n                <v-icon left>mdi-arrow-left</v-icon> 返回列表\r\n              </v-btn>\r\n              <v-spacer></v-spacer>\r\n              <v-btn text color=\"error\" @click=\"showDeleteDialog = true\">\r\n                <v-icon left>mdi-delete</v-icon> 删除模拟\r\n              </v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n    \r\n    <!-- 删除确认对话框 -->\r\n    <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title class=\"headline\">确认删除?</v-card-title>\r\n        <v-card-text>\r\n          此操作将永久删除该模拟及其所有相关数据，无法恢复。\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteDialog = false\">取消</v-btn>\r\n          <v-btn color=\"error\" text @click=\"deleteSimulation\" :loading=\"deleteLoading\">确认删除</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n    \r\n    <!-- 连接状态提示 -->\r\n    <v-snackbar\r\n      v-model=\"showConnectionStatus\"\r\n      :color=\"connectionStatusColor\"\r\n      :timeout=\"3000\"\r\n      bottom\r\n      right\r\n    >\r\n      {{ connectionStatusText }}\r\n      <template v-slot:action=\"{ attrs }\">\r\n        <v-btn\r\n          text\r\n          v-bind=\"attrs\"\r\n          @click=\"showConnectionStatus = false\"\r\n        >\r\n          关闭\r\n        </v-btn>\r\n      </template>\r\n    </v-snackbar>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\r\nimport { mapState, mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  name: 'SimulationDetail',\r\n  components: {\r\n    SimulationCanvas\r\n  },\r\n  props: {\r\n    simulationId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: {},\r\n      isRunning: false,\r\n      isCaptured: false,\r\n      socket: null,\r\n      showTrails: true,\r\n      showVisionRange: false,\r\n      showCommunicationRange: false,\r\n      showDeleteDialog: false,\r\n      deleteLoading: false,\r\n      \r\n      // 图表配置\r\n      chartInitialized: false,\r\n      distanceChartOptions: {\r\n        chart: {\r\n          id: 'distance-chart',\r\n          animations: {\r\n            enabled: false, // 禁用动画提高性能\r\n          },\r\n          toolbar: {\r\n            show: false\r\n          },\r\n          background: '#fff',\r\n          fontFamily: 'Roboto, sans-serif',\r\n        },\r\n        xaxis: {\r\n          type: 'numeric',\r\n          title: {\r\n            text: '步数'\r\n          },\r\n          labels: {\r\n            formatter: (val) => Math.floor(val)\r\n          }\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: '与目标距离'\r\n          },\r\n          min: function(min) {\r\n            return min ? min * 0.9 : 0; // 最小值向下扩展10%\r\n          }\r\n        },\r\n        colors: ['#3f51b5', '#673ab7', '#e91e63', '#ff9800', '#4caf50', '#03a9f4', '#8bc34a', '#9c27b0', '#795548', '#607d8b'],\r\n        stroke: {\r\n          width: 2,\r\n          curve: 'smooth',\r\n          lineCap: 'round'\r\n        },\r\n        markers: {\r\n          size: 0, // 隐藏点标记提高性能\r\n          hover: {\r\n            size: 5\r\n          }\r\n        },\r\n        tooltip: {\r\n          x: {\r\n            title: {\r\n              formatter: () => '步数'\r\n            }\r\n          },\r\n          y: {\r\n            formatter: (val) => `${val.toFixed(2)} 单位`\r\n          }\r\n        },\r\n        grid: {\r\n          padding: {\r\n            left: 10,\r\n            right: 10\r\n          }\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n          horizontalAlign: 'center'\r\n        },\r\n        responsive: [{\r\n          breakpoint: 768,\r\n          options: {\r\n            chart: {\r\n              height: 200\r\n            },\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      distanceChartSeries: [],\r\n      agentDistances: {},\r\n      \r\n      // WebSocket相关状态\r\n      wsConnectionAttempts: 0,\r\n      wsMaxConnectionAttempts: 5,\r\n      wsReconnectDelay: 2000,\r\n      heartbeatInterval: null,\r\n      heartbeatTimeout: null,\r\n      lastMessageTime: 0,\r\n      wsLatency: 0,\r\n      \r\n      // 连接状态提示\r\n      showConnectionStatus: false,\r\n      connectionStatusText: '',\r\n      connectionStatusColor: 'info',\r\n      \r\n      // 性能监控\r\n      renderTime: 0,\r\n      lastRenderTimestamp: 0,\r\n      \r\n      // 数据处理相关\r\n      dataUpdateTimer: null,\r\n      chartUpdateTimer: null,\r\n      maxDataPoints: 100, // 限制图表数据点数量\r\n      lastChartUpdate: 0,\r\n      optimizeChartUpdates: true,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      storeCurrentSimulation: state => state.currentSimulation,\r\n      simulationsLoading: state => state.loading\r\n    }),\r\n    ...mapGetters([\r\n      'getSimulationById'\r\n    ]),\r\n    statusChipColor() {\r\n      if (this.isCaptured) return 'success';\r\n      if (this.isRunning) return 'primary';\r\n      return 'grey';\r\n    },\r\n    statusChipText() {\r\n      if (this.isCaptured) return '已捕获';\r\n      if (this.isRunning) return '进行中';\r\n      return '已停止';\r\n    },\r\n    hasWebSocket() {\r\n      return !!this.socket && this.socket.readyState === WebSocket.OPEN;\r\n    }\r\n  },\r\n  created() {\r\n    // 注册错误处理事件监听\r\n    this.$root.$on('api-error', this.handleApiError);\r\n  },\r\n  mounted() {\r\n    // 监听页面可见性变化\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    \r\n    // 监听窗口焦点变化\r\n    window.addEventListener('focus', this.handleWindowFocus);\r\n    window.addEventListener('blur', this.handleWindowBlur);\r\n    \r\n    this.initializeComponent();\r\n  },\r\n  async initializeComponent() {\r\n    try {\r\n      // 先获取模拟数据\r\n      await this.fetchSimulation();\r\n      \r\n      // 设置WebSocket连接\r\n      this.setupWebSocket();\r\n      \r\n      // 使用nextTick确保视图更新后再初始化图表\r\n      this.$nextTick(() => {\r\n        // 增加更长的延迟确保DOM完全准备好\r\n        setTimeout(() => {\r\n          this.safeInitDistanceChart();\r\n        }, 1000);\r\n      });\r\n    } catch (error) {\r\n      console.error('初始化组件失败:', error);\r\n      this.showErrorStatus('初始化失败，请刷新页面重试');\r\n    }\r\n  },\r\n  updated() {\r\n    // 在组件更新后检查是否需要初始化图表\r\n    if (this.simulation.hunters && \r\n        this.simulation.hunters.length && \r\n        !this.chartInitialized) {\r\n      this.$nextTick(() => {\r\n        this.safeInitDistanceChart();\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // 清理WebSocket连接\r\n    this.closeWebSocket();\r\n    \r\n    // 清理定时器\r\n    this.cleanupTimers();\r\n    \r\n    // 移除事件监听\r\n    this.$root.$off('api-error', this.handleApiError);\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.removeEventListener('focus', this.handleWindowFocus);\r\n    window.removeEventListener('blur', this.handleWindowBlur);\r\n  },\r\n  methods: {\r\n    async initializeComponent() {\r\n      try {\r\n        // 从API获取模拟数据\r\n        await this.fetchSimulation();\r\n        \r\n        // 初始化图表 - 使用安全初始化方法\r\n        this.$nextTick(() => {\r\n          this.safeInitDistanceChart();\r\n        });\r\n        \r\n        // 设置WebSocket连接\r\n        this.setupWebSocket();\r\n      } catch (error) {\r\n        console.error('初始化组件失败:', error);\r\n        this.showErrorStatus('初始化失败，请刷新页面重试');\r\n      }\r\n    },\r\n    \r\n    // 获取模拟数据\r\n    async fetchSimulation() {\r\n      try {\r\n        // 尝试从store获取数据\r\n        let storeSimulation = this.getSimulationById(this.simulationId);\r\n        \r\n        // 如果store中没有数据，从API获取\r\n        if (!storeSimulation) {\r\n          const response = await this.$store.dispatch('fetchSimulation', this.simulationId);\r\n          this.simulation = response;\r\n        } else {\r\n          this.simulation = storeSimulation;\r\n        }\r\n        \r\n        // 更新状态\r\n        this.isRunning = this.simulation.is_running;\r\n        this.isCaptured = this.simulation.is_captured;\r\n        \r\n        return this.simulation;\r\n      } catch (error) {\r\n        console.error('获取模拟数据失败:', error);\r\n        this.$toast.error('获取模拟数据失败');\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    // 安全初始化图表方法 - 包含错误处理\r\n    safeInitDistanceChart() {\r\n      // 增加判断，确保模拟数据已加载\r\n      if (!this.simulation.hunters || !this.simulation.hunters.length) {\r\n        console.log('模拟数据尚未加载，延迟图表初始化');\r\n        setTimeout(() => this.safeInitDistanceChart(), 500);\r\n        return;\r\n      }\r\n      \r\n      // 使用nextTick确保DOM已更新\r\n      this.$nextTick(() => {\r\n        // 再次检查DOM元素是否存在\r\n        if (!this.$refs.chartContainer) {\r\n          console.log('图表容器DOM元素尚未渲染，再次延迟初始化');\r\n          setTimeout(() => this.safeInitDistanceChart(), 500);\r\n          return;\r\n        }\r\n        \r\n        try {\r\n          this.initDistanceChart();\r\n          console.log('图表初始化成功');\r\n        } catch (error) {\r\n          console.error('初始化图表失败:', error);\r\n          setTimeout(() => {\r\n            if (!this.chartInitialized) {\r\n              this.safeInitDistanceChart();\r\n            }\r\n          }, 1000);\r\n        }\r\n      });\r\n    },\r\n    \r\n    // WebSocket连接管理\r\n    setupWebSocket() {\r\n      // 关闭之前的连接\r\n      this.closeWebSocket();\r\n      \r\n      // 添加连接状态跟踪\r\n      this.wsConnectionAttempts = 0;\r\n      this.wsMaxConnectionAttempts = 5;\r\n      this.wsReconnectDelay = 2000; // 初始重连延迟（毫秒）\r\n      \r\n      // 创建新的WebSocket连接\r\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const wsBaseUrl = `${wsProtocol}//localhost:8000`;\r\n      const wsUrl = `${wsBaseUrl}/api/v1/ws/simulations/${this.simulationId}`;\r\n      \r\n      console.log(`连接WebSocket: ${wsUrl}`);\r\n      this.socket = new WebSocket(wsUrl);\r\n      \r\n      this.socket.onopen = () => {\r\n        console.log(`WebSocket连接已建立 (simulationId: ${this.simulationId})`);\r\n        // 重置重连计数器\r\n        this.wsConnectionAttempts = 0;\r\n        this.wsReconnectDelay = 2000;\r\n        // 显示连接成功提示\r\n        this.showSuccessStatus('WebSocket连接已建立');\r\n        // 添加心跳检测\r\n        this.startHeartbeat();\r\n      };\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        // 计算延迟\r\n        this.calculateWsLatency();\r\n        \r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          if (data.error) {\r\n            console.error('WebSocket错误:', data.error);\r\n            this.$toast.error(`WebSocket错误: ${data.error}`);\r\n            return;\r\n          }\r\n          \r\n          // 使用防抖更新数据，避免频繁更新\r\n          this.updateSimulationDataDebounced(data);\r\n          \r\n          // 如果是心跳响应，重置超时计时器\r\n          if (data.heartbeat) {\r\n            this.resetHeartbeatTimeout();\r\n          }\r\n        } catch (error) {\r\n          console.error('解析WebSocket消息失败:', error);\r\n        }\r\n      };\r\n      \r\n      this.socket.onclose = (event) => {\r\n        console.log(`WebSocket连接已关闭 (code: ${event.code}, reason: ${event.reason})`);\r\n        // 清理心跳计时器\r\n        this.stopHeartbeat();\r\n        \r\n        // 如果是正常关闭，不显示错误\r\n        if (event.code === 1000 || event.code === 1001) {\r\n          return;\r\n        }\r\n        \r\n        // 显示连接关闭提示\r\n        this.showWarningStatus('WebSocket连接已关闭');\r\n        \r\n        // 如果模拟仍在运行但连接关闭，尝试重新连接\r\n        if ((this.isRunning && !this.isCaptured) && \r\n            this.wsConnectionAttempts < this.wsMaxConnectionAttempts) {\r\n          // 指数退避重连策略\r\n          this.wsConnectionAttempts++;\r\n          const delay = Math.min(this.wsReconnectDelay * Math.pow(1.5, this.wsConnectionAttempts-1), 30000);\r\n          \r\n          console.log(`尝试重新连接WebSocket... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts}) 延迟: ${delay}ms`);\r\n          this.showInfoStatus(`正在重新连接... (${this.wsConnectionAttempts}/${this.wsMaxConnectionAttempts})`);\r\n          \r\n          setTimeout(() => this.setupWebSocket(), delay);\r\n        } else if (this.wsConnectionAttempts >= this.wsMaxConnectionAttempts) {\r\n          console.error('达到最大重连次数，停止尝试');\r\n          this.showErrorStatus('WebSocket连接失败，请刷新页面重试');\r\n        }\r\n      };\r\n      \r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket错误:', error);\r\n        this.showErrorStatus('WebSocket连接错误');\r\n      };\r\n    },\r\n    \r\n    // 关闭WebSocket连接\r\n    closeWebSocket() {\r\n      this.stopHeartbeat();\r\n      \r\n      if (this.socket) {\r\n        // 移除所有事件监听器\r\n        this.socket.onopen = null;\r\n        this.socket.onmessage = null;\r\n        this.socket.onclose = null;\r\n        this.socket.onerror = null;\r\n        \r\n        // 关闭连接\r\n        if (this.socket.readyState === WebSocket.OPEN || \r\n            this.socket.readyState === WebSocket.CONNECTING) {\r\n          this.socket.close();\r\n        }\r\n        this.socket = null;\r\n      }\r\n    },\r\n    \r\n    // 开始发送心跳\r\n    startHeartbeat() {\r\n      this.heartbeatInterval = setInterval(() => {\r\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n          // 发送心跳消息\r\n          this.socket.send(JSON.stringify({ type: 'heartbeat' }));\r\n          \r\n          // 设置心跳超时，如果超时没收到响应则重连\r\n          this.heartbeatTimeout = setTimeout(() => {\r\n            console.warn('心跳超时，尝试重新连接...');\r\n            this.closeWebSocket();\r\n            this.setupWebSocket();\r\n          }, 5000); // 5秒超时\r\n        }\r\n      }, 30000); // 每30秒发送一次心跳\r\n    },\r\n    \r\n    // 停止心跳\r\n    stopHeartbeat() {\r\n      if (this.heartbeatInterval) {\r\n        clearInterval(this.heartbeatInterval);\r\n        this.heartbeatInterval = null;\r\n      }\r\n      \r\n      if (this.heartbeatTimeout) {\r\n        clearTimeout(this.heartbeatTimeout);\r\n        this.heartbeatTimeout = null;\r\n      }\r\n    },\r\n    \r\n    // 重置心跳超时\r\n    resetHeartbeatTimeout() {\r\n      if (this.heartbeatTimeout) {\r\n        clearTimeout(this.heartbeatTimeout);\r\n        this.heartbeatTimeout = null;\r\n      }\r\n    },\r\n    \r\n    // 计算WebSocket延迟\r\n    calculateWsLatency() {\r\n      const now = performance.now();\r\n      if (this.lastMessageTime) {\r\n        this.wsLatency = Math.round(now - this.lastMessageTime);\r\n      }\r\n      this.lastMessageTime = now;\r\n    },\r\n    \r\n    // 防抖更新数据\r\n    // 修改更新模拟数据的方法\r\nupdateSimulationDataDebounced(data) {\r\n  if (this.dataUpdateTimer) {\r\n    clearTimeout(this.dataUpdateTimer);\r\n  }\r\n  \r\n  this.dataUpdateTimer = setTimeout(() => {\r\n    const startTime = performance.now();\r\n    \r\n    // 更新模拟数据\r\n    this.simulation = data;\r\n    this.isRunning = data.is_running;\r\n    this.isCaptured = data.is_captured;\r\n    \r\n    // 使用nextTick确保视图更新后再更新图表\r\n    this.$nextTick(() => {\r\n      // 更新Vuex存储\r\n      this.$store.dispatch('updateSimulationAgents', {\r\n        simulationId: this.simulationId,\r\n        hunters: data.hunters || [],\r\n        targets: data.targets || []\r\n      });\r\n      \r\n      // 更新图表（使用节流）\r\n      if (this.chartInitialized && this.$refs.chartContainer) {\r\n        this.updateChartThrottled();\r\n      } else if (!this.chartInitialized && this.$refs.chartContainer) {\r\n        // 如果图表尚未初始化但DOM元素已存在，尝试初始化\r\n        this.safeInitDistanceChart();\r\n      }\r\n      \r\n      // 计算渲染时间\r\n      this.renderTime = Math.round(performance.now() - startTime);\r\n    });\r\n  }, 50);\r\n},\r\n    \r\n    // 节流更新图表\r\n    updateChartThrottled() {\r\n      const now = performance.now();\r\n      const timeSinceLastUpdate = now - this.lastChartUpdate;\r\n      \r\n      // 如果数据是实时的并且距离上次更新不到200ms，延迟更新\r\n      if (this.optimizeChartUpdates && this.isRunning && timeSinceLastUpdate < 200) {\r\n        if (!this.chartUpdateTimer) {\r\n          this.chartUpdateTimer = setTimeout(() => {\r\n            this.safeUpdateDistanceChart();\r\n            this.chartUpdateTimer = null;\r\n            this.lastChartUpdate = performance.now();\r\n          }, 200 - timeSinceLastUpdate);\r\n        }\r\n      } else {\r\n        // 直接更新\r\n        if (this.chartUpdateTimer) {\r\n          clearTimeout(this.chartUpdateTimer);\r\n          this.chartUpdateTimer = null;\r\n        }\r\n        this.safeUpdateDistanceChart();\r\n        this.lastChartUpdate = now;\r\n      }\r\n    },\r\n    \r\n    // 安全更新图表 - 包含错误处理\r\n    safeUpdateDistanceChart() {\r\n      try {\r\n        if (this.chartInitialized) {\r\n          this.updateDistanceChart();\r\n        }\r\n      } catch (error) {\r\n        console.error('更新图表失败:', error);\r\n        // 如果更新失败，尝试重新初始化图表\r\n        this.chartInitialized = false;\r\n        this.$nextTick(() => {\r\n          this.safeInitDistanceChart();\r\n        });\r\n      }\r\n    },\r\n    \r\n    // 模拟控制方法\r\n    async startSimulation() {\r\n      try {\r\n        await this.$store.dispatch('startSimulation', this.simulationId);\r\n        this.isRunning = true;\r\n        this.$toast.success('模拟已启动');\r\n      } catch (error) {\r\n        console.error('启动模拟失败:', error);\r\n        this.$toast.error('启动模拟失败');\r\n      }\r\n    },\r\n    \r\n    async stopSimulation() {\r\n      try {\r\n        await this.$store.dispatch('stopSimulation', this.simulationId);\r\n        this.isRunning = false;\r\n        this.$toast.success('模拟已停止');\r\n      } catch (error) {\r\n        console.error('停止模拟失败:', error);\r\n        this.$toast.error('停止模拟失败');\r\n      }\r\n    },\r\n    \r\n    async resetSimulation() {\r\n      try {\r\n        const data = await this.$store.dispatch('resetSimulation', this.simulationId);\r\n        this.simulation = data;\r\n        this.isRunning = false;\r\n        this.isCaptured = false;\r\n        \r\n        // 重置图表数据\r\n        this.agentDistances = {};\r\n        this.chartInitialized = false; // 标记需要重新初始化\r\n        this.$nextTick(() => {\r\n          this.safeInitDistanceChart();\r\n        });\r\n        \r\n        this.$toast.success('模拟已重置');\r\n      } catch (error) {\r\n        console.error('重置模拟失败:', error);\r\n        this.$toast.error('重置模拟失败');\r\n      }\r\n    },\r\n    \r\n    async deleteSimulation() {\r\n      this.deleteLoading = true;\r\n      try {\r\n        await this.$store.dispatch('deleteSimulation', this.simulationId);\r\n        this.$toast.success('模拟已删除');\r\n        this.$router.push('/simulations');\r\n      } catch (error) {\r\n        console.error('删除模拟失败:', error);\r\n        this.$toast.error('删除模拟失败');\r\n      } finally {\r\n        this.deleteLoading = false;\r\n        this.showDeleteDialog = false;\r\n      }\r\n    },\r\n    \r\n    // 图表相关方法\r\n    initDistanceChart() {\r\n      if (!this.simulation.hunters || !this.simulation.targets) return;\r\n      \r\n      // 确保DOM元素存在\r\n      if (!this.$refs.chartContainer) {\r\n        console.warn('图表容器未找到，延迟初始化');\r\n        return;\r\n      }\r\n      \r\n      // 清空旧数据\r\n      this.distanceChartSeries = [];\r\n      this.agentDistances = {};\r\n      \r\n      // 为每个猎手创建数据系列\r\n      if (this.simulation.hunters && this.simulation.hunters.length > 0) {\r\n        this.distanceChartSeries = this.simulation.hunters.map(hunter => ({\r\n          name: `猎手 ${hunter.id}`,\r\n          data: []\r\n        }));\r\n        \r\n        this.simulation.hunters.forEach(hunter => {\r\n          this.agentDistances[hunter.id] = [];\r\n        });\r\n      }\r\n      \r\n      // 标记图表已初始化\r\n      this.chartInitialized = true;\r\n      console.log('图表初始化完成');\r\n    },\r\n    \r\n    updateDistanceChart() {\r\n      if (!this.simulation.hunters || !this.simulation.targets || !this.simulation.targets.length) {\r\n        return;\r\n      }\r\n      \r\n      const target = this.simulation.targets[0];\r\n      if (!target || !target.position) return;\r\n      \r\n      this.simulation.hunters.forEach((hunter, index) => {\r\n        // 确保猎手数据有效\r\n        if (!hunter || !hunter.position) return;\r\n        \r\n        // 计算与目标的距离\r\n        const distance = this.calculateDistance(hunter.position, target.position);\r\n        \r\n        if (!this.agentDistances[hunter.id]) {\r\n          this.agentDistances[hunter.id] = [];\r\n        }\r\n        \r\n        // 添加数据点\r\n        this.agentDistances[hunter.id].push({\r\n          x: this.simulation.step_count,\r\n          y: Math.round(distance * 100) / 100\r\n        });\r\n        \r\n        // 限制数据点数量，避免性能问题\r\n        if (this.agentDistances[hunter.id].length > this.maxDataPoints) {\r\n          // 清除旧数据点，但保留第一个点以保持连续性\r\n          const firstPoint = this.agentDistances[hunter.id][0];\r\n          this.agentDistances[hunter.id] = [\r\n            firstPoint,\r\n            ...this.agentDistances[hunter.id].slice(-this.maxDataPoints + 1)\r\n          ];\r\n        }\r\n        \r\n        // 确保索引有效\r\n        if (index < this.distanceChartSeries.length) {\r\n          // 使用Vue的$set方法更新数组，确保响应式更新\r\n          this.$set(this.distanceChartSeries[index], 'data', [...this.agentDistances[hunter.id]]);\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 辅助方法\r\n    calculateDistance(pos1, pos2) {\r\n      return Math.sqrt(\r\n        Math.pow(pos1[0] - pos2[0], 2) + \r\n        Math.pow(pos1[1] - pos2[1], 2)\r\n      );\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return '未知';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString();\r\n    },\r\n    \r\n    formatAlgorithm(algorithm) {\r\n      const map = {\r\n        'APF': '人工势场法',\r\n        'CONSENSUS': '共识算法'\r\n      };\r\n      return map[algorithm] || algorithm;\r\n    },\r\n    \r\n    // 导航方法\r\n    navigateToList() {\r\n      // 清理资源后再导航\r\n      this.closeWebSocket();\r\n      this.cleanupTimers();\r\n      this.$router.push('/simulations');\r\n    },\r\n    \r\n    // 状态提示显示方法\r\n    showInfoStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'info';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showSuccessStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'success';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showWarningStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'warning';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showErrorStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'error';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    // 错误处理\r\n    handleApiError(error) {\r\n      console.error('API错误:', error);\r\n      \r\n      // 特定错误处理\r\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\r\n        this.$toast.error('模拟不存在或已被删除');\r\n        this.$router.push('/simulations');\r\n      }\r\n    },\r\n    \r\n    // 页面可见性处理\r\n    handleVisibilityChange() {\r\n      if (document.hidden) {\r\n        // 页面隐藏时暂停WebSocket\r\n        this.stopHeartbeat();\r\n      } else {\r\n        // 页面可见时恢复WebSocket\r\n        if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n          this.startHeartbeat();\r\n        } else if (this.isRunning && !this.isCaptured) {\r\n          // 如果模拟正在运行，但WebSocket关闭，则重新连接\r\n          this.setupWebSocket();\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 窗口焦点变化处理\r\n    handleWindowFocus() {\r\n      if (this.isRunning && !this.isCaptured) {\r\n        // 如果模拟正在运行，确保WebSocket连接正常\r\n        if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n          this.setupWebSocket();\r\n        }\r\n      }\r\n    },\r\n    \r\n    handleWindowBlur() {\r\n      // 窗口失去焦点时的处理（如果需要）\r\n      // 可以降低更新频率等\r\n      this.optimizeChartUpdates = true;\r\n    },\r\n    \r\n    // 清理定时器\r\n    cleanupTimers() {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n        this.dataUpdateTimer = null;\r\n      }\r\n      \r\n      if (this.chartUpdateTimer) {\r\n        clearTimeout(this.chartUpdateTimer);\r\n        this.chartUpdateTimer = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    simulationId: {\r\n      handler(newId, oldId) {\r\n        if (newId !== oldId) {\r\n          // 重新初始化组件\r\n          this.closeWebSocket();\r\n          this.cleanupTimers();\r\n          this.chartInitialized = false;\r\n          this.initializeComponent();\r\n        }\r\n      },\r\n      immediate: false\r\n    },\r\n    \r\n    // 监视store中的当前模拟数据变化\r\n    storeCurrentSimulation: {\r\n      handler(newSimulation) {\r\n        if (newSimulation && newSimulation.id === this.simulationId) {\r\n          // 仅在首次加载或重要属性变化时更新本地数据\r\n          if (!this.simulation.id || \r\n              newSimulation.is_running !== this.simulation.is_running ||\r\n              newSimulation.is_captured !== this.simulation.is_captured) {\r\n            this.simulation = newSimulation;\r\n            this.isRunning = newSimulation.is_running;\r\n            this.isCaptured = newSimulation.is_captured;\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-detail {\r\n  padding-top: 16px;\r\n}\r\n\r\n.v-card__title {\r\n  word-break: break-word;\r\n}\r\n\r\n.v-card-text {\r\n  position: relative;\r\n}\r\n\r\n.v-list-item {\r\n  min-height: 40px;\r\n}\r\n\r\n.performance-monitor {\r\n  position: absolute;\r\n  bottom: 8px;\r\n  right: 8px;\r\n  font-size: 12px;\r\n  color: #999;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  z-index: 1;\r\n}\r\n\r\n#distance-chart-container {\r\n  width: 100%;\r\n  min-height: 250px;\r\n}\r\n\r\n@media (max-width: 960px) {\r\n  .simulation-detail {\r\n    padding-top: 8px;\r\n  }\r\n  \r\n  .v-card__title {\r\n    font-size: 18px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}