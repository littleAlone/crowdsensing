{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    simulations: [],\n    currentSimulation: null,\n    loading: false,\n    error: null,\n    simulationAgents: {} // 新增：分离智能体状态存储\n  },\n  mutations: {\n    SET_SIMULATIONS(state, simulations) {\n      state.simulations = simulations;\n    },\n    SET_CURRENT_SIMULATION(state, simulation) {\n      state.currentSimulation = simulation;\n\n      // 同时更新智能体状态\n      if (simulation && simulation.id) {\n        state.simulationAgents[simulation.id] = {\n          hunters: simulation.hunters || [],\n          targets: simulation.targets || []\n        };\n      }\n    },\n    UPDATE_SIMULATION(state, simulation) {\n      // 更新列表中的模拟\n      const index = state.simulations.findIndex(s => s.id === simulation.id);\n      if (index !== -1) {\n        // 创建新对象进行更新（更好的响应式性能）\n        state.simulations = [...state.simulations.slice(0, index), simulation, ...state.simulations.slice(index + 1)];\n      }\n\n      // 更新当前模拟\n      if (state.currentSimulation && state.currentSimulation.id === simulation.id) {\n        state.currentSimulation = {\n          ...simulation\n        };\n      }\n    },\n    // 新增：只更新智能体状态，避免不必要的完整更新\n    UPDATE_SIMULATION_AGENTS(state, {\n      simulationId,\n      hunters,\n      targets\n    }) {\n      if (state.simulationAgents[simulationId]) {\n        state.simulationAgents[simulationId] = {\n          hunters: [...hunters],\n          targets: [...targets]\n        };\n\n        // 如果是当前模拟，同步更新currentSimulation\n        if (state.currentSimulation && state.currentSimulation.id === simulationId) {\n          state.currentSimulation = {\n            ...state.currentSimulation,\n            hunters: [...hunters],\n            targets: [...targets]\n          };\n        }\n      }\n    },\n    // 更新模拟的单个属性\n    UPDATE_SIMULATION_PROPERTY(state, {\n      simulationId,\n      property,\n      value\n    }) {\n      // 更新列表中的模拟\n      const index = state.simulations.findIndex(s => s.id === simulationId);\n      if (index !== -1) {\n        const updatedSimulation = {\n          ...state.simulations[index],\n          [property]: value\n        };\n        state.simulations = [...state.simulations.slice(0, index), updatedSimulation, ...state.simulations.slice(index + 1)];\n      }\n\n      // 更新当前模拟\n      if (state.currentSimulation && state.currentSimulation.id === simulationId) {\n        state.currentSimulation = {\n          ...state.currentSimulation,\n          [property]: value\n        };\n      }\n    },\n    ADD_SIMULATION(state, simulation) {\n      state.simulations = [...state.simulations, simulation];\n\n      // 初始化智能体状态\n      if (simulation && simulation.id) {\n        state.simulationAgents[simulation.id] = {\n          hunters: simulation.hunters || [],\n          targets: simulation.targets || []\n        };\n      }\n    },\n    REMOVE_SIMULATION(state, id) {\n      state.simulations = state.simulations.filter(s => s.id !== id);\n      if (state.currentSimulation && state.currentSimulation.id === id) {\n        state.currentSimulation = null;\n      }\n\n      // 清理智能体状态\n      if (state.simulationAgents[id]) {\n        Vue.delete(state.simulationAgents, id);\n      }\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    }\n  },\n  actions: {\n    async fetchSimulations({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await Vue.axios.get('/simulations/');\n        commit('SET_SIMULATIONS', response.data);\n        commit('SET_ERROR', null);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching simulations:', error);\n        commit('SET_ERROR', '获取模拟列表失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async fetchSimulation({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await Vue.axios.get(`/simulations/${id}`);\n        commit('SET_CURRENT_SIMULATION', response.data);\n        commit('SET_ERROR', null);\n        return response.data;\n      } catch (error) {\n        console.error(`Error fetching simulation ${id}:`, error);\n        commit('SET_ERROR', `获取模拟详情失败`);\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async createSimulation({\n      commit\n    }, simulation) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await Vue.axios.post('/simulations/', simulation);\n        commit('ADD_SIMULATION', response.data);\n        commit('SET_ERROR', null);\n        return response.data;\n      } catch (error) {\n        console.error('Error creating simulation:', error);\n        commit('SET_ERROR', '创建模拟失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async startSimulation({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await Vue.axios.post(`/simulations/${id}/start`);\n        // 更新模拟状态为运行中\n        commit('UPDATE_SIMULATION_PROPERTY', {\n          simulationId: id,\n          property: 'is_running',\n          value: true\n        });\n        commit('SET_ERROR', null);\n        return response;\n      } catch (error) {\n        console.error(`Error starting simulation ${id}:`, error);\n        commit('SET_ERROR', '启动模拟失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async stopSimulation({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await Vue.axios.post(`/simulations/${id}/stop`);\n        // 更新模拟状态为停止\n        commit('UPDATE_SIMULATION_PROPERTY', {\n          simulationId: id,\n          property: 'is_running',\n          value: false\n        });\n        commit('SET_ERROR', null);\n        return response;\n      } catch (error) {\n        console.error(`Error stopping simulation ${id}:`, error);\n        commit('SET_ERROR', '停止模拟失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async resetSimulation({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        await Vue.axios.post(`/simulations/${id}/reset`);\n        // 重新获取模拟数据\n        const response = await Vue.axios.get(`/simulations/${id}`);\n        commit('UPDATE_SIMULATION', response.data);\n        commit('SET_ERROR', null);\n        return response.data;\n      } catch (error) {\n        console.error(`Error resetting simulation ${id}:`, error);\n        commit('SET_ERROR', '重置模拟失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async deleteSimulation({\n      commit\n    }, id) {\n      commit('SET_LOADING', true);\n      try {\n        await Vue.axios.delete(`/simulations/${id}`);\n        commit('REMOVE_SIMULATION', id);\n        commit('SET_ERROR', null);\n      } catch (error) {\n        console.error(`Error deleting simulation ${id}:`, error);\n        commit('SET_ERROR', '删除模拟失败');\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 高效更新智能体状态\n    updateSimulationAgents({\n      commit\n    }, {\n      simulationId,\n      hunters,\n      targets\n    }) {\n      commit('UPDATE_SIMULATION_AGENTS', {\n        simulationId,\n        hunters,\n        targets\n      });\n    },\n    // 高效更新模拟属性\n    updateSimulationProperty({\n      commit\n    }, {\n      simulationId,\n      property,\n      value\n    }) {\n      commit('UPDATE_SIMULATION_PROPERTY', {\n        simulationId,\n        property,\n        value\n      });\n    }\n  },\n  getters: {\n    getSimulationById: state => id => {\n      return state.simulations.find(s => s.id === id);\n    },\n    getSimulationAgents: state => id => {\n      return state.simulationAgents[id] || {\n        hunters: [],\n        targets: []\n      };\n    },\n    getCapturingTime: state => {\n      if (state.currentSimulation && state.currentSimulation.capture_time) {\n        return state.currentSimulation.capture_time;\n      }\n      return null;\n    },\n    // 计算智能体与目标的距离\n    getAgentDistances: state => simulationId => {\n      const agents = state.simulationAgents[simulationId];\n      if (!agents || !agents.hunters.length || !agents.targets.length) {\n        return {};\n      }\n      const target = agents.targets[0]; // 假设单目标\n      const distances = {};\n      agents.hunters.forEach(hunter => {\n        const hunterPos = hunter.position;\n        const targetPos = target.position;\n        const distance = Math.sqrt(Math.pow(hunterPos[0] - targetPos[0], 2) + Math.pow(hunterPos[1] - targetPos[1], 2));\n        distances[hunter.id] = Math.round(distance * 100) / 100;\n      });\n      return distances;\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","simulations","currentSimulation","loading","error","simulationAgents","mutations","SET_SIMULATIONS","SET_CURRENT_SIMULATION","simulation","id","hunters","targets","UPDATE_SIMULATION","index","findIndex","s","slice","UPDATE_SIMULATION_AGENTS","simulationId","UPDATE_SIMULATION_PROPERTY","property","value","updatedSimulation","ADD_SIMULATION","REMOVE_SIMULATION","filter","delete","SET_LOADING","SET_ERROR","actions","fetchSimulations","commit","response","axios","get","data","console","fetchSimulation","createSimulation","post","startSimulation","stopSimulation","resetSimulation","deleteSimulation","updateSimulationAgents","updateSimulationProperty","getters","getSimulationById","find","getSimulationAgents","getCapturingTime","capture_time","getAgentDistances","agents","length","target","distances","forEach","hunter","hunterPos","position","targetPos","distance","Math","sqrt","pow","round"],"sources":["F:/python/course/crowdsensing/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    simulations: [],\r\n    currentSimulation: null,\r\n    loading: false,\r\n    error: null,\r\n    simulationAgents: {}, // 新增：分离智能体状态存储\r\n  },\r\n  mutations: {\r\n    SET_SIMULATIONS(state, simulations) {\r\n      state.simulations = simulations;\r\n    },\r\n    SET_CURRENT_SIMULATION(state, simulation) {\r\n      state.currentSimulation = simulation;\r\n      \r\n      // 同时更新智能体状态\r\n      if (simulation && simulation.id) {\r\n        state.simulationAgents[simulation.id] = {\r\n          hunters: simulation.hunters || [],\r\n          targets: simulation.targets || []\r\n        };\r\n      }\r\n    },\r\n    UPDATE_SIMULATION(state, simulation) {\r\n      // 更新列表中的模拟\r\n      const index = state.simulations.findIndex(s => s.id === simulation.id);\r\n      if (index !== -1) {\r\n        // 创建新对象进行更新（更好的响应式性能）\r\n        state.simulations = [\r\n          ...state.simulations.slice(0, index),\r\n          simulation,\r\n          ...state.simulations.slice(index + 1)\r\n        ];\r\n      }\r\n      \r\n      // 更新当前模拟\r\n      if (state.currentSimulation && state.currentSimulation.id === simulation.id) {\r\n        state.currentSimulation = {...simulation};\r\n      }\r\n    },\r\n    // 新增：只更新智能体状态，避免不必要的完整更新\r\n    UPDATE_SIMULATION_AGENTS(state, { simulationId, hunters, targets }) {\r\n      if (state.simulationAgents[simulationId]) {\r\n        state.simulationAgents[simulationId] = {\r\n          hunters: [...hunters],\r\n          targets: [...targets]\r\n        };\r\n        \r\n        // 如果是当前模拟，同步更新currentSimulation\r\n        if (state.currentSimulation && state.currentSimulation.id === simulationId) {\r\n          state.currentSimulation = {\r\n            ...state.currentSimulation,\r\n            hunters: [...hunters],\r\n            targets: [...targets]\r\n          };\r\n        }\r\n      }\r\n    },\r\n    // 更新模拟的单个属性\r\n    UPDATE_SIMULATION_PROPERTY(state, { simulationId, property, value }) {\r\n      // 更新列表中的模拟\r\n      const index = state.simulations.findIndex(s => s.id === simulationId);\r\n      if (index !== -1) {\r\n        const updatedSimulation = {\r\n          ...state.simulations[index],\r\n          [property]: value\r\n        };\r\n        \r\n        state.simulations = [\r\n          ...state.simulations.slice(0, index),\r\n          updatedSimulation,\r\n          ...state.simulations.slice(index + 1)\r\n        ];\r\n      }\r\n      \r\n      // 更新当前模拟\r\n      if (state.currentSimulation && state.currentSimulation.id === simulationId) {\r\n        state.currentSimulation = {\r\n          ...state.currentSimulation,\r\n          [property]: value\r\n        };\r\n      }\r\n    },\r\n    ADD_SIMULATION(state, simulation) {\r\n      state.simulations = [...state.simulations, simulation];\r\n      \r\n      // 初始化智能体状态\r\n      if (simulation && simulation.id) {\r\n        state.simulationAgents[simulation.id] = {\r\n          hunters: simulation.hunters || [],\r\n          targets: simulation.targets || []\r\n        };\r\n      }\r\n    },\r\n    REMOVE_SIMULATION(state, id) {\r\n      state.simulations = state.simulations.filter(s => s.id !== id);\r\n      \r\n      if (state.currentSimulation && state.currentSimulation.id === id) {\r\n        state.currentSimulation = null;\r\n      }\r\n      \r\n      // 清理智能体状态\r\n      if (state.simulationAgents[id]) {\r\n        Vue.delete(state.simulationAgents, id);\r\n      }\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading;\r\n    },\r\n    SET_ERROR(state, error) {\r\n      state.error = error;\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchSimulations({ commit }) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await Vue.axios.get('/simulations/');\r\n        commit('SET_SIMULATIONS', response.data);\r\n        commit('SET_ERROR', null);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching simulations:', error);\r\n        commit('SET_ERROR', '获取模拟列表失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async fetchSimulation({ commit }, id) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await Vue.axios.get(`/simulations/${id}`);\r\n        commit('SET_CURRENT_SIMULATION', response.data);\r\n        commit('SET_ERROR', null);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(`Error fetching simulation ${id}:`, error);\r\n        commit('SET_ERROR', `获取模拟详情失败`);\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async createSimulation({ commit }, simulation) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await Vue.axios.post('/simulations/', simulation);\r\n        commit('ADD_SIMULATION', response.data);\r\n        commit('SET_ERROR', null);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Error creating simulation:', error);\r\n        commit('SET_ERROR', '创建模拟失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async startSimulation({ commit }, id) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await Vue.axios.post(`/simulations/${id}/start`);\r\n        // 更新模拟状态为运行中\r\n        commit('UPDATE_SIMULATION_PROPERTY', { \r\n          simulationId: id, \r\n          property: 'is_running', \r\n          value: true \r\n        });\r\n        commit('SET_ERROR', null);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(`Error starting simulation ${id}:`, error);\r\n        commit('SET_ERROR', '启动模拟失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async stopSimulation({ commit }, id) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        const response = await Vue.axios.post(`/simulations/${id}/stop`);\r\n        // 更新模拟状态为停止\r\n        commit('UPDATE_SIMULATION_PROPERTY', { \r\n          simulationId: id, \r\n          property: 'is_running', \r\n          value: false \r\n        });\r\n        commit('SET_ERROR', null);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(`Error stopping simulation ${id}:`, error);\r\n        commit('SET_ERROR', '停止模拟失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async resetSimulation({ commit }, id) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        await Vue.axios.post(`/simulations/${id}/reset`);\r\n        // 重新获取模拟数据\r\n        const response = await Vue.axios.get(`/simulations/${id}`);\r\n        commit('UPDATE_SIMULATION', response.data);\r\n        commit('SET_ERROR', null);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(`Error resetting simulation ${id}:`, error);\r\n        commit('SET_ERROR', '重置模拟失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    async deleteSimulation({ commit }, id) {\r\n      commit('SET_LOADING', true);\r\n      try {\r\n        await Vue.axios.delete(`/simulations/${id}`);\r\n        commit('REMOVE_SIMULATION', id);\r\n        commit('SET_ERROR', null);\r\n      } catch (error) {\r\n        console.error(`Error deleting simulation ${id}:`, error);\r\n        commit('SET_ERROR', '删除模拟失败');\r\n        throw error;\r\n      } finally {\r\n        commit('SET_LOADING', false);\r\n      }\r\n    },\r\n    // 高效更新智能体状态\r\n    updateSimulationAgents({ commit }, { simulationId, hunters, targets }) {\r\n      commit('UPDATE_SIMULATION_AGENTS', { simulationId, hunters, targets });\r\n    },\r\n    // 高效更新模拟属性\r\n    updateSimulationProperty({ commit }, { simulationId, property, value }) {\r\n      commit('UPDATE_SIMULATION_PROPERTY', { simulationId, property, value });\r\n    }\r\n  },\r\n  getters: {\r\n    getSimulationById: (state) => (id) => {\r\n      return state.simulations.find(s => s.id === id);\r\n    },\r\n    getSimulationAgents: (state) => (id) => {\r\n      return state.simulationAgents[id] || { hunters: [], targets: [] };\r\n    },\r\n    getCapturingTime: (state) => {\r\n      if (state.currentSimulation && state.currentSimulation.capture_time) {\r\n        return state.currentSimulation.capture_time;\r\n      }\r\n      return null;\r\n    },\r\n    // 计算智能体与目标的距离\r\n    getAgentDistances: (state) => (simulationId) => {\r\n      const agents = state.simulationAgents[simulationId];\r\n      if (!agents || !agents.hunters.length || !agents.targets.length) {\r\n        return {};\r\n      }\r\n      \r\n      const target = agents.targets[0]; // 假设单目标\r\n      const distances = {};\r\n      \r\n      agents.hunters.forEach(hunter => {\r\n        const hunterPos = hunter.position;\r\n        const targetPos = target.position;\r\n        const distance = Math.sqrt(\r\n          Math.pow(hunterPos[0] - targetPos[0], 2) + \r\n          Math.pow(hunterPos[1] - targetPos[1], 2)\r\n        );\r\n        distances[hunter.id] = Math.round(distance * 100) / 100;\r\n      });\r\n      \r\n      return distances;\r\n    }\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}