{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.timers.js\";\n// WebSocketManager.js\nvar _setupWebSocket = function setupWebSocket(simulationId) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var onOpen = options.onOpen,\n    onMessage = options.onMessage,\n    onClose = options.onClose,\n    onError = options.onError,\n    _options$retryAttempt = options.retryAttempts,\n    retryAttempts = _options$retryAttempt === void 0 ? 5 : _options$retryAttempt,\n    _options$initialDelay = options.initialDelay,\n    initialDelay = _options$initialDelay === void 0 ? 2000 : _options$initialDelay;\n\n  // 创建WebSocket连接\n  var wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  var wsBaseUrl = \"\".concat(wsProtocol, \"//localhost:8000\");\n  var wsUrl = \"\".concat(wsBaseUrl, \"/api/v1/ws/simulations/\").concat(simulationId);\n  console.log(\"\\u8FDE\\u63A5WebSocket: \".concat(wsUrl));\n  var socket = new WebSocket(wsUrl);\n  var heartbeatInterval = null;\n  var heartbeatTimeout = null;\n  var reconnectAttempts = 0;\n\n  // 心跳检测\n  var startHeartbeat = function startHeartbeat() {\n    heartbeatInterval = setInterval(function () {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(JSON.stringify({\n          type: 'heartbeat'\n        }));\n        heartbeatTimeout = setTimeout(function () {\n          console.warn('心跳超时，尝试重新连接...');\n          closeWebSocket(socket, heartbeatInterval, heartbeatTimeout);\n          if (reconnectAttempts < retryAttempts) {\n            reconnectAttempts++;\n            var delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\n            setTimeout(function () {\n              return _setupWebSocket(simulationId, options);\n            }, delay);\n          }\n        }, 5000);\n      }\n    }, 30000);\n  };\n\n  // 添加事件处理器\n  socket.onopen = function (event) {\n    console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB (simulationId: \".concat(simulationId, \")\"));\n    reconnectAttempts = 0;\n    startHeartbeat();\n    if (onOpen) onOpen(event);\n  };\n  socket.onmessage = function (event) {\n    try {\n      var data = JSON.parse(event.data);\n\n      // 如果是心跳响应，重置超时\n      if (data.heartbeat && heartbeatTimeout) {\n        clearTimeout(heartbeatTimeout);\n      }\n      if (onMessage) onMessage(data, event);\n    } catch (error) {\n      console.error('解析WebSocket消息失败:', error);\n    }\n  };\n  socket.onclose = function (event) {\n    console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED (code: \".concat(event.code, \", reason: \").concat(event.reason, \")\"));\n    if (heartbeatInterval) {\n      clearInterval(heartbeatInterval);\n    }\n    if (heartbeatTimeout) {\n      clearTimeout(heartbeatTimeout);\n    }\n    if (onClose) onClose(event);\n\n    // 正常关闭不重连\n    if (event.code === 1000 || event.code === 1001) {\n      return;\n    }\n\n    // 尝试重连\n    if (reconnectAttempts < retryAttempts) {\n      reconnectAttempts++;\n      var delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\n      console.log(\"\\u5C1D\\u8BD5\\u91CD\\u65B0\\u8FDE\\u63A5WebSocket... (\".concat(reconnectAttempts, \"/\").concat(retryAttempts, \") \\u5EF6\\u8FDF: \").concat(delay, \"ms\"));\n      setTimeout(function () {\n        return _setupWebSocket(simulationId, options);\n      }, delay);\n    }\n  };\n  socket.onerror = function (error) {\n    console.error('WebSocket错误:', error);\n    if (onError) onError(error);\n  };\n  return socket;\n};\nvar closeWebSocket = function closeWebSocket(socket, heartbeatInterval, heartbeatTimeout) {\n  // 清理心跳\n  if (heartbeatInterval) {\n    clearInterval(heartbeatInterval);\n  }\n  if (heartbeatTimeout) {\n    clearTimeout(heartbeatTimeout);\n  }\n\n  // 关闭连接\n  if (socket) {\n    if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n      socket.close();\n    }\n\n    // 清理事件处理器\n    socket.onopen = null;\n    socket.onmessage = null;\n    socket.onclose = null;\n    socket.onerror = null;\n  }\n};\nexport { _setupWebSocket as setupWebSocket, closeWebSocket };","map":{"version":3,"names":["setupWebSocket","simulationId","options","arguments","length","undefined","onOpen","onMessage","onClose","onError","_options$retryAttempt","retryAttempts","_options$initialDelay","initialDelay","wsProtocol","window","location","protocol","wsBaseUrl","concat","wsUrl","console","log","socket","WebSocket","heartbeatInterval","heartbeatTimeout","reconnectAttempts","startHeartbeat","setInterval","readyState","OPEN","send","JSON","stringify","type","setTimeout","warn","closeWebSocket","delay","Math","min","pow","onopen","event","onmessage","data","parse","heartbeat","clearTimeout","error","onclose","code","reason","clearInterval","onerror","CONNECTING","close"],"sources":["F:/python/course/crowdsensing/frontend/src/components/simulation/WebSocketManager.js"],"sourcesContent":["// WebSocketManager.js\r\nconst setupWebSocket = (simulationId, options = {}) => {\r\n  const {\r\n    onOpen, \r\n    onMessage, \r\n    onClose, \r\n    onError, \r\n    retryAttempts = 5, \r\n    initialDelay = 2000\r\n  } = options;\r\n  \r\n  // 创建WebSocket连接\r\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n  const wsBaseUrl = `${wsProtocol}//localhost:8000`;\r\n  const wsUrl = `${wsBaseUrl}/api/v1/ws/simulations/${simulationId}`;\r\n  \r\n  console.log(`连接WebSocket: ${wsUrl}`);\r\n  const socket = new WebSocket(wsUrl);\r\n  \r\n  let heartbeatInterval = null;\r\n  let heartbeatTimeout = null;\r\n  let reconnectAttempts = 0;\r\n  \r\n  // 心跳检测\r\n  const startHeartbeat = () => {\r\n    heartbeatInterval = setInterval(() => {\r\n      if (socket && socket.readyState === WebSocket.OPEN) {\r\n        socket.send(JSON.stringify({ type: 'heartbeat' }));\r\n        \r\n        heartbeatTimeout = setTimeout(() => {\r\n          console.warn('心跳超时，尝试重新连接...');\r\n          closeWebSocket(socket, heartbeatInterval, heartbeatTimeout);\r\n          if (reconnectAttempts < retryAttempts) {\r\n            reconnectAttempts++;\r\n            const delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\r\n            setTimeout(() => setupWebSocket(simulationId, options), delay);\r\n          }\r\n        }, 5000);\r\n      }\r\n    }, 30000);\r\n  };\r\n  \r\n  // 添加事件处理器\r\n  socket.onopen = (event) => {\r\n    console.log(`WebSocket连接已建立 (simulationId: ${simulationId})`);\r\n    reconnectAttempts = 0;\r\n    startHeartbeat();\r\n    if (onOpen) onOpen(event);\r\n  };\r\n  \r\n  socket.onmessage = (event) => {\r\n    try {\r\n      const data = JSON.parse(event.data);\r\n      \r\n      // 如果是心跳响应，重置超时\r\n      if (data.heartbeat && heartbeatTimeout) {\r\n        clearTimeout(heartbeatTimeout);\r\n      }\r\n      \r\n      if (onMessage) onMessage(data, event);\r\n    } catch (error) {\r\n      console.error('解析WebSocket消息失败:', error);\r\n    }\r\n  };\r\n  \r\n  socket.onclose = (event) => {\r\n    console.log(`WebSocket连接已关闭 (code: ${event.code}, reason: ${event.reason})`);\r\n    \r\n    if (heartbeatInterval) {\r\n      clearInterval(heartbeatInterval);\r\n    }\r\n    \r\n    if (heartbeatTimeout) {\r\n      clearTimeout(heartbeatTimeout);\r\n    }\r\n    \r\n    if (onClose) onClose(event);\r\n    \r\n    // 正常关闭不重连\r\n    if (event.code === 1000 || event.code === 1001) {\r\n      return;\r\n    }\r\n    \r\n    // 尝试重连\r\n    if (reconnectAttempts < retryAttempts) {\r\n      reconnectAttempts++;\r\n      const delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\r\n      console.log(`尝试重新连接WebSocket... (${reconnectAttempts}/${retryAttempts}) 延迟: ${delay}ms`);\r\n      setTimeout(() => setupWebSocket(simulationId, options), delay);\r\n    }\r\n  };\r\n  \r\n  socket.onerror = (error) => {\r\n    console.error('WebSocket错误:', error);\r\n    if (onError) onError(error);\r\n  };\r\n  \r\n  return socket;\r\n};\r\n\r\nconst closeWebSocket = (socket, heartbeatInterval, heartbeatTimeout) => {\r\n  // 清理心跳\r\n  if (heartbeatInterval) {\r\n    clearInterval(heartbeatInterval);\r\n  }\r\n  \r\n  if (heartbeatTimeout) {\r\n    clearTimeout(heartbeatTimeout);\r\n  }\r\n  \r\n  // 关闭连接\r\n  if (socket) {\r\n    if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\r\n      socket.close();\r\n    }\r\n    \r\n    // 清理事件处理器\r\n    socket.onopen = null;\r\n    socket.onmessage = null;\r\n    socket.onclose = null;\r\n    socket.onerror = null;\r\n  }\r\n};\r\n\r\nexport { setupWebSocket, closeWebSocket };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}