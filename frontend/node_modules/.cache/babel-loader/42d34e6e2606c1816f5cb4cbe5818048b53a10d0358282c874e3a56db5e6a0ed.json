{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.timers.js\";\n// WebSocketManager.js\nvar _setupWebSocket = function setupWebSocket(simulationId) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var onOpen = options.onOpen,\n    onMessage = options.onMessage,\n    onClose = options.onClose,\n    onError = options.onError,\n    onReconnect = options.onReconnect,\n    _options$retryAttempt = options.retryAttempts,\n    retryAttempts = _options$retryAttempt === void 0 ? 5 : _options$retryAttempt,\n    _options$initialDelay = options.initialDelay,\n    initialDelay = _options$initialDelay === void 0 ? 1000 : _options$initialDelay;\n\n  // 创建WebSocket连接\n  var wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  var wsBaseUrl = \"\".concat(wsProtocol, \"//\").concat(window.location.hostname, \":8000\");\n  var wsUrl = \"\".concat(wsBaseUrl, \"/api/v1/ws/simulations/\").concat(simulationId);\n  console.log(\"\\u8FDE\\u63A5WebSocket: \".concat(wsUrl, \" (simulationId: \").concat(simulationId, \")\"));\n  var socket = null;\n  try {\n    socket = new WebSocket(wsUrl);\n  } catch (error) {\n    console.error('创建WebSocket连接失败:', error);\n    if (onError) onError(error);\n    return null;\n  }\n\n  // 重置连接状态\n  var heartbeatInterval = null;\n  var heartbeatTimeout = null;\n  var reconnectAttempts = 0;\n  var connectionEstablished = false;\n\n  // 心跳检测\n  var startHeartbeat = function startHeartbeat() {\n    heartbeatInterval = setInterval(function () {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        try {\n          socket.send(JSON.stringify({\n            type: 'heartbeat'\n          }));\n          heartbeatTimeout = setTimeout(function () {\n            console.warn('心跳超时，尝试重新连接...');\n            cleanupAndReconnect();\n          }, 5000);\n        } catch (error) {\n          console.error('发送心跳消息失败:', error);\n          cleanupAndReconnect();\n        }\n      }\n    }, 30000);\n  };\n\n  // 清理资源并重连\n  var cleanupAndReconnect = function cleanupAndReconnect() {\n    closeWebSocket(socket, heartbeatInterval, heartbeatTimeout);\n    if (reconnectAttempts < retryAttempts) {\n      reconnectAttempts++;\n      var delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\n      console.log(\"\\u5C1D\\u8BD5\\u91CD\\u65B0\\u8FDE\\u63A5WebSocket... (\".concat(reconnectAttempts, \"/\").concat(retryAttempts, \") \\u5EF6\\u8FDF: \").concat(delay, \"ms\"));\n      setTimeout(function () {\n        var newSocket = _setupWebSocket(simulationId, options);\n        if (newSocket && typeof onReconnect === 'function') {\n          onReconnect(newSocket);\n        }\n      }, delay);\n    }\n  };\n\n  // 添加事件处理器\n  socket.onopen = function (event) {\n    console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB (simulationId: \".concat(simulationId, \")\"));\n    connectionEstablished = true;\n    reconnectAttempts = 0;\n    startHeartbeat();\n    if (onOpen) onOpen(event);\n  };\n  socket.onmessage = function (event) {\n    try {\n      var data = JSON.parse(event.data);\n\n      // 如果是心跳响应，重置超时\n      if (data.heartbeat && heartbeatTimeout) {\n        clearTimeout(heartbeatTimeout);\n      }\n\n      // 检查错误消息\n      if (data.error) {\n        console.warn('WebSocket接收到错误消息:', data.error);\n        if (typeof onError === 'function') {\n          onError(new Error(data.error));\n        }\n        return;\n      }\n      if (onMessage) onMessage(data, event);\n    } catch (error) {\n      console.error('解析WebSocket消息失败:', error);\n    }\n  };\n  socket.onclose = function (event) {\n    // 正常关闭代码：1000（正常关闭）,1001（离开页面）,1005（无状态关闭）\n    var normalCloseCodes = [1000, 1001, 1005];\n    var wasEstablished = connectionEstablished;\n    connectionEstablished = false;\n    console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5173\\u95ED (code: \".concat(event.code, \", reason: \").concat(event.reason || '无原因', \", simulationId: \").concat(simulationId, \")\"));\n    if (heartbeatInterval) {\n      clearInterval(heartbeatInterval);\n      heartbeatInterval = null;\n    }\n    if (heartbeatTimeout) {\n      clearTimeout(heartbeatTimeout);\n      heartbeatTimeout = null;\n    }\n    if (onClose) onClose(event);\n\n    // 仅在连接曾经成功建立且非正常关闭时尝试重连\n    // 添加延迟，避免过快重连\n    if (wasEstablished && !normalCloseCodes.includes(event.code) && reconnectAttempts < retryAttempts) {\n      var delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\n      console.log(\"\\u8FDE\\u63A5\\u5F02\\u5E38\\u5173\\u95ED\\uFF0C\\u5C06\\u5728\".concat(delay, \"ms\\u540E\\u5C1D\\u8BD5\\u91CD\\u65B0\\u8FDE\\u63A5...\"));\n      setTimeout(function () {\n        reconnectAttempts++;\n        var newSocket = _setupWebSocket(simulationId, options);\n        if (newSocket && typeof onReconnect === 'function') {\n          onReconnect(newSocket);\n        }\n      }, delay);\n    }\n  };\n  socket.onerror = function (error) {\n    console.error('WebSocket错误:', error);\n    if (onError) onError(error);\n  };\n  return socket;\n};\nvar closeWebSocket = function closeWebSocket(socket) {\n  var heartbeatInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var heartbeatTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // 清理心跳\n  if (heartbeatInterval) {\n    clearInterval(heartbeatInterval);\n  }\n  if (heartbeatTimeout) {\n    clearTimeout(heartbeatTimeout);\n  }\n\n  // 关闭连接\n  if (socket) {\n    try {\n      console.log('正在关闭WebSocket连接...');\n      if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n        socket.close(1000, \"正常关闭\");\n      } else {\n        console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5904\\u4E8E\\u5173\\u95ED\\u72B6\\u6001 (readyState: \".concat(socket.readyState, \")\"));\n      }\n    } catch (error) {\n      console.error('关闭WebSocket连接时出错:', error);\n    } finally {\n      // 清理事件处理器\n      socket.onopen = null;\n      socket.onmessage = null;\n      socket.onclose = null;\n      socket.onerror = null;\n      console.log('WebSocket连接已关闭并清理事件处理器');\n    }\n  } else {\n    console.log('没有活动的WebSocket连接需要关闭');\n  }\n};\nexport { _setupWebSocket as setupWebSocket, closeWebSocket };","map":{"version":3,"names":["setupWebSocket","simulationId","options","arguments","length","undefined","onOpen","onMessage","onClose","onError","onReconnect","_options$retryAttempt","retryAttempts","_options$initialDelay","initialDelay","wsProtocol","window","location","protocol","wsBaseUrl","concat","hostname","wsUrl","console","log","socket","WebSocket","error","heartbeatInterval","heartbeatTimeout","reconnectAttempts","connectionEstablished","startHeartbeat","setInterval","readyState","OPEN","send","JSON","stringify","type","setTimeout","warn","cleanupAndReconnect","closeWebSocket","delay","Math","min","pow","newSocket","onopen","event","onmessage","data","parse","heartbeat","clearTimeout","Error","onclose","normalCloseCodes","wasEstablished","code","reason","clearInterval","includes","onerror","CONNECTING","close"],"sources":["F:/python/course/crowdsensing/frontend/src/components/simulation/WebSocketManager.js"],"sourcesContent":["// WebSocketManager.js\r\nconst setupWebSocket = (simulationId, options = {}) => {\r\n  const {\r\n    onOpen, \r\n    onMessage, \r\n    onClose, \r\n    onError, \r\n    onReconnect,\r\n    retryAttempts = 5, \r\n    initialDelay = 1000\r\n  } = options;\r\n  \r\n  // 创建WebSocket连接\r\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n  const wsBaseUrl = `${wsProtocol}//${window.location.hostname}:8000`;\r\n  const wsUrl = `${wsBaseUrl}/api/v1/ws/simulations/${simulationId}`;\r\n  \r\n  console.log(`连接WebSocket: ${wsUrl} (simulationId: ${simulationId})`);\r\n  \r\n  let socket = null;\r\n  try {\r\n    socket = new WebSocket(wsUrl);\r\n  } catch (error) {\r\n    console.error('创建WebSocket连接失败:', error);\r\n    if (onError) onError(error);\r\n    return null;\r\n  }\r\n  \r\n  // 重置连接状态\r\n  let heartbeatInterval = null;\r\n  let heartbeatTimeout = null;\r\n  let reconnectAttempts = 0;\r\n  let connectionEstablished = false;\r\n  \r\n  // 心跳检测\r\n  const startHeartbeat = () => {\r\n    heartbeatInterval = setInterval(() => {\r\n      if (socket && socket.readyState === WebSocket.OPEN) {\r\n        try {\r\n          socket.send(JSON.stringify({ type: 'heartbeat' }));\r\n          \r\n          heartbeatTimeout = setTimeout(() => {\r\n            console.warn('心跳超时，尝试重新连接...');\r\n            cleanupAndReconnect();\r\n          }, 5000);\r\n        } catch (error) {\r\n          console.error('发送心跳消息失败:', error);\r\n          cleanupAndReconnect();\r\n        }\r\n      }\r\n    }, 30000);\r\n  };\r\n  \r\n  // 清理资源并重连\r\n  const cleanupAndReconnect = () => {\r\n    closeWebSocket(socket, heartbeatInterval, heartbeatTimeout);\r\n    \r\n    if (reconnectAttempts < retryAttempts) {\r\n      reconnectAttempts++;\r\n      const delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\r\n      console.log(`尝试重新连接WebSocket... (${reconnectAttempts}/${retryAttempts}) 延迟: ${delay}ms`);\r\n      setTimeout(() => {\r\n        const newSocket = setupWebSocket(simulationId, options);\r\n        if (newSocket && typeof onReconnect === 'function') {\r\n          onReconnect(newSocket);\r\n        }\r\n      }, delay);\r\n    }\r\n  };\r\n  \r\n  // 添加事件处理器\r\n  socket.onopen = (event) => {\r\n    console.log(`WebSocket连接已建立 (simulationId: ${simulationId})`);\r\n    connectionEstablished = true;\r\n    reconnectAttempts = 0;\r\n    startHeartbeat();\r\n    if (onOpen) onOpen(event);\r\n  };\r\n  \r\n  socket.onmessage = (event) => {\r\n    try {\r\n      const data = JSON.parse(event.data);\r\n      \r\n      // 如果是心跳响应，重置超时\r\n      if (data.heartbeat && heartbeatTimeout) {\r\n        clearTimeout(heartbeatTimeout);\r\n      }\r\n      \r\n      // 检查错误消息\r\n      if (data.error) {\r\n        console.warn('WebSocket接收到错误消息:', data.error);\r\n        if (typeof onError === 'function') {\r\n          onError(new Error(data.error));\r\n        }\r\n        return;\r\n      }\r\n      \r\n      if (onMessage) onMessage(data, event);\r\n    } catch (error) {\r\n      console.error('解析WebSocket消息失败:', error);\r\n    }\r\n  };\r\n  \r\n  socket.onclose = (event) => {\r\n    // 正常关闭代码：1000（正常关闭）,1001（离开页面）,1005（无状态关闭）\r\n    const normalCloseCodes = [1000, 1001, 1005];\r\n    const wasEstablished = connectionEstablished;\r\n    \r\n    connectionEstablished = false;\r\n    console.log(`WebSocket连接已关闭 (code: ${event.code}, reason: ${event.reason || '无原因'}, simulationId: ${simulationId})`);\r\n    \r\n    if (heartbeatInterval) {\r\n      clearInterval(heartbeatInterval);\r\n      heartbeatInterval = null;\r\n    }\r\n    \r\n    if (heartbeatTimeout) {\r\n      clearTimeout(heartbeatTimeout);\r\n      heartbeatTimeout = null;\r\n    }\r\n    \r\n    if (onClose) onClose(event);\r\n    \r\n    // 仅在连接曾经成功建立且非正常关闭时尝试重连\r\n    // 添加延迟，避免过快重连\r\n    if (wasEstablished && !normalCloseCodes.includes(event.code) && reconnectAttempts < retryAttempts) {\r\n      const delay = Math.min(initialDelay * Math.pow(1.5, reconnectAttempts), 30000);\r\n      console.log(`连接异常关闭，将在${delay}ms后尝试重新连接...`);\r\n      \r\n      setTimeout(() => {\r\n        reconnectAttempts++;\r\n        const newSocket = setupWebSocket(simulationId, options);\r\n        if (newSocket && typeof onReconnect === 'function') {\r\n          onReconnect(newSocket);\r\n        }\r\n      }, delay);\r\n    }\r\n  };\r\n  \r\n  socket.onerror = (error) => {\r\n    console.error('WebSocket错误:', error);\r\n    if (onError) onError(error);\r\n  };\r\n  \r\n  return socket;\r\n};\r\n\r\nconst closeWebSocket = (socket, heartbeatInterval = null, heartbeatTimeout = null) => {\r\n  // 清理心跳\r\n  if (heartbeatInterval) {\r\n    clearInterval(heartbeatInterval);\r\n  }\r\n  \r\n  if (heartbeatTimeout) {\r\n    clearTimeout(heartbeatTimeout);\r\n  }\r\n  \r\n  // 关闭连接\r\n  if (socket) {\r\n    try {\r\n      console.log('正在关闭WebSocket连接...');\r\n      if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\r\n        socket.close(1000, \"正常关闭\");\r\n      } else {\r\n        console.log(`WebSocket连接已处于关闭状态 (readyState: ${socket.readyState})`);\r\n      }\r\n    } catch (error) {\r\n      console.error('关闭WebSocket连接时出错:', error);\r\n    } finally {\r\n      // 清理事件处理器\r\n      socket.onopen = null;\r\n      socket.onmessage = null;\r\n      socket.onclose = null;\r\n      socket.onerror = null;\r\n      console.log('WebSocket连接已关闭并清理事件处理器');\r\n    }\r\n  } else {\r\n    console.log('没有活动的WebSocket连接需要关闭');\r\n  }\r\n};\r\n\r\nexport { setupWebSocket, closeWebSocket };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}