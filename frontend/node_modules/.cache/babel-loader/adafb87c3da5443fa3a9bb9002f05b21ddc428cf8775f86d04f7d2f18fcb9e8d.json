{"ast":null,"code":"export default {\n  name: 'SimulationCanvas',\n  props: {\n    hunters: {\n      type: Array,\n      required: true\n    },\n    targets: {\n      type: Array,\n      required: true\n    },\n    environmentSize: {\n      type: Number,\n      default: 500\n    },\n    isRunning: {\n      type: Boolean,\n      default: false\n    },\n    isCaptured: {\n      type: Boolean,\n      default: false\n    },\n    showTrails: {\n      type: Boolean,\n      default: true\n    },\n    showVisionRange: {\n      type: Boolean,\n      default: false\n    },\n    showCommunicationRange: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      canvasSize: 600,\n      canvas: null,\n      ctx: null,\n      scale: 1,\n      colorMap: {\n        hunter: '#3f51b5',\n        // 蓝色\n        target: '#f44336',\n        // 红色\n        vision: 'rgba(63, 81, 181, 0.1)',\n        // 半透明蓝色\n        communication: 'rgba(63, 81, 181, 0.05)',\n        // 更透明的蓝色\n        trail: 'rgba(63, 81, 181, 0.5)',\n        // 半透明蓝色\n        captureRange: 'rgba(76, 175, 80, 0.3)',\n        // 半透明绿色\n        captured: 'rgba(244, 67, 54, 0.3)' // 半透明红色\n      }\n    };\n  },\n  mounted() {\n    this.initCanvas();\n    this.drawSimulation();\n  },\n  methods: {\n    initCanvas() {\n      this.canvas = this.$refs.canvas;\n      this.ctx = this.canvas.getContext('2d');\n      this.scale = this.canvasSize / this.environmentSize;\n    },\n    drawSimulation() {\n      if (!this.ctx) return;\n\n      // 清除画布\n      this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n\n      // 绘制环境边界\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize);\n\n      // 绘制捕获状态\n      if (this.isCaptured) {\n        this.ctx.fillStyle = this.colorMap.captured;\n        this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n        this.ctx.font = 'bold 32px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2);\n      }\n\n      // 绘制猎手\n      this.hunters.forEach(hunter => {\n        this.drawAgent(hunter, 'hunter');\n      });\n\n      // 绘制目标\n      this.targets.forEach(target => {\n        this.drawAgent(target, 'target');\n      });\n    },\n    drawAgent(agent, type) {\n      const pos = this.transformPosition(agent.position);\n\n      // 绘制视野范围\n      if (this.showVisionRange) {\n        this.ctx.beginPath();\n        this.ctx.arc(pos.x, pos.y, agent.vision_range * this.scale, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.colorMap.vision;\n        this.ctx.fill();\n      }\n\n      // 绘制通信范围 (仅猎手)\n      if (type === 'hunter' && this.showCommunicationRange) {\n        this.ctx.beginPath();\n        this.ctx.arc(pos.x, pos.y, agent.communication_range * this.scale, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.colorMap.communication;\n        this.ctx.fill();\n      }\n\n      // 绘制捕获范围 (仅猎手)\n      if (type === 'hunter') {\n        this.ctx.beginPath();\n        this.ctx.arc(pos.x, pos.y, 10 * this.scale, 0, Math.PI * 2); // 捕获范围固定为10\n        this.ctx.fillStyle = this.colorMap.captureRange;\n        this.ctx.fill();\n      }\n\n      // 绘制轨迹\n      if (this.showTrails && agent.history && agent.history.length > 1) {\n        this.ctx.beginPath();\n        const startPos = this.transformPosition(agent.history[0]);\n        this.ctx.moveTo(startPos.x, startPos.y);\n        for (let i = 1; i < agent.history.length; i++) {\n          const histPos = this.transformPosition(agent.history[i]);\n          this.ctx.lineTo(histPos.x, histPos.y);\n        }\n        this.ctx.strokeStyle = this.colorMap[type];\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n      }\n\n      // 绘制智能体\n      this.ctx.beginPath();\n      this.ctx.arc(pos.x, pos.y, type === 'hunter' ? 5 : 8, 0, Math.PI * 2);\n      this.ctx.fillStyle = this.colorMap[type];\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 1;\n      this.ctx.stroke();\n\n      // 绘制ID标签\n      this.ctx.font = '10px Arial';\n      this.ctx.fillStyle = '#000';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(agent.id.toString(), pos.x, pos.y + (type === 'hunter' ? 15 : 20));\n    },\n    transformPosition(position) {\n      // 将模拟坐标转换为画布坐标\n      return {\n        x: position[0] * this.scale,\n        y: position[1] * this.scale\n      };\n    }\n  },\n  watch: {\n    hunters() {\n      this.drawSimulation();\n    },\n    targets() {\n      this.drawSimulation();\n    },\n    isRunning() {\n      this.drawSimulation();\n    },\n    isCaptured() {\n      this.drawSimulation();\n    },\n    showTrails() {\n      this.drawSimulation();\n    },\n    showVisionRange() {\n      this.drawSimulation();\n    },\n    showCommunicationRange() {\n      this.drawSimulation();\n    },\n    environmentSize() {\n      this.scale = this.canvasSize / this.environmentSize;\n      this.drawSimulation();\n    }\n  }\n};","map":{"version":3,"names":["name","props","hunters","type","Array","required","targets","environmentSize","Number","default","isRunning","Boolean","isCaptured","showTrails","showVisionRange","showCommunicationRange","data","canvasSize","canvas","ctx","scale","colorMap","hunter","target","vision","communication","trail","captureRange","captured","mounted","initCanvas","drawSimulation","methods","$refs","getContext","clearRect","strokeStyle","lineWidth","strokeRect","fillStyle","fillRect","font","textAlign","fillText","forEach","drawAgent","agent","pos","transformPosition","position","beginPath","arc","x","y","vision_range","Math","PI","fill","communication_range","history","length","startPos","moveTo","i","histPos","lineTo","stroke","id","toString","watch"],"sources":["src/components/SimulationCanvas.vue"],"sourcesContent":["<template>\r\n    <div class=\"simulation-canvas\">\r\n      <canvas \r\n        ref=\"canvas\" \r\n        :width=\"canvasSize\" \r\n        :height=\"canvasSize\" \r\n        class=\"simulation-canvas__area\"\r\n      ></canvas>\r\n      <div class=\"simulation-canvas__controls\">\r\n        <v-btn \r\n          color=\"primary\" \r\n          :disabled=\"isRunning || isCaptured\" \r\n          @click=\"$emit('start')\"\r\n        >\r\n          <v-icon left>mdi-play</v-icon> 开始\r\n        </v-btn>\r\n        <v-btn \r\n          color=\"error\" \r\n          :disabled=\"!isRunning\" \r\n          @click=\"$emit('stop')\"\r\n        >\r\n          <v-icon left>mdi-stop</v-icon> 停止\r\n        </v-btn>\r\n        <v-btn \r\n          color=\"warning\" \r\n          :disabled=\"isRunning\" \r\n          @click=\"$emit('reset')\"\r\n        >\r\n          <v-icon left>mdi-refresh</v-icon> 重置\r\n        </v-btn>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'SimulationCanvas',\r\n    props: {\r\n      hunters: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      targets: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      environmentSize: {\r\n        type: Number,\r\n        default: 500\r\n      },\r\n      isRunning: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      isCaptured: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      showTrails: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      showVisionRange: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      showCommunicationRange: {\r\n        type: Boolean,\r\n        default: false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        canvasSize: 600,\r\n        canvas: null,\r\n        ctx: null,\r\n        scale: 1,\r\n        colorMap: {\r\n          hunter: '#3f51b5', // 蓝色\r\n          target: '#f44336', // 红色\r\n          vision: 'rgba(63, 81, 181, 0.1)', // 半透明蓝色\r\n          communication: 'rgba(63, 81, 181, 0.05)', // 更透明的蓝色\r\n          trail: 'rgba(63, 81, 181, 0.5)', // 半透明蓝色\r\n          captureRange: 'rgba(76, 175, 80, 0.3)', // 半透明绿色\r\n          captured: 'rgba(244, 67, 54, 0.3)' // 半透明红色\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      this.initCanvas()\r\n      this.drawSimulation()\r\n    },\r\n    methods: {\r\n      initCanvas() {\r\n        this.canvas = this.$refs.canvas\r\n        this.ctx = this.canvas.getContext('2d')\r\n        this.scale = this.canvasSize / this.environmentSize\r\n      },\r\n      drawSimulation() {\r\n        if (!this.ctx) return\r\n        \r\n        // 清除画布\r\n        this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize)\r\n        \r\n        // 绘制环境边界\r\n        this.ctx.strokeStyle = '#ccc'\r\n        this.ctx.lineWidth = 2\r\n        this.ctx.strokeRect(0, 0, this.canvasSize, this.canvasSize)\r\n        \r\n        // 绘制捕获状态\r\n        if (this.isCaptured) {\r\n          this.ctx.fillStyle = this.colorMap.captured\r\n          this.ctx.fillRect(0, 0, this.canvasSize, this.canvasSize)\r\n          this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'\r\n          this.ctx.font = 'bold 32px Arial'\r\n          this.ctx.textAlign = 'center'\r\n          this.ctx.fillText('目标已捕获!', this.canvasSize / 2, this.canvasSize / 2)\r\n        }\r\n        \r\n        // 绘制猎手\r\n        this.hunters.forEach(hunter => {\r\n          this.drawAgent(hunter, 'hunter')\r\n        })\r\n        \r\n        // 绘制目标\r\n        this.targets.forEach(target => {\r\n          this.drawAgent(target, 'target')\r\n        })\r\n      },\r\n      drawAgent(agent, type) {\r\n        const pos = this.transformPosition(agent.position)\r\n        \r\n        // 绘制视野范围\r\n        if (this.showVisionRange) {\r\n          this.ctx.beginPath()\r\n          this.ctx.arc(pos.x, pos.y, agent.vision_range * this.scale, 0, Math.PI * 2)\r\n          this.ctx.fillStyle = this.colorMap.vision\r\n          this.ctx.fill()\r\n        }\r\n        \r\n        // 绘制通信范围 (仅猎手)\r\n        if (type === 'hunter' && this.showCommunicationRange) {\r\n          this.ctx.beginPath()\r\n          this.ctx.arc(pos.x, pos.y, agent.communication_range * this.scale, 0, Math.PI * 2)\r\n          this.ctx.fillStyle = this.colorMap.communication\r\n          this.ctx.fill()\r\n        }\r\n        \r\n        // 绘制捕获范围 (仅猎手)\r\n        if (type === 'hunter') {\r\n          this.ctx.beginPath()\r\n          this.ctx.arc(pos.x, pos.y, 10 * this.scale, 0, Math.PI * 2) // 捕获范围固定为10\r\n          this.ctx.fillStyle = this.colorMap.captureRange\r\n          this.ctx.fill()\r\n        }\r\n        \r\n        // 绘制轨迹\r\n        if (this.showTrails && agent.history && agent.history.length > 1) {\r\n          this.ctx.beginPath()\r\n          const startPos = this.transformPosition(agent.history[0])\r\n          this.ctx.moveTo(startPos.x, startPos.y)\r\n          \r\n          for (let i = 1; i < agent.history.length; i++) {\r\n            const histPos = this.transformPosition(agent.history[i])\r\n            this.ctx.lineTo(histPos.x, histPos.y)\r\n          }\r\n          \r\n          this.ctx.strokeStyle = this.colorMap[type]\r\n          this.ctx.lineWidth = 1\r\n          this.ctx.stroke()\r\n        }\r\n        \r\n        // 绘制智能体\r\n        this.ctx.beginPath()\r\n        this.ctx.arc(pos.x, pos.y, type === 'hunter' ? 5 : 8, 0, Math.PI * 2)\r\n        this.ctx.fillStyle = this.colorMap[type]\r\n        this.ctx.fill()\r\n        this.ctx.strokeStyle = '#fff'\r\n        this.ctx.lineWidth = 1\r\n        this.ctx.stroke()\r\n        \r\n        // 绘制ID标签\r\n        this.ctx.font = '10px Arial'\r\n        this.ctx.fillStyle = '#000'\r\n        this.ctx.textAlign = 'center'\r\n        this.ctx.fillText(agent.id.toString(), pos.x, pos.y + (type === 'hunter' ? 15 : 20))\r\n      },\r\n      transformPosition(position) {\r\n        // 将模拟坐标转换为画布坐标\r\n        return {\r\n          x: position[0] * this.scale,\r\n          y: position[1] * this.scale\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      hunters() {\r\n        this.drawSimulation()\r\n      },\r\n      targets() {\r\n        this.drawSimulation()\r\n      },\r\n      isRunning() {\r\n        this.drawSimulation()\r\n      },\r\n      isCaptured() {\r\n        this.drawSimulation()\r\n      },\r\n      showTrails() {\r\n        this.drawSimulation()\r\n      },\r\n      showVisionRange() {\r\n        this.drawSimulation()\r\n      },\r\n      showCommunicationRange() {\r\n        this.drawSimulation()\r\n      },\r\n      environmentSize() {\r\n        this.scale = this.canvasSize / this.environmentSize\r\n        this.drawSimulation()\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .simulation-canvas {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .simulation-canvas__area {\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    background-color: #f9f9f9;\r\n    margin-bottom: 16px;\r\n  }\r\n  \r\n  .simulation-canvas__controls {\r\n    display: flex;\r\n    gap: 16px;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}