{"ast":null,"code":"import _typeof from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _regeneratorRuntime from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"F:/python/course/crowdsensing/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.is-finite.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.timers.js\";\n// 导入组件\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\nimport SimulationInfo from '../components/simulation/SimulationInfo.vue';\nimport HunterStatisticsChart from '../components/simulation/HunterStatisticsChart.vue';\nimport PerformanceMonitor from '../components/simulation/PerformanceMonitor.vue';\nimport EnvironmentSettingsPanel from '../components/simulation/EnvironmentSettingsPanel.vue';\nimport { setupWebSocket, closeWebSocket } from '../components/simulation/WebSocketManager.js';\nimport { mapState, mapGetters } from 'vuex';\nexport default {\n  name: 'SimulationDetail',\n  components: {\n    SimulationCanvas: SimulationCanvas,\n    SimulationInfo: SimulationInfo,\n    HunterStatisticsChart: HunterStatisticsChart,\n    PerformanceMonitor: PerformanceMonitor,\n    EnvironmentSettingsPanel: EnvironmentSettingsPanel\n  },\n  props: {\n    simulationId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      simulation: {},\n      isRunning: false,\n      isCaptured: false,\n      isEscaped: false,\n      socket: null,\n      showTrails: true,\n      showVisionRange: false,\n      showCommunicationRange: false,\n      showDeleteDialog: false,\n      deleteLoading: false,\n      // 添加缺失的响应式属性\n      activeTab: 0,\n      // WebSocket相关状态\n      wsLatency: 0,\n      lastMessageTime: 0,\n      // 连接状态提示\n      showConnectionStatus: false,\n      connectionStatusText: '',\n      connectionStatusColor: 'info',\n      // 性能监控\n      renderTime: 0,\n      lastRenderTimestamp: 0,\n      // 数据处理相关\n      dataUpdateTimer: null,\n      // 连接状态标记\n      isConnecting: false,\n      // 捕获状态跟踪\n      partialCaptureNotified: false,\n      obstacleCount: 3 // 默认障碍物数量\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapState({\n    storeCurrentSimulation: function storeCurrentSimulation(state) {\n      return state.currentSimulation;\n    },\n    simulationsLoading: function simulationsLoading(state) {\n      return state.loading;\n    }\n  })), mapGetters(['getSimulationById'])), {}, {\n    statusChipColor: function statusChipColor() {\n      if (this.isCaptured) return 'success';\n      if (this.isEscaped) return 'warning';\n      if (this.isRunning) return 'primary';\n      return 'grey';\n    },\n    statusChipText: function statusChipText() {\n      if (this.isCaptured) return '已捕获';\n      if (this.isEscaped) return '已逃脱';\n      if (this.isRunning) return '进行中';\n      return '已停止';\n    },\n    getTotalTargets: function getTotalTargets() {\n      // 如果有明确的总数则使用，否则计算当前剩余+已捕获\n      return this.simulation.total_targets_count || (this.simulation.targets ? this.simulation.targets.length : 0) + (this.simulation.captured_targets_count || 0) + (this.simulation.escaped_targets_count || 0);\n    },\n    getProgressColor: function getProgressColor() {\n      var captured = this.simulation.captured_targets_count || 0;\n      var total = this.getTotalTargets;\n      if (captured === 0) return 'grey';\n      if (captured < total) return 'info';\n      return 'success';\n    }\n  }),\n  created: function created() {\n    // 注册错误处理事件监听\n    this.$root.$on('api-error', this.handleApiError);\n  },\n  mounted: function mounted() {\n    console.log('SimulationDetail mounted');\n    // 监听页面可见性变化\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    window.addEventListener('focus', this.handleWindowFocus);\n    window.addEventListener('blur', this.handleWindowBlur);\n\n    // 初始化组件\n    this.initializeComponent();\n  },\n  beforeDestroy: function beforeDestroy() {\n    console.log('SimulationDetail beforeDestroy');\n    // 清理资源\n    this.closeWebSocketConnection();\n    this.cleanupTimers();\n\n    // 移除事件监听\n    this.$root.$off('api-error', this.handleApiError);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    window.removeEventListener('focus', this.handleWindowFocus);\n    window.removeEventListener('blur', this.handleWindowBlur);\n  },\n  methods: {\n    // 初始化组件\n    initializeComponent: function initializeComponent() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              console.log('初始化组件...');\n              _context.prev = 1;\n              _context.next = 4;\n              return _this.fetchSimulation();\n            case 4:\n              console.log('模拟数据获取成功:', _this.simulation.id);\n\n              // 检查障碍物数量，如果为0但输入值不为0，则生成障碍物\n              if (!((!_this.simulation.obstacles || _this.simulation.obstacles.length === 0) && _this.obstacleCount > 0)) {\n                _context.next = 9;\n                break;\n              }\n              console.log('初始化障碍物...');\n              _context.next = 9;\n              return _this.regenerateObstacles(_this.obstacleCount);\n            case 9:\n              // 设置捕获状态和逃脱状态\n              _this.isRunning = _this.simulation.is_running;\n              _this.isCaptured = _this.simulation.is_captured;\n              _this.isEscaped = _this.simulation.escaped || false;\n\n              // 确保数据格式正确\n              if (typeof _this.simulation.hunters === 'string') {\n                try {\n                  _this.simulation.hunters = JSON.parse(_this.simulation.hunters);\n                } catch (e) {\n                  console.error('解析hunters失败:', e);\n                  _this.simulation.hunters = [];\n                }\n              }\n              if (typeof _this.simulation.targets === 'string') {\n                try {\n                  _this.simulation.targets = JSON.parse(_this.simulation.targets);\n                } catch (e) {\n                  console.error('解析targets失败:', e);\n                  _this.simulation.targets = [];\n                }\n              }\n\n              // 仅在模拟正在运行且未被捕获/未逃脱时建立WebSocket连接\n              if (_this.isRunning && !_this.isCaptured && !_this.isEscaped) {\n                _this.setupWebSocketConnection();\n              } else if (_this.isCaptured || _this.isEscaped) {\n                // 如果模拟已经完成，显示完成状态\n                console.log('模拟已完成，显示最终状态');\n\n                // 确保画布知道模拟已完成\n                _this.$nextTick(function () {\n                  if (_this.$refs.canvas) {\n                    _this.$refs.canvas.needsRender = true;\n                    // 强制最终状态\n                    if (_this.$refs.canvas.lastRenderState) {\n                      _this.$refs.canvas.lastRenderState = {\n                        isCaptured: _this.isCaptured,\n                        isEscaped: _this.isEscaped\n                      };\n                    }\n                    // 强制重绘一次\n                    _this.$refs.canvas.drawSimulation(true);\n                  }\n                });\n\n                // 加载最终快照数据\n                _this.loadFinalSnapshot();\n              }\n              _context.next = 21;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('初始化组件失败:', _context.t0);\n              _this.showErrorStatus('初始化失败，请刷新页面重试');\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 17]]);\n      }))();\n    },\n    // 添加加载最终快照的方法\n    loadFinalSnapshot: function loadFinalSnapshot() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _this2.axios.get(\"/simulations/\".concat(_this2.simulationId, \"/final-snapshot\"));\n            case 3:\n              response = _context2.sent;\n              if (response.data) {\n                console.log('获取到最终快照数据:', response.data);\n\n                // 更新模拟状态\n                if (response.data.is_captured !== undefined) {\n                  _this2.isCaptured = response.data.is_captured;\n                }\n\n                // 更新步数\n                if (response.data.step !== undefined) {\n                  _this2.simulation.step_count = response.data.step;\n                }\n\n                // 更新捕获时间\n                if (response.data.capture_time !== undefined && response.data.capture_time !== null) {\n                  _this2.simulation.capture_time = response.data.capture_time;\n                }\n\n                // 更新显示数据\n                if (response.data.hunters) {\n                  // 确保hunters是数组\n                  _this2.simulation.hunters = Array.isArray(response.data.hunters) ? response.data.hunters : JSON.parse(response.data.hunters);\n                }\n                if (response.data.targets) {\n                  // 确保targets是数组\n                  _this2.simulation.targets = Array.isArray(response.data.targets) ? response.data.targets : JSON.parse(response.data.targets);\n                }\n\n                // 更新捕获目标数量\n                if (response.data.captured_targets_count !== undefined) {\n                  _this2.simulation.captured_targets_count = response.data.captured_targets_count;\n                }\n\n                // 更新创建时间\n                if (response.data.creation_time) {\n                  _this2.simulation.created_at = response.data.creation_time;\n                }\n\n                // 强制重绘画布\n                _this2.$nextTick(function () {\n                  if (_this2.$refs.canvas) {\n                    _this2.$refs.canvas.drawSimulation(true);\n                  }\n                });\n              }\n              _context2.next = 10;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.warn('加载最终快照失败:', _context2.t0);\n              // 加载失败时不中断流程，使用默认显示\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 7]]);\n      }))();\n    },\n    // 获取模拟数据\n    fetchSimulation: function fetchSimulation() {\n      var _this3 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var storeSimulation, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              console.log('获取模拟数据, ID:', _this3.simulationId);\n              // 尝试从store获取数据\n              storeSimulation = _this3.getSimulationById(_this3.simulationId); // 如果store中没有数据，从API获取\n              if (storeSimulation) {\n                _context3.next = 11;\n                break;\n              }\n              console.log('从API获取模拟数据');\n              _context3.next = 7;\n              return _this3.$store.dispatch('fetchSimulation', _this3.simulationId);\n            case 7:\n              response = _context3.sent;\n              _this3.simulation = response;\n              _context3.next = 13;\n              break;\n            case 11:\n              console.log('从Store获取模拟数据');\n              _this3.simulation = storeSimulation;\n            case 13:\n              // 更新状态\n              _this3.isRunning = _this3.simulation.is_running;\n              _this3.isCaptured = _this3.simulation.is_captured;\n              _this3.isEscaped = _this3.simulation.escaped || false;\n              console.log('模拟数据获取完成:', _this3.simulation.name);\n              return _context3.abrupt(\"return\", _this3.simulation);\n            case 20:\n              _context3.prev = 20;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('获取模拟数据失败:', _context3.t0);\n              _this3.$toast.error('获取模拟数据失败');\n              throw _context3.t0;\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 20]]);\n      }))();\n    },\n    // 设置WebSocket连接\n    setupWebSocketConnection: function setupWebSocketConnection() {\n      var _this4 = this;\n      // 连接创建中标记，防止重复创建\n      if (this.isConnecting) {\n        console.log('WebSocket连接已在创建中，避免重复创建');\n        return;\n      }\n      this.isConnecting = true;\n\n      // 确保先关闭已有连接\n      if (this.socket) {\n        console.log('关闭已有WebSocket连接，准备创建新连接');\n        this.closeWebSocketConnection();\n\n        // 添加短延迟确保连接完全关闭\n        setTimeout(function () {\n          _this4.createNewWebSocketConnection();\n        }, 300);\n      } else {\n        this.createNewWebSocketConnection();\n      }\n    },\n    // 提取创建连接的逻辑为单独方法\n    createNewWebSocketConnection: function createNewWebSocketConnection() {\n      var _this5 = this;\n      console.log(\"\\u521B\\u5EFAWebSocket\\u8FDE\\u63A5\\uFF0C\\u6A21\\u62DFID: \".concat(this.simulationId));\n      this.socket = setupWebSocket(this.simulationId, {\n        onOpen: function onOpen() {\n          console.log(\"WebSocket\\u8FDE\\u63A5\\u5DF2\\u5EFA\\u7ACB\\uFF0C\\u6A21\\u62DFID: \".concat(_this5.simulationId));\n          _this5.showSuccessStatus('WebSocket连接已建立');\n          _this5.isConnecting = false; // 重置连接状态\n        },\n        onMessage: function onMessage(data) {\n          _this5.handleWebSocketMessage(data);\n        },\n        onClose: function onClose(event) {\n          // 如果是正常关闭，不显示错误\n          if (event.code !== 1000 && event.code !== 1001) {\n            _this5.showWarningStatus('WebSocket连接已关闭');\n          }\n          _this5.isConnecting = false; // 重置连接状态\n        },\n        onError: function onError() {\n          _this5.showErrorStatus('WebSocket连接错误');\n          _this5.isConnecting = false; // 重置连接状态\n        },\n        onReconnect: function onReconnect(newSocket) {\n          _this5.socket = newSocket;\n          _this5.showInfoStatus('WebSocket已重新连接');\n        }\n      });\n    },\n    // 改进closeWebSocketConnection方法\n    closeWebSocketConnection: function closeWebSocketConnection() {\n      if (this.socket) {\n        console.log(\"\\u5173\\u95EDWebSocket\\u8FDE\\u63A5\\uFF0C\\u6A21\\u62DFID: \".concat(this.simulationId, \"\\uFF0C\\u539F\\u56E0: \").concat(new Error().stack));\n        try {\n          closeWebSocket(this.socket);\n        } catch (e) {\n          console.error('关闭WebSocket时出错:', e);\n        } finally {\n          this.socket = null;\n          this.isConnecting = false;\n        }\n      }\n    },\n    // 处理WebSocket消息\n    handleWebSocketMessage: function handleWebSocketMessage(data) {\n      try {\n        var _data$targets, _this$simulation, _this$simulation2, _this$simulation3;\n        // 记录接收到的消息内容，便于调试\n        console.log('收到WebSocket消息:', {\n          isRunning: data === null || data === void 0 ? void 0 : data.is_running,\n          isCaptured: data === null || data === void 0 ? void 0 : data.is_captured,\n          isEscaped: data === null || data === void 0 ? void 0 : data.escaped,\n          targetCount: (data === null || data === void 0 || (_data$targets = data.targets) === null || _data$targets === void 0 ? void 0 : _data$targets.length) || 0,\n          capturedCount: (data === null || data === void 0 ? void 0 : data.captured_targets_count) || 0,\n          escapedCount: (data === null || data === void 0 ? void 0 : data.escaped_targets_count) || 0,\n          totalTargets: (data === null || data === void 0 ? void 0 : data.total_targets_count) || 0\n        });\n\n        // 如果模拟已完成，忽略后续消息\n        if (this.isCaptured || this.isEscaped) {\n          console.log('模拟已完成，忽略WebSocket消息');\n          return;\n        }\n\n        // 计算WebSocket延迟\n        this.calculateWsLatency();\n\n        // 数据有效性检查\n        if (!data || _typeof(data) !== 'object') {\n          console.error('收到无效WebSocket消息:', data);\n          return; // 不关闭连接，只忽略此消息\n        }\n\n        // 处理错误消息\n        if (data.error) {\n          console.error('WebSocket错误:', data.error);\n          this.$toast.error(\"WebSocket\\u9519\\u8BEF: \".concat(data.error));\n          return;\n        }\n\n        // 创建安全的数据对象，替换所有undefined值\n        var safeData = {\n          id: data.id || this.simulationId,\n          is_running: data.is_running === undefined ? this.isRunning : data.is_running,\n          is_captured: data.is_captured === undefined ? this.isCaptured : data.is_captured,\n          escaped: data.escaped === undefined ? this.isEscaped : data.escaped,\n          hunters: Array.isArray(data.hunters) ? data.hunters : [],\n          targets: Array.isArray(data.targets) ? data.targets : [],\n          step_count: Number.isFinite(data.step_count) ? data.step_count : 0,\n          captured_targets_count: Number.isFinite(data.captured_targets_count) ? data.captured_targets_count : 0,\n          escaped_targets_count: Number.isFinite(data.escaped_targets_count) ? data.escaped_targets_count : 0,\n          total_targets_count: Number.isFinite(data.total_targets_count) ? data.total_targets_count : 0,\n          obstacles: Array.isArray(data.obstacles) ? data.obstacles : ((_this$simulation = this.simulation) === null || _this$simulation === void 0 ? void 0 : _this$simulation.obstacles) || []\n        };\n\n        // 检查模拟是否刚完成\n        var allCaptured = safeData.is_captured && (!safeData.targets || safeData.targets.length === 0);\n        var allEscaped = safeData.escaped && (!safeData.targets || safeData.targets.length === 0);\n\n        // 检查是否有新捕获的目标\n        var capturedCount = safeData.captured_targets_count || 0;\n        var previousCapturedCount = ((_this$simulation2 = this.simulation) === null || _this$simulation2 === void 0 ? void 0 : _this$simulation2.captured_targets_count) || 0;\n        var newCaptures = capturedCount > previousCapturedCount;\n\n        // 检查是否有新逃脱的目标\n        var escapedCount = safeData.escaped_targets_count || 0;\n        var previousEscapedCount = ((_this$simulation3 = this.simulation) === null || _this$simulation3 === void 0 ? void 0 : _this$simulation3.escaped_targets_count) || 0;\n        var newEscapes = escapedCount > previousEscapedCount;\n\n        // 使用防抖更新数据\n        this.updateSimulationDataDebounced(safeData);\n\n        // 处理目标捕获/逃脱提示\n        if (newCaptures) {\n          var newlyCaptured = capturedCount - previousCapturedCount;\n          this.$toast.success(\"\\u6210\\u529F\\u6355\\u83B7\".concat(newlyCaptured, \"\\u4E2A\\u76EE\\u6807\\uFF01\"));\n        }\n        if (newEscapes) {\n          var newlyEscaped = escapedCount - previousEscapedCount;\n          this.$toast.warning(\"\".concat(newlyEscaped, \"\\u4E2A\\u76EE\\u6807\\u6210\\u529F\\u9003\\u8131\\uFF01\"));\n        }\n\n        // 显示部分完成状态\n        var totalTargets = safeData.total_targets_count || capturedCount + escapedCount + (safeData.targets ? safeData.targets.length : 0);\n        if ((capturedCount > 0 || escapedCount > 0) && safeData.targets && safeData.targets.length > 0 && !this.partialCaptureNotified) {\n          this.$toast.info(\"\\u5DF2\\u5904\\u7406\".concat(capturedCount + escapedCount, \"/\").concat(totalTargets, \"\\u4E2A\\u76EE\\u6807\"));\n          this.partialCaptureNotified = true;\n        }\n\n        // 如果模拟刚完成，处理完成状态\n        if (allCaptured && !this.isCaptured || allEscaped && !this.isEscaped) {\n          console.log('模拟刚刚完成，关闭连接并最终更新');\n          this.isCaptured = allCaptured;\n          this.isEscaped = allEscaped;\n          this.isRunning = false;\n\n          // 更新Vuex Store\n          this.$store.dispatch('updateSimulationStatus', {\n            simulationId: this.simulationId,\n            isRunning: false,\n            isCaptured: allCaptured,\n            isEscaped: allEscaped\n          });\n\n          // 显示完成消息\n          if (allCaptured) {\n            this.$toast.success(\"\\u6A21\\u62DF\\u5B8C\\u6210\\uFF1A\\u6210\\u529F\\u6355\\u83B7\\u6240\\u6709\".concat(capturedCount, \"\\u4E2A\\u76EE\\u6807!\"));\n          } else if (allEscaped) {\n            this.$toast.warning(\"\\u6A21\\u62DF\\u5B8C\\u6210\\uFF1A\\u6240\\u6709\".concat(escapedCount, \"\\u4E2A\\u76EE\\u6807\\u6210\\u529F\\u9003\\u8131!\"));\n          }\n\n          // 关闭WebSocket连接\n          this.closeWebSocketConnection();\n\n          // 通知Canvas最终渲染\n          if (this.$refs.canvas) {\n            this.$refs.canvas.needsRender = true;\n          }\n          return;\n        }\n\n        // 如果运行状态改变但非完成，更新状态\n        if (this.isRunning !== safeData.is_running) {\n          this.isRunning = safeData.is_running;\n\n          // 更新Store\n          this.$store.dispatch('updateSimulationProperty', {\n            simulationId: this.simulationId,\n            property: 'is_running',\n            value: safeData.is_running\n          });\n\n          // 如果模拟停止但未完成，提示用户\n          if (!this.isRunning && !this.isCaptured && !this.isEscaped) {\n            this.$toast.info('模拟已停止');\n            this.closeWebSocketConnection();\n          }\n        }\n      } catch (error) {\n        // 捕获所有可能的异常，防止中断WebSocket连接\n        console.error('处理WebSocket消息时出错:', error);\n        console.error('错误详情:', error.stack);\n        this.$toast.error('处理模拟数据时出错，请刷新页面重试');\n\n        // 尝试继续保持连接\n        // 不要在此处关闭WebSocket连接，让心跳机制决定是否需要重连\n      }\n    },\n    // 计算WebSocket延迟\n    calculateWsLatency: function calculateWsLatency() {\n      var now = performance.now();\n      if (this.lastMessageTime) {\n        this.wsLatency = Math.round(now - this.lastMessageTime);\n      }\n      this.lastMessageTime = now;\n    },\n    // 防抖更新数据\n    updateSimulationDataDebounced: function updateSimulationDataDebounced(data) {\n      var _this6 = this;\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n      }\n      this.dataUpdateTimer = setTimeout(function () {\n        try {\n          var startTime = performance.now();\n\n          // 安全地更新模拟数据\n          if (data) {\n            _this6.simulation = _objectSpread(_objectSpread({}, _this6.simulation), data);\n            _this6.isRunning = !!data.is_running;\n            _this6.isCaptured = !!data.is_captured;\n            _this6.isEscaped = !!data.escaped;\n          }\n\n          // 计算渲染时间\n          _this6.renderTime = Math.round(performance.now() - startTime);\n        } catch (error) {\n          console.error('更新模拟数据时出错:', error);\n          // 继续正常运行，不中断模拟\n        }\n      }, 50);\n    },\n    // 模拟控制方法\n    startSimulation: function startSimulation() {\n      var _this7 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              // 先关闭可能存在的旧连接\n              console.log('启动模拟，关闭已有WebSocket连接');\n              _this7.closeWebSocketConnection();\n\n              // 添加短延迟确保连接完全关闭\n              _context4.next = 5;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 200);\n              });\n            case 5:\n              // 重置部分捕获通知标志\n              _this7.partialCaptureNotified = false;\n\n              // 发送启动请求到API\n              _context4.next = 8;\n              return _this7.$store.dispatch('startSimulation', _this7.simulationId);\n            case 8:\n              _this7.isRunning = true;\n\n              // 重新建立WebSocket连接以接收实时更新\n              console.log('模拟已启动，创建新WebSocket连接');\n              _this7.setupWebSocketConnection();\n              _this7.$toast.success('模拟已启动');\n              _context4.next = 19;\n              break;\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('启动模拟失败:', _context4.t0);\n              _this7.$toast.error('启动模拟失败');\n              _this7.isConnecting = false; // 确保重置连接状态\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 14]]);\n      }))();\n    },\n    stopSimulation: function stopSimulation() {\n      var _this8 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return _this8.$store.dispatch('stopSimulation', _this8.simulationId);\n            case 3:\n              _this8.isRunning = false;\n\n              // 关闭WebSocket连接\n              _this8.closeWebSocketConnection();\n              _this8.$toast.success('模拟已停止');\n              _context5.next = 12;\n              break;\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](0);\n              console.error('停止模拟失败:', _context5.t0);\n              _this8.$toast.error('停止模拟失败');\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[0, 8]]);\n      }))();\n    },\n    resetSimulation: function resetSimulation() {\n      var _this9 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              // 关闭现有连接\n              _this9.closeWebSocketConnection();\n\n              // 重置状态\n              _this9.isCaptured = false;\n              _this9.isEscaped = false;\n              _this9.partialCaptureNotified = false;\n              _context6.next = 7;\n              return _this9.$store.dispatch('resetSimulation', _this9.simulationId);\n            case 7:\n              data = _context6.sent;\n              _this9.simulation = data;\n              _this9.isRunning = false;\n\n              // 确保画布重绘\n              _this9.$nextTick(function () {\n                if (_this9.$refs.canvas) {\n                  _this9.$refs.canvas.drawSimulation(true);\n                }\n              });\n              _this9.$toast.success('模拟已重置');\n              _context6.next = 18;\n              break;\n            case 14:\n              _context6.prev = 14;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.error('重置模拟失败:', _context6.t0);\n              _this9.$toast.error('重置模拟失败');\n            case 18:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, null, [[0, 14]]);\n      }))();\n    },\n    deleteSimulation: function deleteSimulation() {\n      var _this10 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _this10.deleteLoading = true;\n              _context7.prev = 1;\n              // 确保关闭WebSocket连接\n              _this10.closeWebSocketConnection();\n              _context7.next = 5;\n              return _this10.$store.dispatch('deleteSimulation', _this10.simulationId);\n            case 5:\n              _this10.$toast.success('模拟已删除');\n              _this10.$router.push('/simulations');\n              _context7.next = 13;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](1);\n              console.error('删除模拟失败:', _context7.t0);\n              _this10.$toast.error('删除模拟失败');\n            case 13:\n              _context7.prev = 13;\n              _this10.deleteLoading = false;\n              _this10.showDeleteDialog = false;\n              return _context7.finish(13);\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[1, 9, 13, 17]]);\n      }))();\n    },\n    // 优化页面可见性变化处理\n    handleVisibilityChange: function handleVisibilityChange() {\n      if (document.hidden) {\n        // 页面隐藏时关闭WebSocket\n        console.log('页面隐藏，关闭WebSocket连接');\n        this.closeWebSocketConnection();\n      } else {\n        // 页面可见时，只在需要时重新连接\n        if (this.isRunning && !this.isCaptured && !this.isEscaped && !this.socket && !this.isConnecting) {\n          console.log('页面可见，模拟运行中，重新连接WebSocket');\n          this.setupWebSocketConnection();\n        }\n      }\n    },\n    // 优化窗口焦点变化处理\n    handleWindowFocus: function handleWindowFocus() {\n      if (this.isRunning && !this.isCaptured && !this.isEscaped && !this.socket && !this.isConnecting) {\n        console.log('窗口获得焦点，模拟运行中，重新连接WebSocket');\n        this.setupWebSocketConnection();\n      }\n    },\n    handleWindowBlur: function handleWindowBlur() {\n      // 窗口失去焦点时无需处理\n    },\n    // 导航方法\n    navigateToList: function navigateToList() {\n      // 清理资源后再导航\n      this.closeWebSocketConnection();\n      this.cleanupTimers();\n      this.$router.push('/simulations');\n    },\n    // 状态提示显示方法\n    showInfoStatus: function showInfoStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'info';\n      this.showConnectionStatus = true;\n    },\n    showSuccessStatus: function showSuccessStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'success';\n      this.showConnectionStatus = true;\n    },\n    showWarningStatus: function showWarningStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'warning';\n      this.showConnectionStatus = true;\n    },\n    showErrorStatus: function showErrorStatus(message) {\n      this.connectionStatusText = message;\n      this.connectionStatusColor = 'error';\n      this.showConnectionStatus = true;\n    },\n    // 错误处理\n    handleApiError: function handleApiError(error) {\n      console.error('API错误:', error);\n\n      // 特定错误处理\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\n        this.$toast.error('模拟不存在或已被删除');\n        this.$router.push('/simulations');\n      }\n    },\n    // 清理定时器\n    cleanupTimers: function cleanupTimers() {\n      if (this.dataUpdateTimer) {\n        clearTimeout(this.dataUpdateTimer);\n        this.dataUpdateTimer = null;\n      }\n    },\n    // 环境设置方法\n    toggleObstacles: function toggleObstacles(show) {\n      // 控制障碍物显示/隐藏\n      if (this.$refs.canvas) {\n        this.$refs.canvas.showObstacles = show;\n        // 通知画布需要重绘\n        this.$refs.canvas.needsRender = true;\n      }\n    },\n    regenerateObstacles: function regenerateObstacles(count) {\n      var _this11 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var response, obstacles;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              // 显示加载状态\n              _this11.$toast.info(\"\\u6B63\\u5728\\u751F\\u6210\".concat(count, \"\\u4E2A\\u969C\\u788D\\u7269...\"));\n              console.log(\"\\u8BF7\\u6C42\\u751F\\u6210\".concat(count, \"\\u4E2A\\u969C\\u788D\\u7269\"));\n\n              // 调用API\n              _context8.next = 5;\n              return _this11.axios.post(\"/simulations/\".concat(_this11.simulationId, \"/regenerate-obstacles\"), {\n                count: count\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 5:\n              response = _context8.sent;\n              console.log('障碍物生成响应:', response);\n              if (!(response.data && response.data.obstacles)) {\n                _context8.next = 18;\n                break;\n              }\n              // 确保obstacles是数组格式\n              obstacles = Array.isArray(response.data.obstacles) ? response.data.obstacles : [];\n              console.log(\"\\u6536\\u5230\".concat(obstacles.length, \"\\u4E2A\\u969C\\u788D\\u7269:\"), obstacles);\n\n              // 更新模拟对象中的障碍物\n              _this11.simulation.obstacles = obstacles;\n\n              // 更新障碍物计数器\n              if (_this11.simulation.obstacle_count !== undefined) {\n                _this11.simulation.obstacle_count = obstacles.length;\n              }\n              _this11.$toast.success(\"\\u6210\\u529F\\u751F\\u6210\".concat(obstacles.length, \"\\u4E2A\\u969C\\u788D\\u7269\"));\n\n              // 强制重绘画布\n              _this11.$nextTick(function () {\n                if (_this11.$refs.canvas) {\n                  console.log('更新画布组件的障碍物数据');\n\n                  // 确保显示开关打开\n                  if (Object.prototype.hasOwnProperty.call(_this11.$refs.canvas, 'showObstacles')) {\n                    _this11.$refs.canvas.showObstacles = true;\n                  }\n\n                  // 通知画布需要重绘\n                  _this11.$refs.canvas.needsRender = true;\n\n                  // 强制重绘\n                  _this11.$refs.canvas.drawSimulation(true);\n                  console.log('画布重绘完成');\n                } else {\n                  console.warn('画布组件引用不可用');\n                }\n              });\n\n              // 更新Vuex存储\n              _this11.$store.commit('UPDATE_SIMULATION_PROPERTY', {\n                simulationId: _this11.simulationId,\n                property: 'obstacles',\n                value: obstacles\n              });\n              _this11.$store.commit('UPDATE_SIMULATION_PROPERTY', {\n                simulationId: _this11.simulationId,\n                property: 'obstacle_count',\n                value: obstacles.length\n              });\n              _context8.next = 19;\n              break;\n            case 18:\n              throw new Error('响应中缺少障碍物数据');\n            case 19:\n              _context8.next = 25;\n              break;\n            case 21:\n              _context8.prev = 21;\n              _context8.t0 = _context8[\"catch\"](0);\n              console.error('生成障碍物失败:', _context8.t0);\n              _this11.$toast.error('生成障碍物失败: ' + (_context8.t0.message || '未知错误'));\n            case 25:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, null, [[0, 21]]);\n      }))();\n    }\n  },\n  watch: {\n    simulationId: {\n      handler: function handler(newId, oldId) {\n        if (newId !== oldId) {\n          console.log(\"\\u6A21\\u62DFID\\u53D8\\u66F4: \".concat(oldId, \" -> \").concat(newId));\n          // 重新初始化组件\n          this.closeWebSocketConnection();\n          this.cleanupTimers();\n          this.initializeComponent();\n        }\n      },\n      immediate: false\n    },\n    // 监视store中的当前模拟数据变化\n    storeCurrentSimulation: {\n      handler: function handler(newSimulation) {\n        if (newSimulation && newSimulation.id === this.simulationId) {\n          // 仅在首次加载或重要属性变化时更新本地数据\n          if (!this.simulation.id || newSimulation.is_running !== this.simulation.is_running || newSimulation.is_captured !== this.simulation.is_captured || newSimulation.escaped !== this.simulation.escaped) {\n            this.simulation = newSimulation;\n            this.isRunning = newSimulation.is_running;\n            this.isCaptured = newSimulation.is_captured;\n            this.isEscaped = newSimulation.escaped || false;\n          }\n        }\n      },\n      deep: true\n    },\n    // 监视运行状态\n    isRunning: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal === false && oldVal === true) {\n          // 模拟停止时，确保WebSocket关闭\n          this.closeWebSocketConnection();\n        }\n      }\n    },\n    // 监视捕获状态\n    isCaptured: {\n      handler: function handler(newVal) {\n        if (newVal === true) {\n          // 捕获成功时关闭WebSocket连接\n          this.closeWebSocketConnection();\n\n          // 通知画布需要最终渲染\n          if (this.$refs.canvas && Object.prototype.hasOwnProperty.call(this.$refs.canvas, 'needsRender')) {\n            this.$refs.canvas.needsRender = true;\n          }\n        }\n      }\n    },\n    // 监视逃脱状态\n    isEscaped: {\n      handler: function handler(newVal) {\n        if (newVal === true) {\n          // 逃脱成功时关闭WebSocket连接\n          this.closeWebSocketConnection();\n\n          // 通知画布需要最终渲染\n          if (this.$refs.canvas && Object.prototype.hasOwnProperty.call(this.$refs.canvas, 'needsRender')) {\n            this.$refs.canvas.needsRender = true;\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["SimulationCanvas","SimulationInfo","HunterStatisticsChart","PerformanceMonitor","EnvironmentSettingsPanel","setupWebSocket","closeWebSocket","mapState","mapGetters","name","components","props","simulationId","type","Number","required","data","simulation","isRunning","isCaptured","isEscaped","socket","showTrails","showVisionRange","showCommunicationRange","showDeleteDialog","deleteLoading","activeTab","wsLatency","lastMessageTime","showConnectionStatus","connectionStatusText","connectionStatusColor","renderTime","lastRenderTimestamp","dataUpdateTimer","isConnecting","partialCaptureNotified","obstacleCount","computed","_objectSpread","storeCurrentSimulation","state","currentSimulation","simulationsLoading","loading","statusChipColor","statusChipText","getTotalTargets","total_targets_count","targets","length","captured_targets_count","escaped_targets_count","getProgressColor","captured","total","created","$root","$on","handleApiError","mounted","console","log","document","addEventListener","handleVisibilityChange","window","handleWindowFocus","handleWindowBlur","initializeComponent","beforeDestroy","closeWebSocketConnection","cleanupTimers","$off","removeEventListener","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","fetchSimulation","id","obstacles","regenerateObstacles","is_running","is_captured","escaped","hunters","JSON","parse","e","error","setupWebSocketConnection","$nextTick","$refs","canvas","needsRender","lastRenderState","drawSimulation","loadFinalSnapshot","t0","showErrorStatus","stop","_this2","_callee2","response","_callee2$","_context2","axios","get","concat","sent","undefined","step","step_count","capture_time","Array","isArray","creation_time","created_at","warn","_this3","_callee3","storeSimulation","_callee3$","_context3","getSimulationById","$store","dispatch","abrupt","$toast","_this4","setTimeout","createNewWebSocketConnection","_this5","onOpen","showSuccessStatus","onMessage","handleWebSocketMessage","onClose","event","code","showWarningStatus","onError","onReconnect","newSocket","showInfoStatus","Error","stack","_data$targets","_this$simulation","_this$simulation2","_this$simulation3","targetCount","capturedCount","escapedCount","totalTargets","calculateWsLatency","_typeof","safeData","isFinite","allCaptured","allEscaped","previousCapturedCount","newCaptures","previousEscapedCount","newEscapes","updateSimulationDataDebounced","newlyCaptured","success","newlyEscaped","warning","info","property","value","now","performance","Math","round","_this6","clearTimeout","startTime","startSimulation","_this7","_callee4","_callee4$","_context4","Promise","resolve","stopSimulation","_this8","_callee5","_callee5$","_context5","resetSimulation","_this9","_callee6","_callee6$","_context6","deleteSimulation","_this10","_callee7","_callee7$","_context7","$router","push","finish","hidden","navigateToList","message","status","includes","toggleObstacles","show","showObstacles","count","_this11","_callee8","_callee8$","_context8","post","headers","obstacle_count","Object","prototype","hasOwnProperty","call","commit","watch","handler","newId","oldId","immediate","newSimulation","deep","newVal","oldVal"],"sources":["src/views/SimulationDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"simulation-detail\">\r\n    <v-container fluid class=\"content-container\">\r\n      <v-row no-gutters class=\"content-row\">\r\n        <!-- 左侧模拟画布区域 -->\r\n        <v-col cols=\"12\" md=\"8\" class=\"pr-md-2\">\r\n          <v-card class=\"simulation-canvas-card\">\r\n            <div class=\"d-flex align-center px-2\">\r\n              <div class=\"title-section\">\r\n                <span class=\"subtitle-1 font-weight-medium\">{{ simulation.name }}</span>\r\n              </div>\r\n              <v-spacer></v-spacer>\r\n              <v-chip x-small :color=\"statusChipColor\" text-color=\"white\" class=\"mx-1\">\r\n                {{ statusChipText }}\r\n              </v-chip>\r\n              <!-- 添加目标捕获进度指示器 -->\r\n              <v-chip x-small :color=\"getProgressColor\" text-color=\"white\" class=\"ml-1\">\r\n                已捕获: {{simulation.captured_targets_count || 0}}/{{getTotalTargets}}\r\n              </v-chip>\r\n            </div>\r\n            \r\n            <!-- 模拟画布 - 传递障碍物信息 -->\r\n            <simulation-canvas\r\n              ref=\"canvas\"\r\n              :hunters=\"simulation.hunters || []\"\r\n              :targets=\"simulation.targets || []\"\r\n              :environment-size=\"simulation.environment_size || 500\"\r\n              :is-running=\"isRunning\"\r\n              :is-captured=\"isCaptured\"\r\n              :escaped=\"isEscaped\"\r\n              :show-trails=\"showTrails\"\r\n              :show-vision-range=\"showVisionRange\"\r\n              :show-communication-range=\"showCommunicationRange\"\r\n              :obstacles=\"simulation.obstacles || []\"\r\n            ></simulation-canvas>\r\n          </v-card>\r\n        </v-col>\r\n        \r\n        <!-- 右侧控制面板和数据分析区域 -->\r\n        <v-col cols=\"12\" md=\"4\">\r\n          <v-card class=\"control-panel mb-2\">\r\n            <v-card-title class=\"py-1 subtitle-1\">控制面板</v-card-title>\r\n            <v-card-text class=\"py-1\">\r\n              <!-- 控制按钮组 -->\r\n              <div class=\"d-flex mb-3 justify-center\">\r\n                <v-btn small color=\"primary\" :disabled=\"isRunning || isCaptured || isEscaped\" @click=\"startSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-play</v-icon>开始\r\n                </v-btn>\r\n                <v-btn small color=\"error\" :disabled=\"!isRunning\" @click=\"stopSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-stop</v-icon>停止\r\n                </v-btn>\r\n                <v-btn small color=\"warning\" :disabled=\"isRunning\" @click=\"resetSimulation\" class=\"mx-1\">\r\n                  <v-icon small left>mdi-refresh</v-icon>重置\r\n                </v-btn>\r\n              </div>\r\n              \r\n              <!-- 显示选项 -->\r\n              <div class=\"display-options mb-2\">\r\n                <div class=\"subtitle-2 mb-1\">显示选项</div>\r\n                <v-row dense>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"轨迹\" v-model=\"showTrails\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"视野范围\" v-model=\"showVisionRange\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                  <v-col cols=\"4\">\r\n                    <v-switch dense hide-details label=\"通信范围\" v-model=\"showCommunicationRange\" class=\"mt-0\"></v-switch>\r\n                  </v-col>\r\n                </v-row>\r\n              </div>\r\n            </v-card-text>\r\n          </v-card>\r\n\r\n          <!-- 环境设置面板 -->\r\n          <v-card class=\"mb-2\">\r\n            <environment-settings-panel\r\n              :is-running=\"isRunning\"\r\n              :current-obstacles=\"simulation.obstacles || []\"\r\n              @toggle-obstacles=\"toggleObstacles\"\r\n              @regenerate-obstacles=\"regenerateObstacles\"\r\n            ></environment-settings-panel>\r\n          </v-card>\r\n          \r\n          <!-- 数据分析区域 - 使用标签页组织内容 -->\r\n          <v-card>\r\n            <v-tabs v-model=\"activeTab\" background-color=\"primary\" dark dense>\r\n              <v-tab>模拟信息</v-tab>\r\n              <v-tab>统计图表</v-tab>\r\n            </v-tabs>\r\n            \r\n            <v-tabs-items v-model=\"activeTab\">\r\n              <v-tab-item>\r\n                <simulation-info :simulation=\"simulation\"></simulation-info>\r\n              </v-tab-item>\r\n              <v-tab-item>\r\n                <hunter-statistics-chart\r\n                  :hunters=\"simulation.hunters || []\"\r\n                  :targets=\"simulation.targets || []\"\r\n                  :step-count=\"simulation.step_count || 0\"\r\n                  :is-running=\"isRunning\"\r\n                ></hunter-statistics-chart>\r\n                \r\n                <performance-monitor\r\n                  v-if=\"simulation.step_count > 0\"\r\n                  :render-time=\"renderTime\"\r\n                  :ws-latency=\"wsLatency\"\r\n                ></performance-monitor>\r\n              </v-tab-item>\r\n            </v-tabs-items>\r\n          </v-card>\r\n          \r\n          <!-- 底部操作按钮 -->\r\n          <v-card class=\"mt-2 pa-2\">\r\n            <div class=\"d-flex justify-space-between\">\r\n              <v-btn small text color=\"primary\" @click=\"navigateToList\">\r\n                <v-icon small left>mdi-arrow-left</v-icon>返回列表\r\n              </v-btn>\r\n              <v-btn small text color=\"error\" @click=\"showDeleteDialog = true\">\r\n                <v-icon small left>mdi-delete</v-icon>删除模拟\r\n              </v-btn>\r\n            </div>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n    \r\n    <!-- 删除确认对话框 -->\r\n    <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title class=\"headline\">确认删除?</v-card-title>\r\n        <v-card-text>此操作将永久删除该模拟及其所有相关数据，无法恢复。</v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteDialog = false\">取消</v-btn>\r\n          <v-btn color=\"error\" text @click=\"deleteSimulation\" :loading=\"deleteLoading\">确认删除</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入组件\r\nimport SimulationCanvas from '../components/SimulationCanvas.vue';\r\nimport SimulationInfo from '../components/simulation/SimulationInfo.vue';\r\nimport HunterStatisticsChart from '../components/simulation/HunterStatisticsChart.vue';\r\nimport PerformanceMonitor from '../components/simulation/PerformanceMonitor.vue';\r\nimport EnvironmentSettingsPanel from '../components/simulation/EnvironmentSettingsPanel.vue';\r\nimport { setupWebSocket, closeWebSocket } from '../components/simulation/WebSocketManager.js';\r\nimport { mapState, mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  name: 'SimulationDetail',\r\n  components: {\r\n    SimulationCanvas,\r\n    SimulationInfo,\r\n    HunterStatisticsChart,\r\n    PerformanceMonitor,\r\n    EnvironmentSettingsPanel\r\n  },\r\n  props: {\r\n    simulationId: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      simulation: {},\r\n      isRunning: false,\r\n      isCaptured: false,\r\n      isEscaped: false,\r\n      socket: null,\r\n      showTrails: true,\r\n      showVisionRange: false,\r\n      showCommunicationRange: false,\r\n      showDeleteDialog: false,\r\n      deleteLoading: false,\r\n      \r\n      // 添加缺失的响应式属性\r\n      activeTab: 0,\r\n      \r\n      // WebSocket相关状态\r\n      wsLatency: 0,\r\n      lastMessageTime: 0,\r\n      \r\n      // 连接状态提示\r\n      showConnectionStatus: false,\r\n      connectionStatusText: '',\r\n      connectionStatusColor: 'info',\r\n      \r\n      // 性能监控\r\n      renderTime: 0,\r\n      lastRenderTimestamp: 0,\r\n      \r\n      // 数据处理相关\r\n      dataUpdateTimer: null,\r\n      \r\n      // 连接状态标记\r\n      isConnecting: false,\r\n      \r\n      // 捕获状态跟踪\r\n      partialCaptureNotified: false,\r\n      obstacleCount: 3 // 默认障碍物数量\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      storeCurrentSimulation: state => state.currentSimulation,\r\n      simulationsLoading: state => state.loading\r\n    }),\r\n    ...mapGetters([\r\n      'getSimulationById'\r\n    ]),\r\n    statusChipColor() {\r\n      if (this.isCaptured) return 'success';\r\n      if (this.isEscaped) return 'warning';\r\n      if (this.isRunning) return 'primary';\r\n      return 'grey';\r\n    },\r\n    statusChipText() {\r\n      if (this.isCaptured) return '已捕获';\r\n      if (this.isEscaped) return '已逃脱';\r\n      if (this.isRunning) return '进行中';\r\n      return '已停止';\r\n    },\r\n    getTotalTargets() {\r\n      // 如果有明确的总数则使用，否则计算当前剩余+已捕获\r\n      return this.simulation.total_targets_count || \r\n             ((this.simulation.targets ? this.simulation.targets.length : 0) + \r\n              (this.simulation.captured_targets_count || 0) +\r\n              (this.simulation.escaped_targets_count || 0));\r\n    },\r\n    getProgressColor() {\r\n      const captured = this.simulation.captured_targets_count || 0;\r\n      const total = this.getTotalTargets;\r\n      \r\n      if (captured === 0) return 'grey';\r\n      if (captured < total) return 'info';\r\n      return 'success';\r\n    }\r\n  },\r\n  created() {\r\n    // 注册错误处理事件监听\r\n    this.$root.$on('api-error', this.handleApiError);\r\n  },\r\n  mounted() {\r\n    console.log('SimulationDetail mounted');\r\n    // 监听页面可见性变化\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.addEventListener('focus', this.handleWindowFocus);\r\n    window.addEventListener('blur', this.handleWindowBlur);\r\n    \r\n    // 初始化组件\r\n    this.initializeComponent();\r\n  },\r\n  beforeDestroy() {\r\n    console.log('SimulationDetail beforeDestroy');\r\n    // 清理资源\r\n    this.closeWebSocketConnection();\r\n    this.cleanupTimers();\r\n    \r\n    // 移除事件监听\r\n    this.$root.$off('api-error', this.handleApiError);\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n    window.removeEventListener('focus', this.handleWindowFocus);\r\n    window.removeEventListener('blur', this.handleWindowBlur);\r\n  },\r\n  methods: {\r\n    // 初始化组件\r\n    async initializeComponent() {\r\n      console.log('初始化组件...');\r\n      try {\r\n        // 从API获取模拟数据\r\n        await this.fetchSimulation();\r\n        console.log('模拟数据获取成功:', this.simulation.id);\r\n\r\n        // 检查障碍物数量，如果为0但输入值不为0，则生成障碍物\r\n        if ((!this.simulation.obstacles || this.simulation.obstacles.length === 0) && \r\n            this.obstacleCount > 0) {\r\n          console.log('初始化障碍物...');\r\n          await this.regenerateObstacles(this.obstacleCount);\r\n        }\r\n          \r\n        // 设置捕获状态和逃脱状态\r\n        this.isRunning = this.simulation.is_running;\r\n        this.isCaptured = this.simulation.is_captured;\r\n        this.isEscaped = this.simulation.escaped || false;\r\n        \r\n        // 确保数据格式正确\r\n        if (typeof this.simulation.hunters === 'string') {\r\n          try {\r\n            this.simulation.hunters = JSON.parse(this.simulation.hunters);\r\n          } catch (e) {\r\n            console.error('解析hunters失败:', e);\r\n            this.simulation.hunters = [];\r\n          }\r\n        }\r\n        \r\n        if (typeof this.simulation.targets === 'string') {\r\n          try {\r\n            this.simulation.targets = JSON.parse(this.simulation.targets);\r\n          } catch (e) {\r\n            console.error('解析targets失败:', e);\r\n            this.simulation.targets = [];\r\n          }\r\n        }\r\n        \r\n        // 仅在模拟正在运行且未被捕获/未逃脱时建立WebSocket连接\r\n        if (this.isRunning && !this.isCaptured && !this.isEscaped) {\r\n          this.setupWebSocketConnection();\r\n        } else if (this.isCaptured || this.isEscaped) {\r\n          // 如果模拟已经完成，显示完成状态\r\n          console.log('模拟已完成，显示最终状态');\r\n          \r\n          // 确保画布知道模拟已完成\r\n          this.$nextTick(() => {\r\n            if (this.$refs.canvas) {\r\n              this.$refs.canvas.needsRender = true;\r\n              // 强制最终状态\r\n              if (this.$refs.canvas.lastRenderState) {\r\n                this.$refs.canvas.lastRenderState = {\r\n                  isCaptured: this.isCaptured,\r\n                  isEscaped: this.isEscaped\r\n                };\r\n              }\r\n              // 强制重绘一次\r\n              this.$refs.canvas.drawSimulation(true);\r\n            }\r\n          });\r\n          \r\n          // 加载最终快照数据\r\n          this.loadFinalSnapshot();\r\n        }\r\n      } catch (error) {\r\n        console.error('初始化组件失败:', error);\r\n        this.showErrorStatus('初始化失败，请刷新页面重试');\r\n      }\r\n    },\r\n\r\n    // 添加加载最终快照的方法\r\n    async loadFinalSnapshot() {\r\n      try {\r\n        // 尝试加载捕获时的快照\r\n        const response = await this.axios.get(`/simulations/${this.simulationId}/final-snapshot`);\r\n        if (response.data) {\r\n          console.log('获取到最终快照数据:', response.data);\r\n          \r\n          // 更新模拟状态\r\n          if (response.data.is_captured !== undefined) {\r\n            this.isCaptured = response.data.is_captured;\r\n          }\r\n          \r\n          // 更新步数\r\n          if (response.data.step !== undefined) {\r\n            this.simulation.step_count = response.data.step;\r\n          }\r\n          \r\n          // 更新捕获时间\r\n          if (response.data.capture_time !== undefined && response.data.capture_time !== null) {\r\n            this.simulation.capture_time = response.data.capture_time;\r\n          }\r\n          \r\n          // 更新显示数据\r\n          if (response.data.hunters) {\r\n            // 确保hunters是数组\r\n            this.simulation.hunters = Array.isArray(response.data.hunters) ? \r\n              response.data.hunters : JSON.parse(response.data.hunters);\r\n          }\r\n          \r\n          if (response.data.targets) {\r\n            // 确保targets是数组\r\n            this.simulation.targets = Array.isArray(response.data.targets) ? \r\n              response.data.targets : JSON.parse(response.data.targets);\r\n          }\r\n          \r\n          // 更新捕获目标数量\r\n          if (response.data.captured_targets_count !== undefined) {\r\n            this.simulation.captured_targets_count = response.data.captured_targets_count;\r\n          }\r\n          \r\n          // 更新创建时间\r\n          if (response.data.creation_time) {\r\n            this.simulation.created_at = response.data.creation_time;\r\n          }\r\n          \r\n          // 强制重绘画布\r\n          this.$nextTick(() => {\r\n            if (this.$refs.canvas) {\r\n              this.$refs.canvas.drawSimulation(true);\r\n            }\r\n          });\r\n        }\r\n      } catch (e) {\r\n        console.warn('加载最终快照失败:', e);\r\n        // 加载失败时不中断流程，使用默认显示\r\n      }\r\n    },\r\n    \r\n    // 获取模拟数据\r\n    async fetchSimulation() {\r\n      try {\r\n        console.log('获取模拟数据, ID:', this.simulationId);\r\n        // 尝试从store获取数据\r\n        let storeSimulation = this.getSimulationById(this.simulationId);\r\n        \r\n        // 如果store中没有数据，从API获取\r\n        if (!storeSimulation) {\r\n          console.log('从API获取模拟数据');\r\n          const response = await this.$store.dispatch('fetchSimulation', this.simulationId);\r\n          this.simulation = response;\r\n        } else {\r\n          console.log('从Store获取模拟数据');\r\n          this.simulation = storeSimulation;\r\n        }\r\n        \r\n        // 更新状态\r\n        this.isRunning = this.simulation.is_running;\r\n        this.isCaptured = this.simulation.is_captured;\r\n        this.isEscaped = this.simulation.escaped || false;\r\n        \r\n        console.log('模拟数据获取完成:', this.simulation.name);\r\n        return this.simulation;\r\n      } catch (error) {\r\n        console.error('获取模拟数据失败:', error);\r\n        this.$toast.error('获取模拟数据失败');\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    // 设置WebSocket连接\r\n    setupWebSocketConnection() {\r\n      // 连接创建中标记，防止重复创建\r\n      if (this.isConnecting) {\r\n        console.log('WebSocket连接已在创建中，避免重复创建');\r\n        return;\r\n      }\r\n      \r\n      this.isConnecting = true;\r\n      \r\n      // 确保先关闭已有连接\r\n      if (this.socket) {\r\n        console.log('关闭已有WebSocket连接，准备创建新连接');\r\n        this.closeWebSocketConnection();\r\n        \r\n        // 添加短延迟确保连接完全关闭\r\n        setTimeout(() => {\r\n          this.createNewWebSocketConnection();\r\n        }, 300);\r\n      } else {\r\n        this.createNewWebSocketConnection();\r\n      }\r\n    },\r\n    \r\n    // 提取创建连接的逻辑为单独方法\r\n    createNewWebSocketConnection() {\r\n      console.log(`创建WebSocket连接，模拟ID: ${this.simulationId}`);\r\n      \r\n      this.socket = setupWebSocket(this.simulationId, {\r\n        onOpen: () => {\r\n          console.log(`WebSocket连接已建立，模拟ID: ${this.simulationId}`);\r\n          this.showSuccessStatus('WebSocket连接已建立');\r\n          this.isConnecting = false; // 重置连接状态\r\n        },\r\n        onMessage: (data) => {\r\n          this.handleWebSocketMessage(data);\r\n        },\r\n        onClose: (event) => {\r\n          // 如果是正常关闭，不显示错误\r\n          if (event.code !== 1000 && event.code !== 1001) {\r\n            this.showWarningStatus('WebSocket连接已关闭');\r\n          }\r\n          this.isConnecting = false; // 重置连接状态\r\n        },\r\n        onError: () => {\r\n          this.showErrorStatus('WebSocket连接错误');\r\n          this.isConnecting = false; // 重置连接状态\r\n        },\r\n        onReconnect: (newSocket) => {\r\n          this.socket = newSocket;\r\n          this.showInfoStatus('WebSocket已重新连接');\r\n        }\r\n      });\r\n    },\r\n    \r\n    // 改进closeWebSocketConnection方法\r\n    closeWebSocketConnection() {\r\n      if (this.socket) {\r\n        console.log(`关闭WebSocket连接，模拟ID: ${this.simulationId}，原因: ${new Error().stack}`);\r\n        try {\r\n          closeWebSocket(this.socket);\r\n        } catch (e) {\r\n          console.error('关闭WebSocket时出错:', e);\r\n        } finally {\r\n          this.socket = null;\r\n          this.isConnecting = false;\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 处理WebSocket消息\r\n    handleWebSocketMessage(data) {\r\n  try {\r\n    // 记录接收到的消息内容，便于调试\r\n    console.log('收到WebSocket消息:', {\r\n      isRunning: data?.is_running,\r\n      isCaptured: data?.is_captured,\r\n      isEscaped: data?.escaped,\r\n      targetCount: data?.targets?.length || 0,\r\n      capturedCount: data?.captured_targets_count || 0,\r\n      escapedCount: data?.escaped_targets_count || 0,\r\n      totalTargets: data?.total_targets_count || 0\r\n    });\r\n    \r\n    // 如果模拟已完成，忽略后续消息\r\n    if (this.isCaptured || this.isEscaped) {\r\n      console.log('模拟已完成，忽略WebSocket消息');\r\n      return;\r\n    }\r\n    \r\n    // 计算WebSocket延迟\r\n    this.calculateWsLatency();\r\n    \r\n    // 数据有效性检查\r\n    if (!data || typeof data !== 'object') {\r\n      console.error('收到无效WebSocket消息:', data);\r\n      return; // 不关闭连接，只忽略此消息\r\n    }\r\n    \r\n    // 处理错误消息\r\n    if (data.error) {\r\n      console.error('WebSocket错误:', data.error);\r\n      this.$toast.error(`WebSocket错误: ${data.error}`);\r\n      return;\r\n    }\r\n    \r\n    // 创建安全的数据对象，替换所有undefined值\r\n    const safeData = {\r\n      id: data.id || this.simulationId,\r\n      is_running: data.is_running === undefined ? this.isRunning : data.is_running,\r\n      is_captured: data.is_captured === undefined ? this.isCaptured : data.is_captured,\r\n      escaped: data.escaped === undefined ? this.isEscaped : data.escaped,\r\n      hunters: Array.isArray(data.hunters) ? data.hunters : [],\r\n      targets: Array.isArray(data.targets) ? data.targets : [],\r\n      step_count: Number.isFinite(data.step_count) ? data.step_count : 0,\r\n      captured_targets_count: Number.isFinite(data.captured_targets_count) ? data.captured_targets_count : 0,\r\n      escaped_targets_count: Number.isFinite(data.escaped_targets_count) ? data.escaped_targets_count : 0,\r\n      total_targets_count: Number.isFinite(data.total_targets_count) ? data.total_targets_count : 0,\r\n      obstacles: Array.isArray(data.obstacles) ? data.obstacles : this.simulation?.obstacles || []\r\n    };\r\n    \r\n    // 检查模拟是否刚完成\r\n    const allCaptured = safeData.is_captured && (!safeData.targets || safeData.targets.length === 0);\r\n    const allEscaped = safeData.escaped && (!safeData.targets || safeData.targets.length === 0);\r\n    \r\n    // 检查是否有新捕获的目标\r\n    const capturedCount = safeData.captured_targets_count || 0;\r\n    const previousCapturedCount = this.simulation?.captured_targets_count || 0;\r\n    const newCaptures = capturedCount > previousCapturedCount;\r\n    \r\n    // 检查是否有新逃脱的目标\r\n    const escapedCount = safeData.escaped_targets_count || 0;\r\n    const previousEscapedCount = this.simulation?.escaped_targets_count || 0;\r\n    const newEscapes = escapedCount > previousEscapedCount;\r\n    \r\n    // 使用防抖更新数据\r\n    this.updateSimulationDataDebounced(safeData);\r\n    \r\n    // 处理目标捕获/逃脱提示\r\n    if (newCaptures) {\r\n      const newlyCaptured = capturedCount - previousCapturedCount;\r\n      this.$toast.success(`成功捕获${newlyCaptured}个目标！`);\r\n    }\r\n    \r\n    if (newEscapes) {\r\n      const newlyEscaped = escapedCount - previousEscapedCount;\r\n      this.$toast.warning(`${newlyEscaped}个目标成功逃脱！`);\r\n    }\r\n    \r\n    // 显示部分完成状态\r\n    const totalTargets = safeData.total_targets_count || \r\n                        (capturedCount + escapedCount + (safeData.targets ? safeData.targets.length : 0));\r\n    \r\n    if ((capturedCount > 0 || escapedCount > 0) && \r\n        safeData.targets && safeData.targets.length > 0 && \r\n        !this.partialCaptureNotified) {\r\n      this.$toast.info(`已处理${capturedCount + escapedCount}/${totalTargets}个目标`);\r\n      this.partialCaptureNotified = true;\r\n    }\r\n    \r\n    // 如果模拟刚完成，处理完成状态\r\n    if ((allCaptured && !this.isCaptured) || (allEscaped && !this.isEscaped)) {\r\n      console.log('模拟刚刚完成，关闭连接并最终更新');\r\n      \r\n      this.isCaptured = allCaptured;\r\n      this.isEscaped = allEscaped;\r\n      this.isRunning = false;\r\n      \r\n      // 更新Vuex Store\r\n      this.$store.dispatch('updateSimulationStatus', {\r\n        simulationId: this.simulationId,\r\n        isRunning: false,\r\n        isCaptured: allCaptured,\r\n        isEscaped: allEscaped\r\n      });\r\n      \r\n      // 显示完成消息\r\n      if (allCaptured) {\r\n        this.$toast.success(`模拟完成：成功捕获所有${capturedCount}个目标!`);\r\n      } else if (allEscaped) {\r\n        this.$toast.warning(`模拟完成：所有${escapedCount}个目标成功逃脱!`);\r\n      }\r\n      \r\n      // 关闭WebSocket连接\r\n      this.closeWebSocketConnection();\r\n      \r\n      // 通知Canvas最终渲染\r\n      if (this.$refs.canvas) {\r\n        this.$refs.canvas.needsRender = true;\r\n      }\r\n      \r\n      return;\r\n    }\r\n    \r\n    // 如果运行状态改变但非完成，更新状态\r\n    if (this.isRunning !== safeData.is_running) {\r\n      this.isRunning = safeData.is_running;\r\n      \r\n      // 更新Store\r\n      this.$store.dispatch('updateSimulationProperty', {\r\n        simulationId: this.simulationId,\r\n        property: 'is_running',\r\n        value: safeData.is_running\r\n      });\r\n      \r\n      // 如果模拟停止但未完成，提示用户\r\n      if (!this.isRunning && !this.isCaptured && !this.isEscaped) {\r\n        this.$toast.info('模拟已停止');\r\n        this.closeWebSocketConnection();\r\n      }\r\n    }\r\n  } catch (error) {\r\n    // 捕获所有可能的异常，防止中断WebSocket连接\r\n    console.error('处理WebSocket消息时出错:', error);\r\n    console.error('错误详情:', error.stack);\r\n    this.$toast.error('处理模拟数据时出错，请刷新页面重试');\r\n    \r\n    // 尝试继续保持连接\r\n    // 不要在此处关闭WebSocket连接，让心跳机制决定是否需要重连\r\n  }\r\n},\r\n    \r\n    // 计算WebSocket延迟\r\n    calculateWsLatency() {\r\n      const now = performance.now();\r\n      if (this.lastMessageTime) {\r\n        this.wsLatency = Math.round(now - this.lastMessageTime);\r\n      }\r\n      this.lastMessageTime = now;\r\n    },\r\n    \r\n    // 防抖更新数据\r\n    updateSimulationDataDebounced(data) {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n      }\r\n      \r\n      this.dataUpdateTimer = setTimeout(() => {\r\n        try {\r\n          const startTime = performance.now();\r\n          \r\n          // 安全地更新模拟数据\r\n          if (data) {\r\n            this.simulation = { ...this.simulation, ...data };\r\n            this.isRunning = !!data.is_running;\r\n            this.isCaptured = !!data.is_captured;\r\n            this.isEscaped = !!data.escaped;\r\n          }\r\n          \r\n          // 计算渲染时间\r\n          this.renderTime = Math.round(performance.now() - startTime);\r\n        } catch (error) {\r\n          console.error('更新模拟数据时出错:', error);\r\n          // 继续正常运行，不中断模拟\r\n        }\r\n      }, 50);\r\n    },\r\n    \r\n    // 模拟控制方法\r\n    async startSimulation() {\r\n      try {\r\n        // 先关闭可能存在的旧连接\r\n        console.log('启动模拟，关闭已有WebSocket连接');\r\n        this.closeWebSocketConnection();\r\n        \r\n        // 添加短延迟确保连接完全关闭\r\n        await new Promise(resolve => setTimeout(resolve, 200));\r\n        \r\n        // 重置部分捕获通知标志\r\n        this.partialCaptureNotified = false;\r\n        \r\n        // 发送启动请求到API\r\n        await this.$store.dispatch('startSimulation', this.simulationId);\r\n        this.isRunning = true;\r\n        \r\n        // 重新建立WebSocket连接以接收实时更新\r\n        console.log('模拟已启动，创建新WebSocket连接');\r\n        this.setupWebSocketConnection();\r\n        \r\n        this.$toast.success('模拟已启动');\r\n      } catch (error) {\r\n        console.error('启动模拟失败:', error);\r\n        this.$toast.error('启动模拟失败');\r\n        this.isConnecting = false; // 确保重置连接状态\r\n      }\r\n    },\r\n    \r\n    async stopSimulation() {\r\n      try {\r\n        await this.$store.dispatch('stopSimulation', this.simulationId);\r\n        this.isRunning = false;\r\n        \r\n        // 关闭WebSocket连接\r\n        this.closeWebSocketConnection();\r\n        \r\n        this.$toast.success('模拟已停止');\r\n      } catch (error) {\r\n        console.error('停止模拟失败:', error);\r\n        this.$toast.error('停止模拟失败');\r\n      }\r\n    },\r\n    \r\n    async resetSimulation() {\r\n      try {\r\n        // 关闭现有连接\r\n        this.closeWebSocketConnection();\r\n        \r\n        // 重置状态\r\n        this.isCaptured = false;\r\n        this.isEscaped = false;\r\n        this.partialCaptureNotified = false;\r\n        \r\n        const data = await this.$store.dispatch('resetSimulation', this.simulationId);\r\n        this.simulation = data;\r\n        this.isRunning = false;\r\n        \r\n        // 确保画布重绘\r\n        this.$nextTick(() => {\r\n          if (this.$refs.canvas) {\r\n            this.$refs.canvas.drawSimulation(true);\r\n          }\r\n        });\r\n        \r\n        this.$toast.success('模拟已重置');\r\n      } catch (error) {\r\n        console.error('重置模拟失败:', error);\r\n        this.$toast.error('重置模拟失败');\r\n      }\r\n    },\r\n    \r\n    async deleteSimulation() {\r\n      this.deleteLoading = true;\r\n      try {\r\n        // 确保关闭WebSocket连接\r\n        this.closeWebSocketConnection();\r\n        \r\n        await this.$store.dispatch('deleteSimulation', this.simulationId);\r\n        this.$toast.success('模拟已删除');\r\n        this.$router.push('/simulations');\r\n      } catch (error) {\r\n        console.error('删除模拟失败:', error);\r\n        this.$toast.error('删除模拟失败');\r\n      } finally {\r\n        this.deleteLoading = false;\r\n        this.showDeleteDialog = false;\r\n      }\r\n    },\r\n    \r\n    // 优化页面可见性变化处理\r\n    handleVisibilityChange() {\r\n      if (document.hidden) {\r\n        // 页面隐藏时关闭WebSocket\r\n        console.log('页面隐藏，关闭WebSocket连接');\r\n        this.closeWebSocketConnection();\r\n      } else {\r\n        // 页面可见时，只在需要时重新连接\r\n        if (this.isRunning && !this.isCaptured && !this.isEscaped && !this.socket && !this.isConnecting) {\r\n          console.log('页面可见，模拟运行中，重新连接WebSocket');\r\n          this.setupWebSocketConnection();\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 优化窗口焦点变化处理\r\n    handleWindowFocus() {\r\n      if (this.isRunning && !this.isCaptured && !this.isEscaped && !this.socket && !this.isConnecting) {\r\n        console.log('窗口获得焦点，模拟运行中，重新连接WebSocket');\r\n        this.setupWebSocketConnection();\r\n      }\r\n    },\r\n    \r\n    handleWindowBlur() {\r\n      // 窗口失去焦点时无需处理\r\n    },\r\n    \r\n    // 导航方法\r\n    navigateToList() {\r\n      // 清理资源后再导航\r\n      this.closeWebSocketConnection();\r\n      this.cleanupTimers();\r\n      this.$router.push('/simulations');\r\n    },\r\n    \r\n    // 状态提示显示方法\r\n    showInfoStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'info';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showSuccessStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'success';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showWarningStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'warning';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    showErrorStatus(message) {\r\n      this.connectionStatusText = message;\r\n      this.connectionStatusColor = 'error';\r\n      this.showConnectionStatus = true;\r\n    },\r\n    \r\n    // 错误处理\r\n    handleApiError(error) {\r\n      console.error('API错误:', error);\r\n      \r\n      // 特定错误处理\r\n      if (error.status === 404 && error.message.includes('Simulation not found')) {\r\n        this.$toast.error('模拟不存在或已被删除');\r\n        this.$router.push('/simulations');\r\n      }\r\n    },\r\n    \r\n    // 清理定时器\r\n    cleanupTimers() {\r\n      if (this.dataUpdateTimer) {\r\n        clearTimeout(this.dataUpdateTimer);\r\n        this.dataUpdateTimer = null;\r\n      }\r\n    },\r\n\r\n    // 环境设置方法\r\n    toggleObstacles(show) {\r\n      // 控制障碍物显示/隐藏\r\n      if (this.$refs.canvas) {\r\n        this.$refs.canvas.showObstacles = show;\r\n        // 通知画布需要重绘\r\n        this.$refs.canvas.needsRender = true;\r\n      }\r\n    },\r\n    \r\n    async regenerateObstacles(count) {\r\n      try {\r\n        // 显示加载状态\r\n        this.$toast.info(`正在生成${count}个障碍物...`);\r\n        console.log(`请求生成${count}个障碍物`);\r\n        \r\n        // 调用API\r\n        const response = await this.axios.post(\r\n          `/simulations/${this.simulationId}/regenerate-obstacles`, \r\n          { count: count },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        \r\n        console.log('障碍物生成响应:', response);\r\n        \r\n        if (response.data && response.data.obstacles) {\r\n          // 确保obstacles是数组格式\r\n          const obstacles = Array.isArray(response.data.obstacles) \r\n            ? response.data.obstacles \r\n            : [];\r\n            \r\n          console.log(`收到${obstacles.length}个障碍物:`, obstacles);\r\n          \r\n          // 更新模拟对象中的障碍物\r\n          this.simulation.obstacles = obstacles;\r\n          \r\n          // 更新障碍物计数器\r\n          if (this.simulation.obstacle_count !== undefined) {\r\n            this.simulation.obstacle_count = obstacles.length;\r\n          }\r\n          \r\n          this.$toast.success(`成功生成${obstacles.length}个障碍物`);\r\n          \r\n          // 强制重绘画布\r\n          this.$nextTick(() => {\r\n            if (this.$refs.canvas) {\r\n              console.log('更新画布组件的障碍物数据');\r\n              \r\n              // 确保显示开关打开\r\n              if (Object.prototype.hasOwnProperty.call(this.$refs.canvas, 'showObstacles')) {\r\n                this.$refs.canvas.showObstacles = true;\r\n              }\r\n              \r\n              // 通知画布需要重绘\r\n              this.$refs.canvas.needsRender = true;\r\n              \r\n              // 强制重绘\r\n              this.$refs.canvas.drawSimulation(true);\r\n              \r\n              console.log('画布重绘完成');\r\n            } else {\r\n              console.warn('画布组件引用不可用');\r\n            }\r\n          });\r\n          \r\n          // 更新Vuex存储\r\n          this.$store.commit('UPDATE_SIMULATION_PROPERTY', {\r\n            simulationId: this.simulationId,\r\n            property: 'obstacles',\r\n            value: obstacles\r\n          });\r\n          this.$store.commit('UPDATE_SIMULATION_PROPERTY', {\r\n            simulationId: this.simulationId,\r\n            property: 'obstacle_count',\r\n            value: obstacles.length\r\n          });\r\n        } else {\r\n          throw new Error('响应中缺少障碍物数据');\r\n        }\r\n      } catch (error) {\r\n        console.error('生成障碍物失败:', error);\r\n        this.$toast.error('生成障碍物失败: ' + (error.message || '未知错误'));\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    simulationId: {\r\n      handler(newId, oldId) {\r\n        if (newId !== oldId) {\r\n          console.log(`模拟ID变更: ${oldId} -> ${newId}`);\r\n          // 重新初始化组件\r\n          this.closeWebSocketConnection();\r\n          this.cleanupTimers();\r\n          this.initializeComponent();\r\n        }\r\n      },\r\n      immediate: false\r\n    },\r\n    \r\n    // 监视store中的当前模拟数据变化\r\n    storeCurrentSimulation: {\r\n      handler(newSimulation) {\r\n        if (newSimulation && newSimulation.id === this.simulationId) {\r\n          // 仅在首次加载或重要属性变化时更新本地数据\r\n          if (!this.simulation.id || \r\n              newSimulation.is_running !== this.simulation.is_running ||\r\n              newSimulation.is_captured !== this.simulation.is_captured ||\r\n              newSimulation.escaped !== this.simulation.escaped) {\r\n            this.simulation = newSimulation;\r\n            this.isRunning = newSimulation.is_running;\r\n            this.isCaptured = newSimulation.is_captured;\r\n            this.isEscaped = newSimulation.escaped || false;\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    \r\n    // 监视运行状态\r\n    isRunning: {\r\n      handler(newVal, oldVal) {\r\n        if (newVal === false && oldVal === true) {\r\n          // 模拟停止时，确保WebSocket关闭\r\n          this.closeWebSocketConnection();\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 监视捕获状态\r\n    isCaptured: {\r\n      handler(newVal) {\r\n        if (newVal === true) {\r\n          // 捕获成功时关闭WebSocket连接\r\n          this.closeWebSocketConnection();\r\n          \r\n          // 通知画布需要最终渲染\r\n          if (this.$refs.canvas && Object.prototype.hasOwnProperty.call(this.$refs.canvas, 'needsRender')) {\r\n            this.$refs.canvas.needsRender = true;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 监视逃脱状态\r\n    isEscaped: {\r\n      handler(newVal) {\r\n        if (newVal === true) {\r\n          // 逃脱成功时关闭WebSocket连接\r\n          this.closeWebSocketConnection();\r\n          \r\n          // 通知画布需要最终渲染\r\n          if (this.$refs.canvas && Object.prototype.hasOwnProperty.call(this.$refs.canvas, 'needsRender')) {\r\n            this.$refs.canvas.needsRender = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.simulation-detail {\r\n  height: 100%;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 控制内容区域的最大宽度和居中 */\r\n.content-container {\r\n  max-width: 1200px !important;\r\n  margin: 0 auto !important;\r\n  padding: 12px !important; /* 修改为四周都有padding */\r\n}\r\n\r\n.content-row {\r\n  justify-content: center;\r\n}\r\n\r\n.simulation-canvas-card {\r\n  height: calc(100vh - 100px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 16px; /* 添加顶部边距 */\r\n}\r\n\r\n.control-panel {\r\n  height: auto;\r\n}\r\n\r\n/* 控制元素样式优化 */\r\n:deep(.v-input--switch) {\r\n  margin-top: 0;\r\n}\r\n\r\n:deep(.v-messages) {\r\n  min-height: 0;\r\n}\r\n\r\n:deep(.v-card__title) {\r\n  padding: 8px 12px;\r\n}\r\n\r\n:deep(.v-card__text) {\r\n  padding: 8px 12px;\r\n}\r\n\r\n.title-section {\r\n  padding: 8px 4px;\r\n}\r\n\r\n/* 响应式设计优化 */\r\n@media (max-width: 960px) {\r\n  .simulation-canvas-card {\r\n    height: 60vh;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}